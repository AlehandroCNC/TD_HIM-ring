
STM32 encoder test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08009e40  08009e40  0000ae40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc0  08009fc0  0000b154  2**0
                  CONTENTS
  4 .ARM          00000008  08009fc0  08009fc0  0000afc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fc8  08009fc8  0000b154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fc8  08009fc8  0000afc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fcc  08009fcc  0000afcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  08009fd0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001788  20000154  0800a124  0000b154  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018dc  0800a124  0000b8dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016644  00000000  00000000  0000b184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003660  00000000  00000000  000217c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00024e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ecb  00000000  00000000  00026158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019397  00000000  00000000  00027023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183c2  00000000  00000000  000403ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000918ac  00000000  00000000  0005877c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000576c  00000000  00000000  000ea06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000ef7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009e28 	.word	0x08009e28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	08009e28 	.word	0x08009e28

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b96a 	b.w	8000c48 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9d08      	ldr	r5, [sp, #32]
 8000992:	460c      	mov	r4, r1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d14e      	bne.n	8000a36 <__udivmoddi4+0xaa>
 8000998:	4694      	mov	ip, r2
 800099a:	458c      	cmp	ip, r1
 800099c:	4686      	mov	lr, r0
 800099e:	fab2 f282 	clz	r2, r2
 80009a2:	d962      	bls.n	8000a6a <__udivmoddi4+0xde>
 80009a4:	b14a      	cbz	r2, 80009ba <__udivmoddi4+0x2e>
 80009a6:	f1c2 0320 	rsb	r3, r2, #32
 80009aa:	4091      	lsls	r1, r2
 80009ac:	fa20 f303 	lsr.w	r3, r0, r3
 80009b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b4:	4319      	orrs	r1, r3
 80009b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009be:	fa1f f68c 	uxth.w	r6, ip
 80009c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ca:	fb07 1114 	mls	r1, r7, r4, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb04 f106 	mul.w	r1, r4, r6
 80009d6:	4299      	cmp	r1, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x64>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f104 30ff 	add.w	r0, r4, #4294967295
 80009e2:	f080 8112 	bcs.w	8000c0a <__udivmoddi4+0x27e>
 80009e6:	4299      	cmp	r1, r3
 80009e8:	f240 810f 	bls.w	8000c0a <__udivmoddi4+0x27e>
 80009ec:	3c02      	subs	r4, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	1a59      	subs	r1, r3, r1
 80009f2:	fa1f f38e 	uxth.w	r3, lr
 80009f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009fa:	fb07 1110 	mls	r1, r7, r0, r1
 80009fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a02:	fb00 f606 	mul.w	r6, r0, r6
 8000a06:	429e      	cmp	r6, r3
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x94>
 8000a0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a12:	f080 80fc 	bcs.w	8000c0e <__udivmoddi4+0x282>
 8000a16:	429e      	cmp	r6, r3
 8000a18:	f240 80f9 	bls.w	8000c0e <__udivmoddi4+0x282>
 8000a1c:	4463      	add	r3, ip
 8000a1e:	3802      	subs	r0, #2
 8000a20:	1b9b      	subs	r3, r3, r6
 8000a22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a26:	2100      	movs	r1, #0
 8000a28:	b11d      	cbz	r5, 8000a32 <__udivmoddi4+0xa6>
 8000a2a:	40d3      	lsrs	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d905      	bls.n	8000a46 <__udivmoddi4+0xba>
 8000a3a:	b10d      	cbz	r5, 8000a40 <__udivmoddi4+0xb4>
 8000a3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4608      	mov	r0, r1
 8000a44:	e7f5      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a46:	fab3 f183 	clz	r1, r3
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d146      	bne.n	8000adc <__udivmoddi4+0x150>
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xcc>
 8000a52:	4290      	cmp	r0, r2
 8000a54:	f0c0 80f0 	bcc.w	8000c38 <__udivmoddi4+0x2ac>
 8000a58:	1a86      	subs	r6, r0, r2
 8000a5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d0e6      	beq.n	8000a32 <__udivmoddi4+0xa6>
 8000a64:	e9c5 6300 	strd	r6, r3, [r5]
 8000a68:	e7e3      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	f040 8090 	bne.w	8000b90 <__udivmoddi4+0x204>
 8000a70:	eba1 040c 	sub.w	r4, r1, ip
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	fa1f f78c 	uxth.w	r7, ip
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a86:	fb08 4416 	mls	r4, r8, r6, r4
 8000a8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8e:	fb07 f006 	mul.w	r0, r7, r6
 8000a92:	4298      	cmp	r0, r3
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x11c>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x11a>
 8000aa0:	4298      	cmp	r0, r3
 8000aa2:	f200 80cd 	bhi.w	8000c40 <__udivmoddi4+0x2b4>
 8000aa6:	4626      	mov	r6, r4
 8000aa8:	1a1c      	subs	r4, r3, r0
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ab6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aba:	fb00 f707 	mul.w	r7, r0, r7
 8000abe:	429f      	cmp	r7, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x148>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aca:	d202      	bcs.n	8000ad2 <__udivmoddi4+0x146>
 8000acc:	429f      	cmp	r7, r3
 8000ace:	f200 80b0 	bhi.w	8000c32 <__udivmoddi4+0x2a6>
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	1bdb      	subs	r3, r3, r7
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	e7a5      	b.n	8000a28 <__udivmoddi4+0x9c>
 8000adc:	f1c1 0620 	rsb	r6, r1, #32
 8000ae0:	408b      	lsls	r3, r1
 8000ae2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aec:	fa04 f301 	lsl.w	r3, r4, r1
 8000af0:	ea43 030c 	orr.w	r3, r3, ip
 8000af4:	40f4      	lsrs	r4, r6
 8000af6:	fa00 f801 	lsl.w	r8, r0, r1
 8000afa:	0c38      	lsrs	r0, r7, #16
 8000afc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b00:	fbb4 fef0 	udiv	lr, r4, r0
 8000b04:	fa1f fc87 	uxth.w	ip, r7
 8000b08:	fb00 441e 	mls	r4, r0, lr, r4
 8000b0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b10:	fb0e f90c 	mul.w	r9, lr, ip
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x1a6>
 8000b1c:	193c      	adds	r4, r7, r4
 8000b1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b22:	f080 8084 	bcs.w	8000c2e <__udivmoddi4+0x2a2>
 8000b26:	45a1      	cmp	r9, r4
 8000b28:	f240 8081 	bls.w	8000c2e <__udivmoddi4+0x2a2>
 8000b2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b30:	443c      	add	r4, r7
 8000b32:	eba4 0409 	sub.w	r4, r4, r9
 8000b36:	fa1f f983 	uxth.w	r9, r3
 8000b3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b4a:	45a4      	cmp	ip, r4
 8000b4c:	d907      	bls.n	8000b5e <__udivmoddi4+0x1d2>
 8000b4e:	193c      	adds	r4, r7, r4
 8000b50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b54:	d267      	bcs.n	8000c26 <__udivmoddi4+0x29a>
 8000b56:	45a4      	cmp	ip, r4
 8000b58:	d965      	bls.n	8000c26 <__udivmoddi4+0x29a>
 8000b5a:	3b02      	subs	r3, #2
 8000b5c:	443c      	add	r4, r7
 8000b5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b62:	fba0 9302 	umull	r9, r3, r0, r2
 8000b66:	eba4 040c 	sub.w	r4, r4, ip
 8000b6a:	429c      	cmp	r4, r3
 8000b6c:	46ce      	mov	lr, r9
 8000b6e:	469c      	mov	ip, r3
 8000b70:	d351      	bcc.n	8000c16 <__udivmoddi4+0x28a>
 8000b72:	d04e      	beq.n	8000c12 <__udivmoddi4+0x286>
 8000b74:	b155      	cbz	r5, 8000b8c <__udivmoddi4+0x200>
 8000b76:	ebb8 030e 	subs.w	r3, r8, lr
 8000b7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b82:	40cb      	lsrs	r3, r1
 8000b84:	431e      	orrs	r6, r3
 8000b86:	40cc      	lsrs	r4, r1
 8000b88:	e9c5 6400 	strd	r6, r4, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e750      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f103 	lsr.w	r1, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	430c      	orrs	r4, r1
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bac:	fa1f f78c 	uxth.w	r7, ip
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000bb8:	0c23      	lsrs	r3, r4, #16
 8000bba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbe:	fb00 f107 	mul.w	r1, r0, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x24c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bce:	d22c      	bcs.n	8000c2a <__udivmoddi4+0x29e>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d92a      	bls.n	8000c2a <__udivmoddi4+0x29e>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000be0:	fb08 3311 	mls	r3, r8, r1, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb01 f307 	mul.w	r3, r1, r7
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x276>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bf8:	d213      	bcs.n	8000c22 <__udivmoddi4+0x296>
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d911      	bls.n	8000c22 <__udivmoddi4+0x296>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	1ae4      	subs	r4, r4, r3
 8000c04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c08:	e739      	b.n	8000a7e <__udivmoddi4+0xf2>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	e6f0      	b.n	80009f0 <__udivmoddi4+0x64>
 8000c0e:	4608      	mov	r0, r1
 8000c10:	e706      	b.n	8000a20 <__udivmoddi4+0x94>
 8000c12:	45c8      	cmp	r8, r9
 8000c14:	d2ae      	bcs.n	8000b74 <__udivmoddi4+0x1e8>
 8000c16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7a8      	b.n	8000b74 <__udivmoddi4+0x1e8>
 8000c22:	4631      	mov	r1, r6
 8000c24:	e7ed      	b.n	8000c02 <__udivmoddi4+0x276>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e799      	b.n	8000b5e <__udivmoddi4+0x1d2>
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	e7d4      	b.n	8000bd8 <__udivmoddi4+0x24c>
 8000c2e:	46d6      	mov	lr, sl
 8000c30:	e77f      	b.n	8000b32 <__udivmoddi4+0x1a6>
 8000c32:	4463      	add	r3, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	e74d      	b.n	8000ad4 <__udivmoddi4+0x148>
 8000c38:	4606      	mov	r6, r0
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	e70f      	b.n	8000a60 <__udivmoddi4+0xd4>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	e730      	b.n	8000aa8 <__udivmoddi4+0x11c>
 8000c46:	bf00      	nop

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <delta>:
union {
	uint32_t u32;
	uint8_t u8[4];
} u;

uint32_t delta (uint32_t num_1, uint32_t num_2) {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	if (num_1 > num_2) {return num_1 - num_2;}
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d903      	bls.n	8000c66 <delta+0x1a>
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	e008      	b.n	8000c78 <delta+0x2c>
	else if (num_1 < num_2) {return num_2 - num_1;}
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d203      	bcs.n	8000c76 <delta+0x2a>
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	e000      	b.n	8000c78 <delta+0x2c>
	else {return 0;}
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <sendData.2>:
{

  /* USER CODE BEGIN 1 */
  

  void sendData (uint8_t data[], int length) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	f8c7 c004 	str.w	ip, [r7, #4]
	CDC_Transmit_FS(data, length);
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4619      	mov	r1, r3
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f007 ffd3 	bl	8008c44 <CDC_Transmit_FS>
  }
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <main>:
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
int main(void)
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb4:	f001 f940 	bl	8001f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb8:	f000 fc82 	bl	80015c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbc:	f000 fe0a 	bl	80018d4 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000cc0:	f000 fd8a 	bl	80017d8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000cc4:	f000 fddc 	bl	8001880 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000cc8:	f007 fee8 	bl	8008a9c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000ccc:	f000 fd36 	bl	800173c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000cd0:	f000 fce4 	bl	800169c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000cd4:	213c      	movs	r1, #60	@ 0x3c
 8000cd6:	48c2      	ldr	r0, [pc, #776]	@ (8000fe0 <main+0x338>)
 8000cd8:	f003 fcbd 	bl	8004656 <HAL_TIM_Encoder_Start>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2101      	movs	r1, #1
 8000ce0:	48c0      	ldr	r0, [pc, #768]	@ (8000fe4 <main+0x33c>)
 8000ce2:	f001 fc6d 	bl	80025c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2102      	movs	r1, #2
 8000cea:	48be      	ldr	r0, [pc, #760]	@ (8000fe4 <main+0x33c>)
 8000cec:	f001 fc68 	bl	80025c0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim1);
 8000cf0:	48bd      	ldr	r0, [pc, #756]	@ (8000fe8 <main+0x340>)
 8000cf2:	f003 fb79 	bl	80043e8 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//Обработка команд
	switch (buffer[0]) {
 8000cf6:	4bbd      	ldr	r3, [pc, #756]	@ (8000fec <main+0x344>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	3b30      	subs	r3, #48	@ 0x30
 8000cfc:	2b44      	cmp	r3, #68	@ 0x44
 8000cfe:	f200 8129 	bhi.w	8000f54 <main+0x2ac>
 8000d02:	a201      	add	r2, pc, #4	@ (adr r2, 8000d08 <main+0x60>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000e9f 	.word	0x08000e9f
 8000d0c:	08000eab 	.word	0x08000eab
 8000d10:	08000ebf 	.word	0x08000ebf
 8000d14:	08000ed5 	.word	0x08000ed5
 8000d18:	08000eef 	.word	0x08000eef
 8000d1c:	08000f05 	.word	0x08000f05
 8000d20:	08000f1f 	.word	0x08000f1f
 8000d24:	08000f3b 	.word	0x08000f3b
 8000d28:	08000f55 	.word	0x08000f55
 8000d2c:	08000f55 	.word	0x08000f55
 8000d30:	08000f55 	.word	0x08000f55
 8000d34:	08000f55 	.word	0x08000f55
 8000d38:	08000f55 	.word	0x08000f55
 8000d3c:	08000f55 	.word	0x08000f55
 8000d40:	08000f55 	.word	0x08000f55
 8000d44:	08000f55 	.word	0x08000f55
 8000d48:	08000f55 	.word	0x08000f55
 8000d4c:	08000f55 	.word	0x08000f55
 8000d50:	08000f55 	.word	0x08000f55
 8000d54:	08000f55 	.word	0x08000f55
 8000d58:	08000f55 	.word	0x08000f55
 8000d5c:	08000f55 	.word	0x08000f55
 8000d60:	08000f55 	.word	0x08000f55
 8000d64:	08000f55 	.word	0x08000f55
 8000d68:	08000f55 	.word	0x08000f55
 8000d6c:	08000f55 	.word	0x08000f55
 8000d70:	08000f55 	.word	0x08000f55
 8000d74:	08000f55 	.word	0x08000f55
 8000d78:	08000f55 	.word	0x08000f55
 8000d7c:	08000f55 	.word	0x08000f55
 8000d80:	08000f55 	.word	0x08000f55
 8000d84:	08000f55 	.word	0x08000f55
 8000d88:	08000f55 	.word	0x08000f55
 8000d8c:	08000f55 	.word	0x08000f55
 8000d90:	08000f55 	.word	0x08000f55
 8000d94:	08000f55 	.word	0x08000f55
 8000d98:	08000f55 	.word	0x08000f55
 8000d9c:	08000f55 	.word	0x08000f55
 8000da0:	08000f55 	.word	0x08000f55
 8000da4:	08000f55 	.word	0x08000f55
 8000da8:	08000f55 	.word	0x08000f55
 8000dac:	08000f55 	.word	0x08000f55
 8000db0:	08000f55 	.word	0x08000f55
 8000db4:	08000f55 	.word	0x08000f55
 8000db8:	08000f55 	.word	0x08000f55
 8000dbc:	08000f55 	.word	0x08000f55
 8000dc0:	08000f55 	.word	0x08000f55
 8000dc4:	08000f55 	.word	0x08000f55
 8000dc8:	08000f55 	.word	0x08000f55
 8000dcc:	08000f55 	.word	0x08000f55
 8000dd0:	08000f55 	.word	0x08000f55
 8000dd4:	08000e1d 	.word	0x08000e1d
 8000dd8:	08000f55 	.word	0x08000f55
 8000ddc:	08000f55 	.word	0x08000f55
 8000de0:	08000f55 	.word	0x08000f55
 8000de4:	08000e27 	.word	0x08000e27
 8000de8:	08000f55 	.word	0x08000f55
 8000dec:	08000f55 	.word	0x08000f55
 8000df0:	08000f55 	.word	0x08000f55
 8000df4:	08000f55 	.word	0x08000f55
 8000df8:	08000f55 	.word	0x08000f55
 8000dfc:	08000f55 	.word	0x08000f55
 8000e00:	08000e5b 	.word	0x08000e5b
 8000e04:	08000f55 	.word	0x08000f55
 8000e08:	08000f55 	.word	0x08000f55
 8000e0c:	08000f55 	.word	0x08000f55
 8000e10:	08000f55 	.word	0x08000f55
 8000e14:	08000f55 	.word	0x08000f55
 8000e18:	08000e67 	.word	0x08000e67
		case 'c':
			calibrate();
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	469c      	mov	ip, r3
 8000e20:	f000 f948 	bl	80010b4 <calibrate.0>
			break;
 8000e24:	e096      	b.n	8000f54 <main+0x2ac>
		case 'g':
			for (int i=1; i<=4; i++) {
 8000e26:	2301      	movs	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	e00a      	b.n	8000e42 <main+0x19a>
				u.u8[i-1] = buffer[i];
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	496e      	ldr	r1, [pc, #440]	@ (8000fec <main+0x344>)
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	440a      	add	r2, r1
 8000e36:	7811      	ldrb	r1, [r2, #0]
 8000e38:	4a6d      	ldr	r2, [pc, #436]	@ (8000ff0 <main+0x348>)
 8000e3a:	54d1      	strb	r1, [r2, r3]
			for (int i=1; i<=4; i++) {
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	ddf1      	ble.n	8000e2c <main+0x184>
			}
			goToPos(u.u32);
 8000e48:	4b69      	ldr	r3, [pc, #420]	@ (8000ff0 <main+0x348>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	469c      	mov	ip, r3
 8000e52:	4610      	mov	r0, r2
 8000e54:	f000 faac 	bl	80013b0 <goToPos.1>
			break;
 8000e58:	e07c      	b.n	8000f54 <main+0x2ac>
		case 'n':
			goToPos(0);
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f000 faa6 	bl	80013b0 <goToPos.1>
			break;
 8000e64:	e076      	b.n	8000f54 <main+0x2ac>
		case 'p':
			break;
		case 't':
			u.u32 = 2054781047;
 8000e66:	4b62      	ldr	r3, [pc, #392]	@ (8000ff0 <main+0x348>)
 8000e68:	4a62      	ldr	r2, [pc, #392]	@ (8000ff4 <main+0x34c>)
 8000e6a:	601a      	str	r2, [r3, #0]
			for (int i = 0; i <= 3; i++) {message[i] = u.u8[i];}
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	e00b      	b.n	8000e8a <main+0x1e2>
 8000e72:	4a5f      	ldr	r2, [pc, #380]	@ (8000ff0 <main+0x348>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4413      	add	r3, r2
 8000e78:	7819      	ldrb	r1, [r3, #0]
 8000e7a:	4a5f      	ldr	r2, [pc, #380]	@ (8000ff8 <main+0x350>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4413      	add	r3, r2
 8000e80:	460a      	mov	r2, r1
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	3301      	adds	r3, #1
 8000e88:	60bb      	str	r3, [r7, #8]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	ddf0      	ble.n	8000e72 <main+0x1ca>
			sendData(message, 4);
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	469c      	mov	ip, r3
 8000e94:	2104      	movs	r1, #4
 8000e96:	4858      	ldr	r0, [pc, #352]	@ (8000ff8 <main+0x350>)
 8000e98:	f7ff fef4 	bl	8000c84 <sendData.2>
			break;
 8000e9c:	e05a      	b.n	8000f54 <main+0x2ac>
		case '0':
			goToPos(1);
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	469c      	mov	ip, r3
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f000 fa84 	bl	80013b0 <goToPos.1>
			break;
 8000ea8:	e054      	b.n	8000f54 <main+0x2ac>
		case '1':
			goToPos(TIM4->ARR/8*1);
 8000eaa:	4b54      	ldr	r3, [pc, #336]	@ (8000ffc <main+0x354>)
 8000eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	469c      	mov	ip, r3
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	f000 fa7a 	bl	80013b0 <goToPos.1>
			break;
 8000ebc:	e04a      	b.n	8000f54 <main+0x2ac>
		case '2':
			goToPos(TIM4->ARR/8*2);
 8000ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8000ffc <main+0x354>)
 8000ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec2:	08db      	lsrs	r3, r3, #3
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	469c      	mov	ip, r3
 8000ecc:	4610      	mov	r0, r2
 8000ece:	f000 fa6f 	bl	80013b0 <goToPos.1>
			break;
 8000ed2:	e03f      	b.n	8000f54 <main+0x2ac>
		case '3':
			goToPos(TIM4->ARR/8*3);
 8000ed4:	4b49      	ldr	r3, [pc, #292]	@ (8000ffc <main+0x354>)
 8000ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	f000 fa62 	bl	80013b0 <goToPos.1>
			break;
 8000eec:	e032      	b.n	8000f54 <main+0x2ac>
		case '4':
			goToPos(TIM4->ARR/8*4);
 8000eee:	4b43      	ldr	r3, [pc, #268]	@ (8000ffc <main+0x354>)
 8000ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	469c      	mov	ip, r3
 8000efc:	4610      	mov	r0, r2
 8000efe:	f000 fa57 	bl	80013b0 <goToPos.1>
			break;
 8000f02:	e027      	b.n	8000f54 <main+0x2ac>
		case '5':
			goToPos(TIM4->ARR/8*5);
 8000f04:	4b3d      	ldr	r3, [pc, #244]	@ (8000ffc <main+0x354>)
 8000f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	469c      	mov	ip, r3
 8000f16:	4610      	mov	r0, r2
 8000f18:	f000 fa4a 	bl	80013b0 <goToPos.1>
			break;
 8000f1c:	e01a      	b.n	8000f54 <main+0x2ac>
		case '6':
			goToPos(TIM4->ARR/8*6);
 8000f1e:	4b37      	ldr	r3, [pc, #220]	@ (8000ffc <main+0x354>)
 8000f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f22:	08da      	lsrs	r2, r3, #3
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	469c      	mov	ip, r3
 8000f32:	4610      	mov	r0, r2
 8000f34:	f000 fa3c 	bl	80013b0 <goToPos.1>
			break;
 8000f38:	e00c      	b.n	8000f54 <main+0x2ac>
		case '7':
			goToPos(TIM4->ARR/8*7);
 8000f3a:	4b30      	ldr	r3, [pc, #192]	@ (8000ffc <main+0x354>)
 8000f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	4613      	mov	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	1a9b      	subs	r3, r3, r2
 8000f46:	461a      	mov	r2, r3
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	469c      	mov	ip, r3
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	f000 fa2f 	bl	80013b0 <goToPos.1>
			break;
 8000f52:	bf00      	nop
	  }
	  memset(buffer, 0, sizeof(buffer));
 8000f54:	2240      	movs	r2, #64	@ 0x40
 8000f56:	2100      	movs	r1, #0
 8000f58:	4824      	ldr	r0, [pc, #144]	@ (8000fec <main+0x344>)
 8000f5a:	f008 fae5 	bl	8009528 <memset>

	  //Ожидание координаты остановки
	  if (move == 'f' && ((breakAt[0] < breakAt[1] && TIM4->CNT >= breakAt[0] && TIM4->CNT < breakAt[1]) || (breakAt[0] > breakAt[1] && (TIM4->CNT >= breakAt[0] || TIM4->CNT < breakAt[1])))) {
 8000f5e:	4b28      	ldr	r3, [pc, #160]	@ (8001000 <main+0x358>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b66      	cmp	r3, #102	@ 0x66
 8000f64:	d154      	bne.n	8001010 <main+0x368>
 8000f66:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <main+0x35c>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <main+0x35c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	da0b      	bge.n	8000f8a <main+0x2e2>
 8000f72:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <main+0x354>)
 8000f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f76:	4a23      	ldr	r2, [pc, #140]	@ (8001004 <main+0x35c>)
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d305      	bcc.n	8000f8a <main+0x2e2>
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <main+0x354>)
 8000f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f82:	4a20      	ldr	r2, [pc, #128]	@ (8001004 <main+0x35c>)
 8000f84:	6852      	ldr	r2, [r2, #4]
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d311      	bcc.n	8000fae <main+0x306>
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <main+0x35c>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <main+0x35c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	dd3c      	ble.n	8001010 <main+0x368>
 8000f96:	4b19      	ldr	r3, [pc, #100]	@ (8000ffc <main+0x354>)
 8000f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001004 <main+0x35c>)
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d205      	bcs.n	8000fae <main+0x306>
 8000fa2:	4b16      	ldr	r3, [pc, #88]	@ (8000ffc <main+0x354>)
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa6:	4a17      	ldr	r2, [pc, #92]	@ (8001004 <main+0x35c>)
 8000fa8:	6852      	ldr	r2, [r2, #4]
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d230      	bcs.n	8001010 <main+0x368>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <main+0x33c>)
 8000fb4:	f001 fb04 	bl	80025c0 <HAL_GPIO_WritePin>
		  lg = sprintf(message, "\nmove done");
 8000fb8:	4913      	ldr	r1, [pc, #76]	@ (8001008 <main+0x360>)
 8000fba:	480f      	ldr	r0, [pc, #60]	@ (8000ff8 <main+0x350>)
 8000fbc:	f008 fa94 	bl	80094e8 <siprintf>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a12      	ldr	r2, [pc, #72]	@ (800100c <main+0x364>)
 8000fc4:	6013      	str	r3, [r2, #0]
		  sendData(message, lg);
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <main+0x364>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	1d3a      	adds	r2, r7, #4
 8000fcc:	4694      	mov	ip, r2
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <main+0x350>)
 8000fd2:	f7ff fe57 	bl	8000c84 <sendData.2>
		  move = 'n';
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <main+0x358>)
 8000fd8:	226e      	movs	r2, #110	@ 0x6e
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	e05a      	b.n	8001094 <main+0x3ec>
 8000fde:	bf00      	nop
 8000fe0:	20000200 	.word	0x20000200
 8000fe4:	40020000 	.word	0x40020000
 8000fe8:	20000170 	.word	0x20000170
 8000fec:	20000290 	.word	0x20000290
 8000ff0:	2000034c 	.word	0x2000034c
 8000ff4:	7a797877 	.word	0x7a797877
 8000ff8:	200002dc 	.word	0x200002dc
 8000ffc:	40000800 	.word	0x40000800
 8001000:	20000004 	.word	0x20000004
 8001004:	20000344 	.word	0x20000344
 8001008:	08009e40 	.word	0x08009e40
 800100c:	200002d0 	.word	0x200002d0
	  } else if (move == 'b' && ((breakAt[0] > breakAt[1] && TIM4->CNT <= breakAt[0] && TIM4->CNT > breakAt[1]) || (breakAt[0] < breakAt[1] && (TIM4->CNT <= breakAt[0] || TIM4->CNT > breakAt[1])))) {
 8001010:	4b21      	ldr	r3, [pc, #132]	@ (8001098 <main+0x3f0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b62      	cmp	r3, #98	@ 0x62
 8001016:	f47f ae6e 	bne.w	8000cf6 <main+0x4e>
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <main+0x3f4>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <main+0x3f4>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	429a      	cmp	r2, r3
 8001024:	dd0b      	ble.n	800103e <main+0x396>
 8001026:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <main+0x3f8>)
 8001028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102a:	4a1c      	ldr	r2, [pc, #112]	@ (800109c <main+0x3f4>)
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	4293      	cmp	r3, r2
 8001030:	d805      	bhi.n	800103e <main+0x396>
 8001032:	4b1b      	ldr	r3, [pc, #108]	@ (80010a0 <main+0x3f8>)
 8001034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001036:	4a19      	ldr	r2, [pc, #100]	@ (800109c <main+0x3f4>)
 8001038:	6852      	ldr	r2, [r2, #4]
 800103a:	4293      	cmp	r3, r2
 800103c:	d813      	bhi.n	8001066 <main+0x3be>
 800103e:	4b17      	ldr	r3, [pc, #92]	@ (800109c <main+0x3f4>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	4b16      	ldr	r3, [pc, #88]	@ (800109c <main+0x3f4>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	f6bf ae55 	bge.w	8000cf6 <main+0x4e>
 800104c:	4b14      	ldr	r3, [pc, #80]	@ (80010a0 <main+0x3f8>)
 800104e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001050:	4a12      	ldr	r2, [pc, #72]	@ (800109c <main+0x3f4>)
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	4293      	cmp	r3, r2
 8001056:	d906      	bls.n	8001066 <main+0x3be>
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <main+0x3f8>)
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	4a0f      	ldr	r2, [pc, #60]	@ (800109c <main+0x3f4>)
 800105e:	6852      	ldr	r2, [r2, #4]
 8001060:	4293      	cmp	r3, r2
 8001062:	f67f ae48 	bls.w	8000cf6 <main+0x4e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2102      	movs	r1, #2
 800106a:	480e      	ldr	r0, [pc, #56]	@ (80010a4 <main+0x3fc>)
 800106c:	f001 faa8 	bl	80025c0 <HAL_GPIO_WritePin>
		  lg = sprintf(message, "\nmove done");
 8001070:	490d      	ldr	r1, [pc, #52]	@ (80010a8 <main+0x400>)
 8001072:	480e      	ldr	r0, [pc, #56]	@ (80010ac <main+0x404>)
 8001074:	f008 fa38 	bl	80094e8 <siprintf>
 8001078:	4603      	mov	r3, r0
 800107a:	4a0d      	ldr	r2, [pc, #52]	@ (80010b0 <main+0x408>)
 800107c:	6013      	str	r3, [r2, #0]
		  sendData(message, lg);
 800107e:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <main+0x408>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	1d3a      	adds	r2, r7, #4
 8001084:	4694      	mov	ip, r2
 8001086:	4619      	mov	r1, r3
 8001088:	4808      	ldr	r0, [pc, #32]	@ (80010ac <main+0x404>)
 800108a:	f7ff fdfb 	bl	8000c84 <sendData.2>
		  move = 'n';
 800108e:	4b02      	ldr	r3, [pc, #8]	@ (8001098 <main+0x3f0>)
 8001090:	226e      	movs	r2, #110	@ 0x6e
 8001092:	701a      	strb	r2, [r3, #0]
	switch (buffer[0]) {
 8001094:	e62f      	b.n	8000cf6 <main+0x4e>
 8001096:	bf00      	nop
 8001098:	20000004 	.word	0x20000004
 800109c:	20000344 	.word	0x20000344
 80010a0:	40000800 	.word	0x40000800
 80010a4:	40020000 	.word	0x40020000
 80010a8:	08009e40 	.word	0x08009e40
 80010ac:	200002dc 	.word	0x200002dc
 80010b0:	200002d0 	.word	0x200002d0

080010b4 <calibrate.0>:
	void calibrate () {	  
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	4664      	mov	r4, ip
 80010bc:	f8c7 c004 	str.w	ip, [r7, #4]
	  sendData("\nCalibration start", 18);
 80010c0:	46a4      	mov	ip, r4
 80010c2:	2112      	movs	r1, #18
 80010c4:	485a      	ldr	r0, [pc, #360]	@ (8001230 <calibrate.0+0x17c>)
 80010c6:	f7ff fddd 	bl	8000c84 <sendData.2>
	  HAL_TIM_Base_Stop_IT(&htim1);
 80010ca:	485a      	ldr	r0, [pc, #360]	@ (8001234 <calibrate.0+0x180>)
 80010cc:	f003 f9ee 	bl	80044ac <HAL_TIM_Base_Stop_IT>
	  TIM4->ARR = 65535;
 80010d0:	4b59      	ldr	r3, [pc, #356]	@ (8001238 <calibrate.0+0x184>)
 80010d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	  memset(calBuffer, 0, sizeof(calBuffer));
 80010d8:	2224      	movs	r2, #36	@ 0x24
 80010da:	2100      	movs	r1, #0
 80010dc:	4857      	ldr	r0, [pc, #348]	@ (800123c <calibrate.0+0x188>)
 80010de:	f008 fa23 	bl	8009528 <memset>
	  calBuffer[0] = TIM4->CNT;
 80010e2:	4b55      	ldr	r3, [pc, #340]	@ (8001238 <calibrate.0+0x184>)
 80010e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e6:	4a55      	ldr	r2, [pc, #340]	@ (800123c <calibrate.0+0x188>)
 80010e8:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 80010ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ee:	f000 ff95 	bl	800201c <HAL_Delay>
	  if (TIM4->CNT != calBuffer[0]) {
 80010f2:	4b51      	ldr	r3, [pc, #324]	@ (8001238 <calibrate.0+0x184>)
 80010f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010f6:	4b51      	ldr	r3, [pc, #324]	@ (800123c <calibrate.0+0x188>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d005      	beq.n	800110a <calibrate.0+0x56>
		  sendData("\nSistem static test faild", 25);
 80010fe:	46a4      	mov	ip, r4
 8001100:	2119      	movs	r1, #25
 8001102:	484f      	ldr	r0, [pc, #316]	@ (8001240 <calibrate.0+0x18c>)
 8001104:	f7ff fdbe 	bl	8000c84 <sendData.2>
 8001108:	e004      	b.n	8001114 <calibrate.0+0x60>
	  } else {sendData("\nSistem static test complite", 28);}
 800110a:	46a4      	mov	ip, r4
 800110c:	211c      	movs	r1, #28
 800110e:	484d      	ldr	r0, [pc, #308]	@ (8001244 <calibrate.0+0x190>)
 8001110:	f7ff fdb8 	bl	8000c84 <sendData.2>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2101      	movs	r1, #1
 8001118:	484b      	ldr	r0, [pc, #300]	@ (8001248 <calibrate.0+0x194>)
 800111a:	f001 fa51 	bl	80025c0 <HAL_GPIO_WritePin>
	  int i = 0; //Счётчик калибровки
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
	  while (i < 4) { //Запись срабатываней концевика
 8001122:	e056      	b.n	80011d2 <calibrate.0+0x11e>
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET && i==0) {calBuffer[1] = TIM4->CNT; i = 1; sendData("\nES_1_B", 7);} //ES_1_B
 8001124:	2101      	movs	r1, #1
 8001126:	4849      	ldr	r0, [pc, #292]	@ (800124c <calibrate.0+0x198>)
 8001128:	f001 fa32 	bl	8002590 <HAL_GPIO_ReadPin>
 800112c:	4603      	mov	r3, r0
 800112e:	2b01      	cmp	r3, #1
 8001130:	d10e      	bne.n	8001150 <calibrate.0+0x9c>
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10b      	bne.n	8001150 <calibrate.0+0x9c>
 8001138:	4b3f      	ldr	r3, [pc, #252]	@ (8001238 <calibrate.0+0x184>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800113c:	4a3f      	ldr	r2, [pc, #252]	@ (800123c <calibrate.0+0x188>)
 800113e:	6053      	str	r3, [r2, #4]
 8001140:	2301      	movs	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	46a4      	mov	ip, r4
 8001146:	2107      	movs	r1, #7
 8001148:	4841      	ldr	r0, [pc, #260]	@ (8001250 <calibrate.0+0x19c>)
 800114a:	f7ff fd9b 	bl	8000c84 <sendData.2>
 800114e:	e040      	b.n	80011d2 <calibrate.0+0x11e>
		  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET && i==1) {calBuffer[2] = TIM4->CNT; i = 2; sendData("\nES_1_E", 7);} //ES_1_E
 8001150:	2101      	movs	r1, #1
 8001152:	483e      	ldr	r0, [pc, #248]	@ (800124c <calibrate.0+0x198>)
 8001154:	f001 fa1c 	bl	8002590 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10e      	bne.n	800117c <calibrate.0+0xc8>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d10b      	bne.n	800117c <calibrate.0+0xc8>
 8001164:	4b34      	ldr	r3, [pc, #208]	@ (8001238 <calibrate.0+0x184>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001168:	4a34      	ldr	r2, [pc, #208]	@ (800123c <calibrate.0+0x188>)
 800116a:	6093      	str	r3, [r2, #8]
 800116c:	2302      	movs	r3, #2
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	46a4      	mov	ip, r4
 8001172:	2107      	movs	r1, #7
 8001174:	4837      	ldr	r0, [pc, #220]	@ (8001254 <calibrate.0+0x1a0>)
 8001176:	f7ff fd85 	bl	8000c84 <sendData.2>
 800117a:	e02a      	b.n	80011d2 <calibrate.0+0x11e>
		  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET && i==2) {calBuffer[3] = TIM4->CNT; i = 3; sendData("\nES_2_B", 7);} //ES_2_B
 800117c:	2101      	movs	r1, #1
 800117e:	4833      	ldr	r0, [pc, #204]	@ (800124c <calibrate.0+0x198>)
 8001180:	f001 fa06 	bl	8002590 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10e      	bne.n	80011a8 <calibrate.0+0xf4>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d10b      	bne.n	80011a8 <calibrate.0+0xf4>
 8001190:	4b29      	ldr	r3, [pc, #164]	@ (8001238 <calibrate.0+0x184>)
 8001192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001194:	4a29      	ldr	r2, [pc, #164]	@ (800123c <calibrate.0+0x188>)
 8001196:	60d3      	str	r3, [r2, #12]
 8001198:	2303      	movs	r3, #3
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	46a4      	mov	ip, r4
 800119e:	2107      	movs	r1, #7
 80011a0:	482d      	ldr	r0, [pc, #180]	@ (8001258 <calibrate.0+0x1a4>)
 80011a2:	f7ff fd6f 	bl	8000c84 <sendData.2>
 80011a6:	e014      	b.n	80011d2 <calibrate.0+0x11e>
		  else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET && i==3) {calBuffer[4] = TIM4->CNT; i = 4; sendData("\nES_2_E", 7);} //ES_2_E
 80011a8:	2101      	movs	r1, #1
 80011aa:	4828      	ldr	r0, [pc, #160]	@ (800124c <calibrate.0+0x198>)
 80011ac:	f001 f9f0 	bl	8002590 <HAL_GPIO_ReadPin>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10d      	bne.n	80011d2 <calibrate.0+0x11e>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	d10a      	bne.n	80011d2 <calibrate.0+0x11e>
 80011bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <calibrate.0+0x184>)
 80011be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c0:	4a1e      	ldr	r2, [pc, #120]	@ (800123c <calibrate.0+0x188>)
 80011c2:	6113      	str	r3, [r2, #16]
 80011c4:	2304      	movs	r3, #4
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	46a4      	mov	ip, r4
 80011ca:	2107      	movs	r1, #7
 80011cc:	4823      	ldr	r0, [pc, #140]	@ (800125c <calibrate.0+0x1a8>)
 80011ce:	f7ff fd59 	bl	8000c84 <sendData.2>
	  while (i < 4) { //Запись срабатываней концевика
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	dda5      	ble.n	8001124 <calibrate.0+0x70>
	  calBuffer[5] = TIM4->CNT; //Значение перед остановкой
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <calibrate.0+0x184>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011dc:	4a17      	ldr	r2, [pc, #92]	@ (800123c <calibrate.0+0x188>)
 80011de:	6153      	str	r3, [r2, #20]
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); //остановка двигателя
 80011e0:	2200      	movs	r2, #0
 80011e2:	2101      	movs	r1, #1
 80011e4:	4818      	ldr	r0, [pc, #96]	@ (8001248 <calibrate.0+0x194>)
 80011e6:	f001 f9eb 	bl	80025c0 <HAL_GPIO_WritePin>
	  int d[3] = {0, 0, 0}; //Буфер дельт
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
	  int e = calBuffer[5]; //Бувер значения энкодера
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <calibrate.0+0x188>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	61bb      	str	r3, [r7, #24]
	  HAL_TIM_Base_Start_IT(&htim3); //Запуск таймера времени
 80011fc:	4818      	ldr	r0, [pc, #96]	@ (8001260 <calibrate.0+0x1ac>)
 80011fe:	f003 f8f3 	bl	80043e8 <HAL_TIM_Base_Start_IT>
	  while (d[2] < 1000) {
 8001202:	e046      	b.n	8001292 <calibrate.0+0x1de>
		  if (e != TIM4->CNT) {
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <calibrate.0+0x184>)
 8001206:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	429a      	cmp	r2, r3
 800120c:	d037      	beq.n	800127e <calibrate.0+0x1ca>
			  e = TIM4->CNT; 
 800120e:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <calibrate.0+0x184>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001212:	61bb      	str	r3, [r7, #24]
			  d[1] = d[0]; 
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	613b      	str	r3, [r7, #16]
			  d[0] = TIM3->CNT;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <calibrate.0+0x1b0>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121c:	60fb      	str	r3, [r7, #12]
			  if (d[1] <= d[0]) {d[2] = d[0] - d[1];}
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	429a      	cmp	r2, r3
 8001224:	dc20      	bgt.n	8001268 <calibrate.0+0x1b4>
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e026      	b.n	800127e <calibrate.0+0x1ca>
 8001230:	08009e4c 	.word	0x08009e4c
 8001234:	20000170 	.word	0x20000170
 8001238:	40000800 	.word	0x40000800
 800123c:	2000031c 	.word	0x2000031c
 8001240:	08009e60 	.word	0x08009e60
 8001244:	08009e7c 	.word	0x08009e7c
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	08009e9c 	.word	0x08009e9c
 8001254:	08009ea4 	.word	0x08009ea4
 8001258:	08009eac 	.word	0x08009eac
 800125c:	08009eb4 	.word	0x08009eb4
 8001260:	200001b8 	.word	0x200001b8
 8001264:	40000400 	.word	0x40000400
			  else if (d[1] > d[0]) {d[2] = (65535 + d[0]) - d[1];}  		  
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	dd06      	ble.n	800127e <calibrate.0+0x1ca>
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001276:	33ff      	adds	r3, #255	@ 0xff
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	1a9b      	subs	r3, r3, r2
 800127c:	617b      	str	r3, [r7, #20]
		  if (TIM3->CNT > 2000 + d[0]) {d[2] = 2000;}
 800127e:	4b42      	ldr	r3, [pc, #264]	@ (8001388 <calibrate.0+0x2d4>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	f502 62fa 	add.w	r2, r2, #2000	@ 0x7d0
 8001288:	4293      	cmp	r3, r2
 800128a:	d902      	bls.n	8001292 <calibrate.0+0x1de>
 800128c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001290:	617b      	str	r3, [r7, #20]
	  while (d[2] < 1000) {
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001298:	dbb4      	blt.n	8001204 <calibrate.0+0x150>
	  HAL_TIM_Base_Stop_IT(&htim3); //Остановка таймера времени
 800129a:	483c      	ldr	r0, [pc, #240]	@ (800138c <calibrate.0+0x2d8>)
 800129c:	f003 f906 	bl	80044ac <HAL_TIM_Base_Stop_IT>
	  TIM3->CNT = 0; //сброс таймера времени
 80012a0:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <calibrate.0+0x2d4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	@ 0x24
	  calBuffer[6] = e;
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4a39      	ldr	r2, [pc, #228]	@ (8001390 <calibrate.0+0x2dc>)
 80012aa:	6193      	str	r3, [r2, #24]
	  deselerationDist = delta(calBuffer[6], calBuffer[5]);
 80012ac:	4b38      	ldr	r3, [pc, #224]	@ (8001390 <calibrate.0+0x2dc>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a37      	ldr	r2, [pc, #220]	@ (8001390 <calibrate.0+0x2dc>)
 80012b2:	6952      	ldr	r2, [r2, #20]
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fcc8 	bl	8000c4c <delta>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <calibrate.0+0x2e0>)
 80012c2:	601a      	str	r2, [r3, #0]
	  calBuffer[7] = calBuffer[1] + delta(calBuffer[2], calBuffer[1]) / 2;
 80012c4:	4b32      	ldr	r3, [pc, #200]	@ (8001390 <calibrate.0+0x2dc>)
 80012c6:	685d      	ldr	r5, [r3, #4]
 80012c8:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <calibrate.0+0x2dc>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4a30      	ldr	r2, [pc, #192]	@ (8001390 <calibrate.0+0x2dc>)
 80012ce:	6852      	ldr	r2, [r2, #4]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fcba 	bl	8000c4c <delta>
 80012d8:	4603      	mov	r3, r0
 80012da:	085b      	lsrs	r3, r3, #1
 80012dc:	442b      	add	r3, r5
 80012de:	4a2c      	ldr	r2, [pc, #176]	@ (8001390 <calibrate.0+0x2dc>)
 80012e0:	61d3      	str	r3, [r2, #28]
	  calBuffer[8] = calBuffer[3] + delta(calBuffer[4], calBuffer[3]) / 2;
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <calibrate.0+0x2dc>)
 80012e4:	68dd      	ldr	r5, [r3, #12]
 80012e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <calibrate.0+0x2dc>)
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	4a29      	ldr	r2, [pc, #164]	@ (8001390 <calibrate.0+0x2dc>)
 80012ec:	68d2      	ldr	r2, [r2, #12]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fcab 	bl	8000c4c <delta>
 80012f6:	4603      	mov	r3, r0
 80012f8:	085b      	lsrs	r3, r3, #1
 80012fa:	442b      	add	r3, r5
 80012fc:	4a24      	ldr	r2, [pc, #144]	@ (8001390 <calibrate.0+0x2dc>)
 80012fe:	6213      	str	r3, [r2, #32]
	  endStopSize = (delta(calBuffer[2], calBuffer[1]) + delta(calBuffer[4], calBuffer[3])) /4;
 8001300:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <calibrate.0+0x2dc>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <calibrate.0+0x2dc>)
 8001306:	6852      	ldr	r2, [r2, #4]
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fc9e 	bl	8000c4c <delta>
 8001310:	4605      	mov	r5, r0
 8001312:	4b1f      	ldr	r3, [pc, #124]	@ (8001390 <calibrate.0+0x2dc>)
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	4a1e      	ldr	r2, [pc, #120]	@ (8001390 <calibrate.0+0x2dc>)
 8001318:	68d2      	ldr	r2, [r2, #12]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fc95 	bl	8000c4c <delta>
 8001322:	4603      	mov	r3, r0
 8001324:	442b      	add	r3, r5
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	461a      	mov	r2, r3
 800132a:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <calibrate.0+0x2e4>)
 800132c:	601a      	str	r2, [r3, #0]
	  TIM4->CNT = deselerationDist;
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <calibrate.0+0x2e0>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <calibrate.0+0x2e8>)
 8001334:	625a      	str	r2, [r3, #36]	@ 0x24
	  TIM4->ARR = delta(calBuffer[8], calBuffer[7]);
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <calibrate.0+0x2dc>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a15      	ldr	r2, [pc, #84]	@ (8001390 <calibrate.0+0x2dc>)
 800133c:	69d2      	ldr	r2, [r2, #28]
 800133e:	4d17      	ldr	r5, [pc, #92]	@ (800139c <calibrate.0+0x2e8>)
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fc82 	bl	8000c4c <delta>
 8001348:	4603      	mov	r3, r0
 800134a:	62eb      	str	r3, [r5, #44]	@ 0x2c
	  lg = sprintf(message, "\nCalibration end, ARR=%d, CNT=%d, EndStopSize=%d", TIM4->ARR, TIM4->CNT, endStopSize);
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <calibrate.0+0x2e8>)
 800134e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <calibrate.0+0x2e8>)
 8001352:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001354:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <calibrate.0+0x2e4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	460b      	mov	r3, r1
 800135c:	4910      	ldr	r1, [pc, #64]	@ (80013a0 <calibrate.0+0x2ec>)
 800135e:	4811      	ldr	r0, [pc, #68]	@ (80013a4 <calibrate.0+0x2f0>)
 8001360:	f008 f8c2 	bl	80094e8 <siprintf>
 8001364:	4603      	mov	r3, r0
 8001366:	4a10      	ldr	r2, [pc, #64]	@ (80013a8 <calibrate.0+0x2f4>)
 8001368:	6013      	str	r3, [r2, #0]
	  sendData(message, lg);
 800136a:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <calibrate.0+0x2f4>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	46a4      	mov	ip, r4
 8001370:	4619      	mov	r1, r3
 8001372:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <calibrate.0+0x2f0>)
 8001374:	f7ff fc86 	bl	8000c84 <sendData.2>
	  HAL_TIM_Base_Start_IT(&htim1);
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <calibrate.0+0x2f8>)
 800137a:	f003 f835 	bl	80043e8 <HAL_TIM_Base_Start_IT>
	}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bdb0      	pop	{r4, r5, r7, pc}
 8001386:	bf00      	nop
 8001388:	40000400 	.word	0x40000400
 800138c:	200001b8 	.word	0x200001b8
 8001390:	2000031c 	.word	0x2000031c
 8001394:	20000340 	.word	0x20000340
 8001398:	200002d8 	.word	0x200002d8
 800139c:	40000800 	.word	0x40000800
 80013a0:	08009ebc 	.word	0x08009ebc
 80013a4:	200002dc 	.word	0x200002dc
 80013a8:	200002d0 	.word	0x200002d0
 80013ac:	20000170 	.word	0x20000170

080013b0 <goToPos.1>:
	void goToPos (int targetPos) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b087      	sub	sp, #28
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	4664      	mov	r4, ip
 80013ba:	f8c7 c000 	str.w	ip, [r7]
		uint32_t disToMove[3] = {0, 0, deselerationDist}; //{по часовой, против часовой}	
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b73      	ldr	r3, [pc, #460]	@ (8001594 <goToPos.1+0x1e4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	617b      	str	r3, [r7, #20]
		if (targetPos > TIM4->ARR || targetPos < 0) {
 80013cc:	4b72      	ldr	r3, [pc, #456]	@ (8001598 <goToPos.1+0x1e8>)
 80013ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d302      	bcc.n	80013dc <goToPos.1+0x2c>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da0f      	bge.n	80013fc <goToPos.1+0x4c>
			lg = sprintf(message, "\nErr, pos %d out of range", targetPos);
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	496f      	ldr	r1, [pc, #444]	@ (800159c <goToPos.1+0x1ec>)
 80013e0:	486f      	ldr	r0, [pc, #444]	@ (80015a0 <goToPos.1+0x1f0>)
 80013e2:	f008 f881 	bl	80094e8 <siprintf>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4a6e      	ldr	r2, [pc, #440]	@ (80015a4 <goToPos.1+0x1f4>)
 80013ea:	6013      	str	r3, [r2, #0]
			sendData(message, lg);
 80013ec:	4b6d      	ldr	r3, [pc, #436]	@ (80015a4 <goToPos.1+0x1f4>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	46a4      	mov	ip, r4
 80013f2:	4619      	mov	r1, r3
 80013f4:	486a      	ldr	r0, [pc, #424]	@ (80015a0 <goToPos.1+0x1f0>)
 80013f6:	f7ff fc45 	bl	8000c84 <sendData.2>
			return;
 80013fa:	e0c7      	b.n	800158c <goToPos.1+0x1dc>
		if (move != 'n') {
 80013fc:	4b6a      	ldr	r3, [pc, #424]	@ (80015a8 <goToPos.1+0x1f8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b6e      	cmp	r3, #110	@ 0x6e
 8001402:	d00e      	beq.n	8001422 <goToPos.1+0x72>
			lg = sprintf(message, "\nErr, moving");
 8001404:	4969      	ldr	r1, [pc, #420]	@ (80015ac <goToPos.1+0x1fc>)
 8001406:	4866      	ldr	r0, [pc, #408]	@ (80015a0 <goToPos.1+0x1f0>)
 8001408:	f008 f86e 	bl	80094e8 <siprintf>
 800140c:	4603      	mov	r3, r0
 800140e:	4a65      	ldr	r2, [pc, #404]	@ (80015a4 <goToPos.1+0x1f4>)
 8001410:	6013      	str	r3, [r2, #0]
			sendData(message, lg);
 8001412:	4b64      	ldr	r3, [pc, #400]	@ (80015a4 <goToPos.1+0x1f4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	46a4      	mov	ip, r4
 8001418:	4619      	mov	r1, r3
 800141a:	4861      	ldr	r0, [pc, #388]	@ (80015a0 <goToPos.1+0x1f0>)
 800141c:	f7ff fc32 	bl	8000c84 <sendData.2>
			return;
 8001420:	e0b4      	b.n	800158c <goToPos.1+0x1dc>
		if (TIM4->CNT < targetPos - deadZone) {disToMove[0] = targetPos - TIM4->CNT; disToMove[1] = (TIM4->ARR - targetPos) + TIM4->CNT;}
 8001422:	4b5d      	ldr	r3, [pc, #372]	@ (8001598 <goToPos.1+0x1e8>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001426:	4a62      	ldr	r2, [pc, #392]	@ (80015b0 <goToPos.1+0x200>)
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	1a8a      	subs	r2, r1, r2
 800142e:	4293      	cmp	r3, r2
 8001430:	d20d      	bcs.n	800144e <goToPos.1+0x9e>
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4b58      	ldr	r3, [pc, #352]	@ (8001598 <goToPos.1+0x1e8>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	4b56      	ldr	r3, [pc, #344]	@ (8001598 <goToPos.1+0x1e8>)
 800143e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	1ad2      	subs	r2, r2, r3
 8001444:	4b54      	ldr	r3, [pc, #336]	@ (8001598 <goToPos.1+0x1e8>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001448:	4413      	add	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	e015      	b.n	800147a <goToPos.1+0xca>
		else if (TIM4->CNT > targetPos + deadZone) {disToMove[0] = TIM4->ARR - TIM4->CNT + targetPos; disToMove[1] = TIM4->CNT - targetPos;}
 800144e:	4b52      	ldr	r3, [pc, #328]	@ (8001598 <goToPos.1+0x1e8>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	4a57      	ldr	r2, [pc, #348]	@ (80015b0 <goToPos.1+0x200>)
 8001454:	6811      	ldr	r1, [r2, #0]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	440a      	add	r2, r1
 800145a:	4293      	cmp	r3, r2
 800145c:	f240 8095 	bls.w	800158a <goToPos.1+0x1da>
 8001460:	4b4d      	ldr	r3, [pc, #308]	@ (8001598 <goToPos.1+0x1e8>)
 8001462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001464:	4b4c      	ldr	r3, [pc, #304]	@ (8001598 <goToPos.1+0x1e8>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001468:	1ad2      	subs	r2, r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	4b49      	ldr	r3, [pc, #292]	@ (8001598 <goToPos.1+0x1e8>)
 8001472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	613b      	str	r3, [r7, #16]
		if (disToMove[0] > disToMove[1]) {move = 'b';} 
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	429a      	cmp	r2, r3
 8001480:	d903      	bls.n	800148a <goToPos.1+0xda>
 8001482:	4b49      	ldr	r3, [pc, #292]	@ (80015a8 <goToPos.1+0x1f8>)
 8001484:	2262      	movs	r2, #98	@ 0x62
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e00a      	b.n	80014a0 <goToPos.1+0xf0>
		else if (disToMove[0] == disToMove[1]) {move = 'n';} 
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	429a      	cmp	r2, r3
 8001490:	d103      	bne.n	800149a <goToPos.1+0xea>
 8001492:	4b45      	ldr	r3, [pc, #276]	@ (80015a8 <goToPos.1+0x1f8>)
 8001494:	226e      	movs	r2, #110	@ 0x6e
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e002      	b.n	80014a0 <goToPos.1+0xf0>
		else {move = 'f';}
 800149a:	4b43      	ldr	r3, [pc, #268]	@ (80015a8 <goToPos.1+0x1f8>)
 800149c:	2266      	movs	r2, #102	@ 0x66
 800149e:	701a      	strb	r2, [r3, #0]
		if (disToMove[0] < disToMove[2]*2 && move == 'f') {
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d207      	bcs.n	80014ba <goToPos.1+0x10a>
 80014aa:	4b3f      	ldr	r3, [pc, #252]	@ (80015a8 <goToPos.1+0x1f8>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b66      	cmp	r3, #102	@ 0x66
 80014b0:	d103      	bne.n	80014ba <goToPos.1+0x10a>
			disToMove[2] = disToMove[0]/2;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	085b      	lsrs	r3, r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	e00b      	b.n	80014d2 <goToPos.1+0x122>
		else if (disToMove[1] < disToMove[2] * 2 && move == 'b') {
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d206      	bcs.n	80014d2 <goToPos.1+0x122>
 80014c4:	4b38      	ldr	r3, [pc, #224]	@ (80015a8 <goToPos.1+0x1f8>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b62      	cmp	r3, #98	@ 0x62
 80014ca:	d102      	bne.n	80014d2 <goToPos.1+0x122>
			disToMove[2] = disToMove[1]/2;
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	085b      	lsrs	r3, r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
		if (move == 'f') {
 80014d2:	4b35      	ldr	r3, [pc, #212]	@ (80015a8 <goToPos.1+0x1f8>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b66      	cmp	r3, #102	@ 0x66
 80014d8:	d114      	bne.n	8001504 <goToPos.1+0x154>
			if (disToMove[2] > targetPos) {
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d909      	bls.n	80014f6 <goToPos.1+0x146>
				breakAt[0] = TIM4->ARR - (disToMove[2] - targetPos);
 80014e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001598 <goToPos.1+0x1e8>)
 80014e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	1acb      	subs	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b30      	ldr	r3, [pc, #192]	@ (80015b4 <goToPos.1+0x204>)
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	e021      	b.n	800153a <goToPos.1+0x18a>
				breakAt[0] = targetPos - disToMove[2];
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b2d      	ldr	r3, [pc, #180]	@ (80015b4 <goToPos.1+0x204>)
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	e01a      	b.n	800153a <goToPos.1+0x18a>
		} else if (move == 'b'){
 8001504:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <goToPos.1+0x1f8>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b62      	cmp	r3, #98	@ 0x62
 800150a:	d116      	bne.n	800153a <goToPos.1+0x18a>
			if (disToMove[2] > TIM4->ARR - targetPos) {
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <goToPos.1+0x1e8>)
 8001510:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1acb      	subs	r3, r1, r3
 8001516:	429a      	cmp	r2, r3
 8001518:	d909      	bls.n	800152e <goToPos.1+0x17e>
				breakAt[0] = disToMove[2] - (TIM4->ARR - targetPos);
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	4b1e      	ldr	r3, [pc, #120]	@ (8001598 <goToPos.1+0x1e8>)
 8001520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001522:	1acb      	subs	r3, r1, r3
 8001524:	4413      	add	r3, r2
 8001526:	461a      	mov	r2, r3
 8001528:	4b22      	ldr	r3, [pc, #136]	@ (80015b4 <goToPos.1+0x204>)
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e005      	b.n	800153a <goToPos.1+0x18a>
				breakAt[0] = targetPos + disToMove[2];
 800152e:	697a      	ldr	r2, [r7, #20]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	461a      	mov	r2, r3
 8001536:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <goToPos.1+0x204>)
 8001538:	601a      	str	r2, [r3, #0]
		breakAt[1] = targetPos;
 800153a:	4a1e      	ldr	r2, [pc, #120]	@ (80015b4 <goToPos.1+0x204>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6053      	str	r3, [r2, #4]
		if (move == 'f') {HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);}
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <goToPos.1+0x1f8>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b66      	cmp	r3, #102	@ 0x66
 8001546:	d105      	bne.n	8001554 <goToPos.1+0x1a4>
 8001548:	2201      	movs	r2, #1
 800154a:	2101      	movs	r1, #1
 800154c:	481a      	ldr	r0, [pc, #104]	@ (80015b8 <goToPos.1+0x208>)
 800154e:	f001 f837 	bl	80025c0 <HAL_GPIO_WritePin>
 8001552:	e008      	b.n	8001566 <goToPos.1+0x1b6>
		else if (move == 'b') {HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);}
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <goToPos.1+0x1f8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b62      	cmp	r3, #98	@ 0x62
 800155a:	d104      	bne.n	8001566 <goToPos.1+0x1b6>
 800155c:	2201      	movs	r2, #1
 800155e:	2102      	movs	r1, #2
 8001560:	4815      	ldr	r0, [pc, #84]	@ (80015b8 <goToPos.1+0x208>)
 8001562:	f001 f82d 	bl	80025c0 <HAL_GPIO_WritePin>
		lg = sprintf(message, "\nMove to %d, dir %c", targetPos, move);
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <goToPos.1+0x1f8>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4913      	ldr	r1, [pc, #76]	@ (80015bc <goToPos.1+0x20c>)
 800156e:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <goToPos.1+0x1f0>)
 8001570:	f007 ffba 	bl	80094e8 <siprintf>
 8001574:	4603      	mov	r3, r0
 8001576:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <goToPos.1+0x1f4>)
 8001578:	6013      	str	r3, [r2, #0]
		sendData(message, lg);
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <goToPos.1+0x1f4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	46a4      	mov	ip, r4
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	@ (80015a0 <goToPos.1+0x1f0>)
 8001584:	f7ff fb7e 	bl	8000c84 <sendData.2>
 8001588:	e000      	b.n	800158c <goToPos.1+0x1dc>
		else {return;}
 800158a:	bf00      	nop
	}
 800158c:	371c      	adds	r7, #28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}
 8001592:	bf00      	nop
 8001594:	20000340 	.word	0x20000340
 8001598:	40000800 	.word	0x40000800
 800159c:	08009ef0 	.word	0x08009ef0
 80015a0:	200002dc 	.word	0x200002dc
 80015a4:	200002d0 	.word	0x200002d0
 80015a8:	20000004 	.word	0x20000004
 80015ac:	08009f0c 	.word	0x08009f0c
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000344 	.word	0x20000344
 80015b8:	40020000 	.word	0x40020000
 80015bc:	08009f1c 	.word	0x08009f1c

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b094      	sub	sp, #80	@ 0x50
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2230      	movs	r2, #48	@ 0x30
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f007 ffaa 	bl	8009528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001694 <SystemClock_Config+0xd4>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	4a29      	ldr	r2, [pc, #164]	@ (8001694 <SystemClock_Config+0xd4>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f4:	4b27      	ldr	r3, [pc, #156]	@ (8001694 <SystemClock_Config+0xd4>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	4b24      	ldr	r3, [pc, #144]	@ (8001698 <SystemClock_Config+0xd8>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800160c:	4a22      	ldr	r2, [pc, #136]	@ (8001698 <SystemClock_Config+0xd8>)
 800160e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b20      	ldr	r3, [pc, #128]	@ (8001698 <SystemClock_Config+0xd8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001620:	2303      	movs	r3, #3
 8001622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001624:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162a:	2301      	movs	r3, #1
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800162e:	2310      	movs	r3, #16
 8001630:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001632:	2302      	movs	r3, #2
 8001634:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001636:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800163a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800163c:	230f      	movs	r3, #15
 800163e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001640:	2390      	movs	r3, #144	@ 0x90
 8001642:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001644:	2302      	movs	r3, #2
 8001646:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001648:	2305      	movs	r3, #5
 800164a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800164c:	f107 0320 	add.w	r3, r7, #32
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fa21 	bl	8003a98 <HAL_RCC_OscConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800165c:	f000 f9be 	bl	80019dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001660:	230f      	movs	r3, #15
 8001662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001664:	2300      	movs	r3, #0
 8001666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800166c:	2300      	movs	r3, #0
 800166e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fc84 	bl	8003f88 <HAL_RCC_ClockConfig>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001686:	f000 f9a9 	bl	80019dc <Error_Handler>
  }
}
 800168a:	bf00      	nop
 800168c:	3750      	adds	r7, #80	@ 0x50
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023800 	.word	0x40023800
 8001698:	40007000 	.word	0x40007000

0800169c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b0:	463b      	mov	r3, r7
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <MX_TIM1_Init+0x98>)
 80016ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001738 <MX_TIM1_Init+0x9c>)
 80016bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 26665;
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <MX_TIM1_Init+0x98>)
 80016c0:	f646 0229 	movw	r2, #26665	@ 0x6829
 80016c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <MX_TIM1_Init+0x98>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <MX_TIM1_Init+0x98>)
 80016ce:	220a      	movs	r2, #10
 80016d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <MX_TIM1_Init+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <MX_TIM1_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <MX_TIM1_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016e4:	4813      	ldr	r0, [pc, #76]	@ (8001734 <MX_TIM1_Init+0x98>)
 80016e6:	f002 fe2f 	bl	8004348 <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016f0:	f000 f974 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <MX_TIM1_Init+0x98>)
 8001702:	f003 f926 	bl	8004952 <HAL_TIM_ConfigClockSource>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800170c:	f000 f966 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_TIM1_Init+0x98>)
 800171e:	f003 fb5d 	bl	8004ddc <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001728:	f000 f958 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000170 	.word	0x20000170
 8001738:	40010000 	.word	0x40010000

0800173c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001758:	4b1d      	ldr	r3, [pc, #116]	@ (80017d0 <MX_TIM3_Init+0x94>)
 800175a:	4a1e      	ldr	r2, [pc, #120]	@ (80017d4 <MX_TIM3_Init+0x98>)
 800175c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16000;
 800175e:	4b1c      	ldr	r3, [pc, #112]	@ (80017d0 <MX_TIM3_Init+0x94>)
 8001760:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001764:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <MX_TIM3_Init+0x94>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800176c:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <MX_TIM3_Init+0x94>)
 800176e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001772:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001774:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <MX_TIM3_Init+0x94>)
 8001776:	2200      	movs	r2, #0
 8001778:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177a:	4b15      	ldr	r3, [pc, #84]	@ (80017d0 <MX_TIM3_Init+0x94>)
 800177c:	2200      	movs	r2, #0
 800177e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001780:	4813      	ldr	r0, [pc, #76]	@ (80017d0 <MX_TIM3_Init+0x94>)
 8001782:	f002 fde1 	bl	8004348 <HAL_TIM_Base_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800178c:	f000 f926 	bl	80019dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001794:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	4619      	mov	r1, r3
 800179c:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <MX_TIM3_Init+0x94>)
 800179e:	f003 f8d8 	bl	8004952 <HAL_TIM_ConfigClockSource>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80017a8:	f000 f918 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ac:	2300      	movs	r3, #0
 80017ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b0:	2300      	movs	r3, #0
 80017b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b4:	463b      	mov	r3, r7
 80017b6:	4619      	mov	r1, r3
 80017b8:	4805      	ldr	r0, [pc, #20]	@ (80017d0 <MX_TIM3_Init+0x94>)
 80017ba:	f003 fb0f 	bl	8004ddc <HAL_TIMEx_MasterConfigSynchronization>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80017c4:	f000 f90a 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	200001b8 	.word	0x200001b8
 80017d4:	40000400 	.word	0x40000400

080017d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	@ 0x30
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2224      	movs	r2, #36	@ 0x24
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f007 fe9e 	bl	8009528 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <MX_TIM4_Init+0xa0>)
 80017f6:	4a21      	ldr	r2, [pc, #132]	@ (800187c <MX_TIM4_Init+0xa4>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <MX_TIM4_Init+0xa0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <MX_TIM4_Init+0xa0>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001806:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <MX_TIM4_Init+0xa0>)
 8001808:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800180c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180e:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <MX_TIM4_Init+0xa0>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001814:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <MX_TIM4_Init+0xa0>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800181a:	2301      	movs	r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001822:	2301      	movs	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800182e:	2300      	movs	r3, #0
 8001830:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001832:	2301      	movs	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800183e:	f107 030c 	add.w	r3, r7, #12
 8001842:	4619      	mov	r1, r3
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <MX_TIM4_Init+0xa0>)
 8001846:	f002 fe60 	bl	800450a <HAL_TIM_Encoder_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001850:	f000 f8c4 	bl	80019dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	@ (8001878 <MX_TIM4_Init+0xa0>)
 8001862:	f003 fabb 	bl	8004ddc <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800186c:	f000 f8b6 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3730      	adds	r7, #48	@ 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000200 	.word	0x20000200
 800187c:	40000800 	.word	0x40000800

08001880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_USART1_UART_Init+0x4c>)
 8001886:	4a12      	ldr	r2, [pc, #72]	@ (80018d0 <MX_USART1_UART_Init+0x50>)
 8001888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <MX_USART1_UART_Init+0x4c>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_USART1_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <MX_USART1_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <MX_USART1_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <MX_USART1_UART_Init+0x4c>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <MX_USART1_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <MX_USART1_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	@ (80018cc <MX_USART1_UART_Init+0x4c>)
 80018b8:	f003 fb12 	bl	8004ee0 <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018c2:	f000 f88b 	bl	80019dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000248 	.word	0x20000248
 80018d0:	40011000 	.word	0x40011000

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b37      	ldr	r3, [pc, #220]	@ (80019cc <MX_GPIO_Init+0xf8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a36      	ldr	r2, [pc, #216]	@ (80019cc <MX_GPIO_Init+0xf8>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b34      	ldr	r3, [pc, #208]	@ (80019cc <MX_GPIO_Init+0xf8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b30      	ldr	r3, [pc, #192]	@ (80019cc <MX_GPIO_Init+0xf8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a2f      	ldr	r2, [pc, #188]	@ (80019cc <MX_GPIO_Init+0xf8>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <MX_GPIO_Init+0xf8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <MX_GPIO_Init+0xf8>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a28      	ldr	r2, [pc, #160]	@ (80019cc <MX_GPIO_Init+0xf8>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <MX_GPIO_Init+0xf8>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <MX_GPIO_Init+0xf8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a21      	ldr	r2, [pc, #132]	@ (80019cc <MX_GPIO_Init+0xf8>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <MX_GPIO_Init+0xf8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001960:	481b      	ldr	r0, [pc, #108]	@ (80019d0 <MX_GPIO_Init+0xfc>)
 8001962:	f000 fe2d 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Step_Pin|Dir_Pin, GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	2103      	movs	r1, #3
 800196a:	481a      	ldr	r0, [pc, #104]	@ (80019d4 <MX_GPIO_Init+0x100>)
 800196c:	f000 fe28 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001976:	2301      	movs	r3, #1
 8001978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4811      	ldr	r0, [pc, #68]	@ (80019d0 <MX_GPIO_Init+0xfc>)
 800198a:	f000 fc7d 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : Step_Pin Dir_Pin */
  GPIO_InitStruct.Pin = Step_Pin|Dir_Pin;
 800198e:	2303      	movs	r3, #3
 8001990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001992:	2301      	movs	r3, #1
 8001994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001996:	2302      	movs	r3, #2
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	480b      	ldr	r0, [pc, #44]	@ (80019d4 <MX_GPIO_Init+0x100>)
 80019a6:	f000 fc6f 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : Endstop_1_Pin Endstop_2_Pin */
  GPIO_InitStruct.Pin = Endstop_1_Pin|Endstop_2_Pin;
 80019aa:	2303      	movs	r3, #3
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019b2:	2302      	movs	r3, #2
 80019b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <MX_GPIO_Init+0x104>)
 80019be:	f000 fc63 	bl	8002288 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	@ 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40020800 	.word	0x40020800
 80019d4:	40020000 	.word	0x40020000
 80019d8:	40020400 	.word	0x40020400

080019dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
}
 80019e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <Error_Handler+0x8>

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a34 <HAL_MspInit+0x4c>)
 80019f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001a34 <HAL_MspInit+0x4c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	4a08      	ldr	r2, [pc, #32]	@ (8001a34 <HAL_MspInit+0x4c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1a:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <HAL_MspInit+0x4c>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a18      	ldr	r2, [pc, #96]	@ (8001aa8 <HAL_TIM_Base_MspInit+0x70>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d116      	bne.n	8001a78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <HAL_TIM_Base_MspInit+0x74>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	4a16      	ldr	r2, [pc, #88]	@ (8001aac <HAL_TIM_Base_MspInit+0x74>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a5a:	4b14      	ldr	r3, [pc, #80]	@ (8001aac <HAL_TIM_Base_MspInit+0x74>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2019      	movs	r0, #25
 8001a6c:	f000 fbd5 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a70:	2019      	movs	r0, #25
 8001a72:	f000 fbee 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a76:	e012      	b.n	8001a9e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab0 <HAL_TIM_Base_MspInit+0x78>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d10d      	bne.n	8001a9e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <HAL_TIM_Base_MspInit+0x74>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a08      	ldr	r2, [pc, #32]	@ (8001aac <HAL_TIM_Base_MspInit+0x74>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_TIM_Base_MspInit+0x74>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40000400 	.word	0x40000400

08001ab4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a19      	ldr	r2, [pc, #100]	@ (8001b38 <HAL_TIM_Encoder_MspInit+0x84>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d12b      	bne.n	8001b2e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	4a17      	ldr	r2, [pc, #92]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	4a10      	ldr	r2, [pc, #64]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b02:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b0e:	23c0      	movs	r3, #192	@ 0xc0
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	@ (8001b40 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b2a:	f000 fbad 	bl	8002288 <HAL_GPIO_Init>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	@ 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40000800 	.word	0x40000800
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020400 	.word	0x40020400

08001b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	@ 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	@ (8001bc8 <HAL_UART_MspInit+0x84>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d12c      	bne.n	8001bc0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	4a17      	ldr	r2, [pc, #92]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b76:	4b15      	ldr	r3, [pc, #84]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a10      	ldr	r2, [pc, #64]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <HAL_UART_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b9e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4805      	ldr	r0, [pc, #20]	@ (8001bd0 <HAL_UART_MspInit+0x8c>)
 8001bbc:	f000 fb64 	bl	8002288 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	@ 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40011000 	.word	0x40011000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020000 	.word	0x40020000

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <NMI_Handler+0x4>

08001bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <MemManage_Handler+0x4>

08001bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2a:	f000 f9d7 	bl	8001fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <togleDiode.0>:
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  void togleDiode() {
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	f8c7 c004 	str.w	ip, [r7, #4]
      if(diode == 1) {
 8001c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <togleDiode.0+0x40>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d109      	bne.n	8001c5a <togleDiode.0+0x26>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c46:	2200      	movs	r2, #0
 8001c48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c4c:	480a      	ldr	r0, [pc, #40]	@ (8001c78 <togleDiode.0+0x44>)
 8001c4e:	f000 fcb7 	bl	80025c0 <HAL_GPIO_WritePin>
          diode = 0;
 8001c52:	4b08      	ldr	r3, [pc, #32]	@ (8001c74 <togleDiode.0+0x40>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
      } else {
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
          diode = 1;
      }
  }
 8001c58:	e008      	b.n	8001c6c <togleDiode.0+0x38>
          HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c60:	4805      	ldr	r0, [pc, #20]	@ (8001c78 <togleDiode.0+0x44>)
 8001c62:	f000 fcad 	bl	80025c0 <HAL_GPIO_WritePin>
          diode = 1;
 8001c66:	4b03      	ldr	r3, [pc, #12]	@ (8001c74 <togleDiode.0+0x40>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
  }
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	2000035c 	.word	0x2000035c
 8001c78:	40020800 	.word	0x40020800
 8001c7c:	00000000 	.word	0x00000000

08001c80 <TIM1_UP_TIM10_IRQHandler>:
{
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
void TIM1_UP_TIM10_IRQHandler(void)
 8001c86:	f107 0318 	add.w	r3, r7, #24
 8001c8a:	607b      	str	r3, [r7, #4]

  // Отправка координаты с частотой 60гц
  if (cnt != TIM4->CNT && InterseptClock[1] != 59) {
 8001c8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8001c8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c90:	4b5e      	ldr	r3, [pc, #376]	@ (8001e0c <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d019      	beq.n	8001ccc <TIM1_UP_TIM10_IRQHandler+0x4c>
 8001c98:	4b5d      	ldr	r3, [pc, #372]	@ (8001e10 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8001c9a:	885b      	ldrh	r3, [r3, #2]
 8001c9c:	2b3b      	cmp	r3, #59	@ 0x3b
 8001c9e:	d015      	beq.n	8001ccc <TIM1_UP_TIM10_IRQHandler+0x4c>
      togleDiode();
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	469c      	mov	ip, r3
 8001ca4:	f7ff ffc6 	bl	8001c34 <togleDiode.0>
      lg2 = sprintf(message2, "\n%d", TIM4->CNT);
 8001ca8:	4b57      	ldr	r3, [pc, #348]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cac:	461a      	mov	r2, r3
 8001cae:	4959      	ldr	r1, [pc, #356]	@ (8001e14 <TIM1_UP_TIM10_IRQHandler+0x194>)
 8001cb0:	4859      	ldr	r0, [pc, #356]	@ (8001e18 <TIM1_UP_TIM10_IRQHandler+0x198>)
 8001cb2:	f007 fc19 	bl	80094e8 <siprintf>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b58      	ldr	r3, [pc, #352]	@ (8001e1c <TIM1_UP_TIM10_IRQHandler+0x19c>)
 8001cbc:	601a      	str	r2, [r3, #0]
      CDC_Transmit_FS(message2, lg2);
 8001cbe:	4b57      	ldr	r3, [pc, #348]	@ (8001e1c <TIM1_UP_TIM10_IRQHandler+0x19c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4854      	ldr	r0, [pc, #336]	@ (8001e18 <TIM1_UP_TIM10_IRQHandler+0x198>)
 8001cc6:	f006 ffbd 	bl	8008c44 <CDC_Transmit_FS>
  if (cnt != TIM4->CNT && InterseptClock[1] != 59) {
 8001cca:	e01b      	b.n	8001d04 <TIM1_UP_TIM10_IRQHandler+0x84>
  } else if (InterseptClock[1] == 59) {
 8001ccc:	4b50      	ldr	r3, [pc, #320]	@ (8001e10 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8001cce:	885b      	ldrh	r3, [r3, #2]
 8001cd0:	2b3b      	cmp	r3, #59	@ 0x3b
 8001cd2:	d117      	bne.n	8001d04 <TIM1_UP_TIM10_IRQHandler+0x84>
      togleDiode();
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	469c      	mov	ip, r3
 8001cd8:	f7ff ffac 	bl	8001c34 <togleDiode.0>
      lg2 = sprintf(message2, "\n%d", TIM4->CNT);
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	494c      	ldr	r1, [pc, #304]	@ (8001e14 <TIM1_UP_TIM10_IRQHandler+0x194>)
 8001ce4:	484c      	ldr	r0, [pc, #304]	@ (8001e18 <TIM1_UP_TIM10_IRQHandler+0x198>)
 8001ce6:	f007 fbff 	bl	80094e8 <siprintf>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	4b4b      	ldr	r3, [pc, #300]	@ (8001e1c <TIM1_UP_TIM10_IRQHandler+0x19c>)
 8001cf0:	601a      	str	r2, [r3, #0]
      CDC_Transmit_FS(message2, lg2);
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8001e1c <TIM1_UP_TIM10_IRQHandler+0x19c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4847      	ldr	r0, [pc, #284]	@ (8001e18 <TIM1_UP_TIM10_IRQHandler+0x198>)
 8001cfa:	f006 ffa3 	bl	8008c44 <CDC_Transmit_FS>
      InterseptClock[1] = 0;
 8001cfe:	4b44      	ldr	r3, [pc, #272]	@ (8001e10 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	805a      	strh	r2, [r3, #2]
  }
  cnt = TIM4->CNT; //Сохранение предыдущей позиции для отправки координаты
 8001d04:	4b40      	ldr	r3, [pc, #256]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	4a40      	ldr	r2, [pc, #256]	@ (8001e0c <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8001d0a:	6013      	str	r3, [r2, #0]

  //вычисление скорости с частотой 6гц
  if (InterseptClock[1] == 9) {
 8001d0c:	4b40      	ldr	r3, [pc, #256]	@ (8001e10 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8001d0e:	885b      	ldrh	r3, [r3, #2]
 8001d10:	2b09      	cmp	r3, #9
 8001d12:	d133      	bne.n	8001d7c <TIM1_UP_TIM10_IRQHandler+0xfc>
      speed = TIM4->CNT - lastPos;
 8001d14:	4b3c      	ldr	r3, [pc, #240]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	4a41      	ldr	r2, [pc, #260]	@ (8001e20 <TIM1_UP_TIM10_IRQHandler+0x1a0>)
 8001d1a:	8812      	ldrh	r2, [r2, #0]
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b40      	ldr	r3, [pc, #256]	@ (8001e24 <TIM1_UP_TIM10_IRQHandler+0x1a4>)
 8001d22:	601a      	str	r2, [r3, #0]
      if (abs(speed) >= TIM4->ARR * 0.9) {
 8001d24:	4b3f      	ldr	r3, [pc, #252]	@ (8001e24 <TIM1_UP_TIM10_IRQHandler+0x1a4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bfb8      	it	lt
 8001d2c:	425b      	neglt	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fd22 	bl	8000778 <__aeabi_i2d>
 8001d34:	4604      	mov	r4, r0
 8001d36:	460d      	mov	r5, r1
 8001d38:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8001d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fd0b 	bl	8000758 <__aeabi_ui2d>
 8001d42:	a32f      	add	r3, pc, #188	@ (adr r3, 8001e00 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f7fe fa9a 	bl	8000280 <__aeabi_dmul>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4620      	mov	r0, r4
 8001d52:	4629      	mov	r1, r5
 8001d54:	f7fe fdee 	bl	8000934 <__aeabi_dcmpge>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <TIM1_UP_TIM10_IRQHandler+0xe8>
          speed = lastSpeed;
 8001d5e:	4b32      	ldr	r3, [pc, #200]	@ (8001e28 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b2f      	ldr	r3, [pc, #188]	@ (8001e24 <TIM1_UP_TIM10_IRQHandler+0x1a4>)
 8001d66:	601a      	str	r2, [r3, #0]
      }
      lastSpeed = speed;
 8001d68:	4b2e      	ldr	r3, [pc, #184]	@ (8001e24 <TIM1_UP_TIM10_IRQHandler+0x1a4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <TIM1_UP_TIM10_IRQHandler+0x1a8>)
 8001d70:	801a      	strh	r2, [r3, #0]
      lastPos = TIM4->CNT;
 8001d72:	4b25      	ldr	r3, [pc, #148]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <TIM1_UP_TIM10_IRQHandler+0x1a0>)
 8001d7a:	801a      	strh	r2, [r3, #0]
  }

  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET && i==0) {
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	482b      	ldr	r0, [pc, #172]	@ (8001e2c <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 8001d80:	f000 fc06 	bl	8002590 <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d11c      	bne.n	8001dc4 <TIM1_UP_TIM10_IRQHandler+0x144>
 8001d8a:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <TIM1_UP_TIM10_IRQHandler+0x1b0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d118      	bne.n	8001dc4 <TIM1_UP_TIM10_IRQHandler+0x144>
      i = 1;
 8001d92:	4b27      	ldr	r3, [pc, #156]	@ (8001e30 <TIM1_UP_TIM10_IRQHandler+0x1b0>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
      if (speed > 0) {
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <TIM1_UP_TIM10_IRQHandler+0x1a4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	dd08      	ble.n	8001db2 <TIM1_UP_TIM10_IRQHandler+0x132>
          TIM4->CNT = TIM4->ARR - endStopSize;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	4a23      	ldr	r2, [pc, #140]	@ (8001e34 <TIM1_UP_TIM10_IRQHandler+0x1b4>)
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	4611      	mov	r1, r2
 8001daa:	4a17      	ldr	r2, [pc, #92]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8001dac:	1a5b      	subs	r3, r3, r1
 8001dae:	6253      	str	r3, [r2, #36]	@ 0x24
 8001db0:	e003      	b.n	8001dba <TIM1_UP_TIM10_IRQHandler+0x13a>
      } else {
          TIM4->CNT = endStopSize;
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <TIM1_UP_TIM10_IRQHandler+0x1b4>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
      }
      CDC_Transmit_FS(" Position fixed", 15);
 8001dba:	210f      	movs	r1, #15
 8001dbc:	481e      	ldr	r0, [pc, #120]	@ (8001e38 <TIM1_UP_TIM10_IRQHandler+0x1b8>)
 8001dbe:	f006 ff41 	bl	8008c44 <CDC_Transmit_FS>
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET && i==0) {
 8001dc2:	e009      	b.n	8001dd8 <TIM1_UP_TIM10_IRQHandler+0x158>
  } else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) {i = 0;}
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	4819      	ldr	r0, [pc, #100]	@ (8001e2c <TIM1_UP_TIM10_IRQHandler+0x1ac>)
 8001dc8:	f000 fbe2 	bl	8002590 <HAL_GPIO_ReadPin>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <TIM1_UP_TIM10_IRQHandler+0x158>
 8001dd2:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <TIM1_UP_TIM10_IRQHandler+0x1b0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

  InterseptClock[1] ++; InterseptClock[2] ++;
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8001de2:	805a      	strh	r2, [r3, #2]
 8001de4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e10 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8001de6:	889b      	ldrh	r3, [r3, #4]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8001dee:	809a      	strh	r2, [r3, #4]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001df0:	4812      	ldr	r0, [pc, #72]	@ (8001e3c <TIM1_UP_TIM10_IRQHandler+0x1bc>)
 8001df2:	f002 fcbe 	bl	8004772 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	cccccccd 	.word	0xcccccccd
 8001e04:	3feccccc 	.word	0x3feccccc
 8001e08:	40000800 	.word	0x40000800
 8001e0c:	20000350 	.word	0x20000350
 8001e10:	20000360 	.word	0x20000360
 8001e14:	08009f30 	.word	0x08009f30
 8001e18:	20000368 	.word	0x20000368
 8001e1c:	20000354 	.word	0x20000354
 8001e20:	20000366 	.word	0x20000366
 8001e24:	200002d4 	.word	0x200002d4
 8001e28:	20000364 	.word	0x20000364
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	20000358 	.word	0x20000358
 8001e34:	200002d8 	.word	0x200002d8
 8001e38:	08009f34 	.word	0x08009f34
 8001e3c:	20000170 	.word	0x20000170

08001e40 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <OTG_FS_IRQHandler+0x10>)
 8001e46:	f000 fd18 	bl	800287a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20001090 	.word	0x20001090

08001e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e5c:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <_sbrk+0x5c>)
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <_sbrk+0x60>)
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e68:	4b13      	ldr	r3, [pc, #76]	@ (8001eb8 <_sbrk+0x64>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d102      	bne.n	8001e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <_sbrk+0x64>)
 8001e72:	4a12      	ldr	r2, [pc, #72]	@ (8001ebc <_sbrk+0x68>)
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e76:	4b10      	ldr	r3, [pc, #64]	@ (8001eb8 <_sbrk+0x64>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d207      	bcs.n	8001e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e84:	f007 fb58 	bl	8009538 <__errno>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	e009      	b.n	8001ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e94:	4b08      	ldr	r3, [pc, #32]	@ (8001eb8 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e9a:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <_sbrk+0x64>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <_sbrk+0x64>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20010000 	.word	0x20010000
 8001eb4:	00000400 	.word	0x00000400
 8001eb8:	200003a8 	.word	0x200003a8
 8001ebc:	200018e0 	.word	0x200018e0

08001ec0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ee8:	f7ff ffea 	bl	8001ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	@ (8001f20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	@ (8001f24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	@ (8001f30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f007 fb17 	bl	8009544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f16:	f7fe fec7 	bl	8000ca8 <main>
  bx  lr    
 8001f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f1c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8001f28:	08009fd0 	.word	0x08009fd0
  ldr r2, =_sbss
 8001f2c:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8001f30:	200018dc 	.word	0x200018dc

08001f34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC_IRQHandler>
	...

08001f38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <HAL_Init+0x40>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_Init+0x40>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <HAL_Init+0x40>)
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_Init+0x40>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <HAL_Init+0x40>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 f94f 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f66:	200f      	movs	r0, #15
 8001f68:	f000 f808 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f6c:	f7ff fd3c 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <HAL_InitTick+0x54>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <HAL_InitTick+0x58>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 f967 	bl	800226e <HAL_SYSTICK_Config>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00e      	b.n	8001fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0f      	cmp	r3, #15
 8001fae:	d80a      	bhi.n	8001fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f000 f92f 	bl	800221a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fbc:	4a06      	ldr	r2, [pc, #24]	@ (8001fd8 <HAL_InitTick+0x5c>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	20000010 	.word	0x20000010
 8001fd8:	2000000c 	.word	0x2000000c

08001fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <HAL_IncTick+0x20>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x24>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4413      	add	r3, r2
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <HAL_IncTick+0x24>)
 8001fee:	6013      	str	r3, [r2, #0]
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000010 	.word	0x20000010
 8002000:	200003ac 	.word	0x200003ac

08002004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return uwTick;
 8002008:	4b03      	ldr	r3, [pc, #12]	@ (8002018 <HAL_GetTick+0x14>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	200003ac 	.word	0x200003ac

0800201c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff ffee 	bl	8002004 <HAL_GetTick>
 8002028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d005      	beq.n	8002042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002036:	4b0a      	ldr	r3, [pc, #40]	@ (8002060 <HAL_Delay+0x44>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002042:	bf00      	nop
 8002044:	f7ff ffde 	bl	8002004 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d8f7      	bhi.n	8002044 <HAL_Delay+0x28>
  {
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000010 	.word	0x20000010

08002064 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800208c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002090:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002094:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002096:	4a04      	ldr	r2, [pc, #16]	@ (80020a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	60d3      	str	r3, [r2, #12]
}
 800209c:	bf00      	nop
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b0:	4b04      	ldr	r3, [pc, #16]	@ (80020c4 <__NVIC_GetPriorityGrouping+0x18>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	f003 0307 	and.w	r3, r3, #7
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0b      	blt.n	80020f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	f003 021f 	and.w	r2, r3, #31
 80020e0:	4907      	ldr	r1, [pc, #28]	@ (8002100 <__NVIC_EnableIRQ+0x38>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	2001      	movs	r0, #1
 80020ea:	fa00 f202 	lsl.w	r2, r0, r2
 80020ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	e000e100 	.word	0xe000e100

08002104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	db0a      	blt.n	800212e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	b2da      	uxtb	r2, r3
 800211c:	490c      	ldr	r1, [pc, #48]	@ (8002150 <__NVIC_SetPriority+0x4c>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	0112      	lsls	r2, r2, #4
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	440b      	add	r3, r1
 8002128:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800212c:	e00a      	b.n	8002144 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4908      	ldr	r1, [pc, #32]	@ (8002154 <__NVIC_SetPriority+0x50>)
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	3b04      	subs	r3, #4
 800213c:	0112      	lsls	r2, r2, #4
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	440b      	add	r3, r1
 8002142:	761a      	strb	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f1c3 0307 	rsb	r3, r3, #7
 8002172:	2b04      	cmp	r3, #4
 8002174:	bf28      	it	cs
 8002176:	2304      	movcs	r3, #4
 8002178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3304      	adds	r3, #4
 800217e:	2b06      	cmp	r3, #6
 8002180:	d902      	bls.n	8002188 <NVIC_EncodePriority+0x30>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3b03      	subs	r3, #3
 8002186:	e000      	b.n	800218a <NVIC_EncodePriority+0x32>
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800218c:	f04f 32ff 	mov.w	r2, #4294967295
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43da      	mvns	r2, r3
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	401a      	ands	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a0:	f04f 31ff 	mov.w	r1, #4294967295
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43d9      	mvns	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	4313      	orrs	r3, r2
         );
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3724      	adds	r7, #36	@ 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d0:	d301      	bcc.n	80021d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00f      	b.n	80021f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002200 <SysTick_Config+0x40>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021de:	210f      	movs	r1, #15
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f7ff ff8e 	bl	8002104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <SysTick_Config+0x40>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ee:	4b04      	ldr	r3, [pc, #16]	@ (8002200 <SysTick_Config+0x40>)
 80021f0:	2207      	movs	r2, #7
 80021f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	e000e010 	.word	0xe000e010

08002204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ff29 	bl	8002064 <__NVIC_SetPriorityGrouping>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221a:	b580      	push	{r7, lr}
 800221c:	b086      	sub	sp, #24
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800222c:	f7ff ff3e 	bl	80020ac <__NVIC_GetPriorityGrouping>
 8002230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	6978      	ldr	r0, [r7, #20]
 8002238:	f7ff ff8e 	bl	8002158 <NVIC_EncodePriority>
 800223c:	4602      	mov	r2, r0
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff5d 	bl	8002104 <__NVIC_SetPriority>
}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff ff31 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b082      	sub	sp, #8
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff ffa2 	bl	80021c0 <SysTick_Config>
 800227c:	4603      	mov	r3, r0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	@ 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	e159      	b.n	8002558 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8148 	bne.w	8002552 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d005      	beq.n	80022da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d130      	bne.n	800233c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002310:	2201      	movs	r2, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0201 	and.w	r2, r3, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b03      	cmp	r3, #3
 8002346:	d017      	beq.n	8002378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a2 	beq.w	8002552 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b57      	ldr	r3, [pc, #348]	@ (8002570 <HAL_GPIO_Init+0x2e8>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	4a56      	ldr	r2, [pc, #344]	@ (8002570 <HAL_GPIO_Init+0x2e8>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800241c:	6453      	str	r3, [r2, #68]	@ 0x44
 800241e:	4b54      	ldr	r3, [pc, #336]	@ (8002570 <HAL_GPIO_Init+0x2e8>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242a:	4a52      	ldr	r2, [pc, #328]	@ (8002574 <HAL_GPIO_Init+0x2ec>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a49      	ldr	r2, [pc, #292]	@ (8002578 <HAL_GPIO_Init+0x2f0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d019      	beq.n	800248a <HAL_GPIO_Init+0x202>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a48      	ldr	r2, [pc, #288]	@ (800257c <HAL_GPIO_Init+0x2f4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d013      	beq.n	8002486 <HAL_GPIO_Init+0x1fe>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a47      	ldr	r2, [pc, #284]	@ (8002580 <HAL_GPIO_Init+0x2f8>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_GPIO_Init+0x1fa>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a46      	ldr	r2, [pc, #280]	@ (8002584 <HAL_GPIO_Init+0x2fc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d007      	beq.n	800247e <HAL_GPIO_Init+0x1f6>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a45      	ldr	r2, [pc, #276]	@ (8002588 <HAL_GPIO_Init+0x300>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_GPIO_Init+0x1f2>
 8002476:	2304      	movs	r3, #4
 8002478:	e008      	b.n	800248c <HAL_GPIO_Init+0x204>
 800247a:	2307      	movs	r3, #7
 800247c:	e006      	b.n	800248c <HAL_GPIO_Init+0x204>
 800247e:	2303      	movs	r3, #3
 8002480:	e004      	b.n	800248c <HAL_GPIO_Init+0x204>
 8002482:	2302      	movs	r3, #2
 8002484:	e002      	b.n	800248c <HAL_GPIO_Init+0x204>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_GPIO_Init+0x204>
 800248a:	2300      	movs	r3, #0
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	f002 0203 	and.w	r2, r2, #3
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	4093      	lsls	r3, r2
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800249c:	4935      	ldr	r1, [pc, #212]	@ (8002574 <HAL_GPIO_Init+0x2ec>)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	3302      	adds	r3, #2
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024aa:	4b38      	ldr	r3, [pc, #224]	@ (800258c <HAL_GPIO_Init+0x304>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ce:	4a2f      	ldr	r2, [pc, #188]	@ (800258c <HAL_GPIO_Init+0x304>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d4:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <HAL_GPIO_Init+0x304>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f8:	4a24      	ldr	r2, [pc, #144]	@ (800258c <HAL_GPIO_Init+0x304>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024fe:	4b23      	ldr	r3, [pc, #140]	@ (800258c <HAL_GPIO_Init+0x304>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002522:	4a1a      	ldr	r2, [pc, #104]	@ (800258c <HAL_GPIO_Init+0x304>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002528:	4b18      	ldr	r3, [pc, #96]	@ (800258c <HAL_GPIO_Init+0x304>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800254c:	4a0f      	ldr	r2, [pc, #60]	@ (800258c <HAL_GPIO_Init+0x304>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3301      	adds	r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2b0f      	cmp	r3, #15
 800255c:	f67f aea2 	bls.w	80022a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3724      	adds	r7, #36	@ 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40013800 	.word	0x40013800
 8002578:	40020000 	.word	0x40020000
 800257c:	40020400 	.word	0x40020400
 8002580:	40020800 	.word	0x40020800
 8002584:	40020c00 	.word	0x40020c00
 8002588:	40021000 	.word	0x40021000
 800258c:	40013c00 	.word	0x40013c00

08002590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	887b      	ldrh	r3, [r7, #2]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73fb      	strb	r3, [r7, #15]
 80025ac:	e001      	b.n	80025b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af02      	add	r7, sp, #8
 80025f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e101      	b.n	8002808 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f006 fc58 	bl	8008ed4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2203      	movs	r2, #3
 8002628:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002632:	d102      	bne.n	800263a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f003 f829 	bl	8005696 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7c1a      	ldrb	r2, [r3, #16]
 800264c:	f88d 2000 	strb.w	r2, [sp]
 8002650:	3304      	adds	r3, #4
 8002652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002654:	f002 ff08 	bl	8005468 <USB_CoreInit>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d005      	beq.n	800266a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0ce      	b.n	8002808 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f003 f821 	bl	80056b8 <USB_SetCurrentMode>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0bf      	b.n	8002808 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
 800268c:	e04a      	b.n	8002724 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	3315      	adds	r3, #21
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	3314      	adds	r3, #20
 80026b2:	7bfa      	ldrb	r2, [r7, #15]
 80026b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	b298      	uxth	r0, r3
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	332e      	adds	r3, #46	@ 0x2e
 80026ca:	4602      	mov	r2, r0
 80026cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3318      	adds	r3, #24
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	331c      	adds	r3, #28
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	3320      	adds	r3, #32
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3324      	adds	r3, #36	@ 0x24
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	3301      	adds	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	791b      	ldrb	r3, [r3, #4]
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	429a      	cmp	r2, r3
 800272c:	d3af      	bcc.n	800268e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	e044      	b.n	80027be <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4413      	add	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800274a:	7bfa      	ldrb	r2, [r7, #15]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002776:	7bfa      	ldrb	r2, [r7, #15]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800278c:	7bfa      	ldrb	r2, [r7, #15]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	3301      	adds	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	791b      	ldrb	r3, [r3, #4]
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3b5      	bcc.n	8002734 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7c1a      	ldrb	r2, [r3, #16]
 80027d0:	f88d 2000 	strb.w	r2, [sp]
 80027d4:	3304      	adds	r3, #4
 80027d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d8:	f002 ffba 	bl	8005750 <USB_DevInit>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00c      	b.n	8002808 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f004 f804 	bl	800680e <USB_DevDisconnect>

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_PCD_Start+0x1c>
 8002828:	2302      	movs	r3, #2
 800282a:	e022      	b.n	8002872 <HAL_PCD_Start+0x62>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d009      	beq.n	8002854 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002844:	2b01      	cmp	r3, #1
 8002846:	d105      	bne.n	8002854 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f002 ff0b 	bl	8005674 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f003 ffb2 	bl	80067cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800287a:	b590      	push	{r4, r7, lr}
 800287c:	b08d      	sub	sp, #52	@ 0x34
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f004 f870 	bl	8006976 <USB_GetMode>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	f040 848c 	bne.w	80031b6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f003 ffd4 	bl	8006850 <USB_ReadInterrupts>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8482 	beq.w	80031b4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 ffc1 	bl	8006850 <USB_ReadInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d107      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f002 0202 	and.w	r2, r2, #2
 80028e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f003 ffaf 	bl	8006850 <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d161      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0210 	bic.w	r2, r2, #16
 800290a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	f003 020f 	and.w	r2, r3, #15
 8002918:	4613      	mov	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	4413      	add	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	3304      	adds	r3, #4
 800292a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	0c5b      	lsrs	r3, r3, #17
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	2b02      	cmp	r3, #2
 8002936:	d124      	bne.n	8002982 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d035      	beq.n	80029b0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800294e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	6a38      	ldr	r0, [r7, #32]
 8002958:	f003 fde6 	bl	8006528 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	68da      	ldr	r2, [r3, #12]
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002968:	441a      	add	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800297a:	441a      	add	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	615a      	str	r2, [r3, #20]
 8002980:	e016      	b.n	80029b0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	0c5b      	lsrs	r3, r3, #17
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	2b06      	cmp	r3, #6
 800298c:	d110      	bne.n	80029b0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002994:	2208      	movs	r2, #8
 8002996:	4619      	mov	r1, r3
 8002998:	6a38      	ldr	r0, [r7, #32]
 800299a:	f003 fdc5 	bl	8006528 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029aa:	441a      	add	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0210 	orr.w	r2, r2, #16
 80029be:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 ff43 	bl	8006850 <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029d0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029d4:	f040 80a7 	bne.w	8002b26 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 ff48 	bl	8006876 <USB_ReadDevAllOutEpInterrupt>
 80029e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80029e8:	e099      	b.n	8002b1e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 808e 	beq.w	8002b12 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fc:	b2d2      	uxtb	r2, r2
 80029fe:	4611      	mov	r1, r2
 8002a00:	4618      	mov	r0, r3
 8002a02:	f003 ff6c 	bl	80068de <USB_ReadDevOutEPInterrupt>
 8002a06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2301      	movs	r3, #1
 8002a22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fea4 	bl	8003774 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00c      	beq.n	8002a50 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a42:	461a      	mov	r2, r3
 8002a44:	2308      	movs	r3, #8
 8002a46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 ff7a 	bl	8003944 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a66:	461a      	mov	r2, r3
 8002a68:	2310      	movs	r3, #16
 8002a6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d030      	beq.n	8002ad8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d109      	bne.n	8002a96 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a94:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	78db      	ldrb	r3, [r3, #3]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d108      	bne.n	8002ac6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f006 fb03 	bl	80090cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aee:	461a      	mov	r2, r3
 8002af0:	2320      	movs	r3, #32
 8002af2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d009      	beq.n	8002b12 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b10:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b14:	3301      	adds	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f47f af62 	bne.w	80029ea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fe90 	bl	8006850 <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b3a:	f040 80db 	bne.w	8002cf4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 feb1 	bl	80068aa <USB_ReadDevAllInEpInterrupt>
 8002b48:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b4e:	e0cd      	b.n	8002cec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80c2 	beq.w	8002ce0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f003 fed7 	bl	800691a <USB_ReadDevInEPInterrupt>
 8002b6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d057      	beq.n	8002c28 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	2201      	movs	r2, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69f9      	ldr	r1, [r7, #28]
 8002b94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b98:	4013      	ands	r3, r2
 8002b9a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2301      	movs	r3, #1
 8002bac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	799b      	ldrb	r3, [r3, #6]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d132      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3320      	adds	r3, #32
 8002bc6:	6819      	ldr	r1, [r3, #0]
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4403      	add	r3, r0
 8002bd6:	331c      	adds	r3, #28
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4419      	add	r1, r3
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4403      	add	r3, r0
 8002bea:	3320      	adds	r3, #32
 8002bec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d113      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x3a2>
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3324      	adds	r3, #36	@ 0x24
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d108      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c14:	461a      	mov	r2, r3
 8002c16:	2101      	movs	r1, #1
 8002c18:	f003 fede 	bl	80069d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f006 f9d7 	bl	8008fd6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c3e:	461a      	mov	r2, r3
 8002c40:	2308      	movs	r3, #8
 8002c42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d008      	beq.n	8002c60 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c76:	461a      	mov	r2, r3
 8002c78:	2340      	movs	r3, #64	@ 0x40
 8002c7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d023      	beq.n	8002cce <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c88:	6a38      	ldr	r0, [r7, #32]
 8002c8a:	f002 fec5 	bl	8005a18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3310      	adds	r3, #16
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	78db      	ldrb	r3, [r3, #3]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d108      	bne.n	8002cbc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2200      	movs	r2, #0
 8002cae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f006 fa1a 	bl	80090f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2302      	movs	r3, #2
 8002ccc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fcbd 	bl	800365a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f47f af2e 	bne.w	8002b50 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 fda9 	bl	8006850 <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d08:	d122      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	69fa      	ldr	r2, [r7, #28]
 8002d14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d18:	f023 0301 	bic.w	r3, r3, #1
 8002d1c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d108      	bne.n	8002d3a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d30:	2100      	movs	r1, #0
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fea4 	bl	8003a80 <HAL_PCDEx_LPM_Callback>
 8002d38:	e002      	b.n	8002d40 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f006 f9b8 	bl	80090b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695a      	ldr	r2, [r3, #20]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 fd7b 	bl	8006850 <USB_ReadInterrupts>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d64:	d112      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d102      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f006 f974 	bl	8009064 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d8a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f003 fd5d 	bl	8006850 <USB_ReadInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da0:	f040 80b7 	bne.w	8002f12 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002db2:	f023 0301 	bic.w	r3, r3, #1
 8002db6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2110      	movs	r1, #16
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f002 fe2a 	bl	8005a18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dc8:	e046      	b.n	8002e58 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ddc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dee:	0151      	lsls	r1, r2, #5
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	440a      	add	r2, r1
 8002df4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002df8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002dfc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e10:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e22:	0151      	lsls	r1, r2, #5
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	440a      	add	r2, r1
 8002e28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e30:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e42:	0151      	lsls	r1, r2, #5
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	440a      	add	r2, r1
 8002e48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e50:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e54:	3301      	adds	r3, #1
 8002e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	791b      	ldrb	r3, [r3, #4]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d3b2      	bcc.n	8002dca <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e72:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e76:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	7bdb      	ldrb	r3, [r3, #15]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d016      	beq.n	8002eae <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e8a:	69fa      	ldr	r2, [r7, #28]
 8002e8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e90:	f043 030b 	orr.w	r3, r3, #11
 8002e94:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ea6:	f043 030b 	orr.w	r3, r3, #11
 8002eaa:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eac:	e015      	b.n	8002eda <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ebc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ec0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002ec4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ed4:	f043 030b 	orr.w	r3, r3, #11
 8002ed8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69fa      	ldr	r2, [r7, #28]
 8002ee4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ee8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002eec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002efc:	461a      	mov	r2, r3
 8002efe:	f003 fd6b 	bl	80069d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695a      	ldr	r2, [r3, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f003 fc9a 	bl	8006850 <USB_ReadInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f26:	d123      	bne.n	8002f70 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 fd30 	bl	8006992 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 fde7 	bl	8005b0a <USB_GetDevSpeed>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	461a      	mov	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681c      	ldr	r4, [r3, #0]
 8002f48:	f001 f9ca 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f52:	461a      	mov	r2, r3
 8002f54:	4620      	mov	r0, r4
 8002f56:	f002 faeb 	bl	8005530 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f006 f863 	bl	8009026 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fc6b 	bl	8006850 <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d10a      	bne.n	8002f9a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f006 f840 	bl	800900a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	695a      	ldr	r2, [r3, #20]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f002 0208 	and.w	r2, r2, #8
 8002f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f003 fc56 	bl	8006850 <USB_ReadInterrupts>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002faa:	2b80      	cmp	r3, #128	@ 0x80
 8002fac:	d123      	bne.n	8002ff6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fba:	2301      	movs	r3, #1
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbe:	e014      	b.n	8002fea <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d105      	bne.n	8002fe4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4619      	mov	r1, r3
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fb0a 	bl	80035f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	791b      	ldrb	r3, [r3, #4]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d3e4      	bcc.n	8002fc0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fc28 	bl	8006850 <USB_ReadInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800300a:	d13c      	bne.n	8003086 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800300c:	2301      	movs	r3, #1
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003010:	e02b      	b.n	800306a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003026:	4613      	mov	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	3318      	adds	r3, #24
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d115      	bne.n	8003064 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003038:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800303a:	2b00      	cmp	r3, #0
 800303c:	da12      	bge.n	8003064 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	3317      	adds	r3, #23
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 faca 	bl	80035f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	3301      	adds	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	@ 0x24
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	791b      	ldrb	r3, [r3, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003072:	4293      	cmp	r3, r2
 8003074:	d3cd      	bcc.n	8003012 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f003 fbe0 	bl	8006850 <USB_ReadInterrupts>
 8003090:	4603      	mov	r3, r0
 8003092:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003096:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800309a:	d156      	bne.n	800314a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309c:	2301      	movs	r3, #1
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a0:	e045      	b.n	800312e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d12e      	bne.n	8003128 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da2b      	bge.n	8003128 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80030dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d121      	bne.n	8003128 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030f6:	2201      	movs	r2, #1
 80030f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003120:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003124:	6053      	str	r3, [r2, #4]
            break;
 8003126:	e008      	b.n	800313a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	3301      	adds	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	791b      	ldrb	r3, [r3, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	4293      	cmp	r3, r2
 8003138:	d3b3      	bcc.n	80030a2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003148:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f003 fb7e 	bl	8006850 <USB_ReadInterrupts>
 8003154:	4603      	mov	r3, r0
 8003156:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800315a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800315e:	d10a      	bne.n	8003176 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f005 ffd7 	bl	8009114 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003174:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f003 fb68 	bl	8006850 <USB_ReadInterrupts>
 8003180:	4603      	mov	r3, r0
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d115      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f005 ffc7 	bl	8009130 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6859      	ldr	r1, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	e000      	b.n	80031b6 <HAL_PCD_IRQHandler+0x93c>
      return;
 80031b4:	bf00      	nop
    }
  }
}
 80031b6:	3734      	adds	r7, #52	@ 0x34
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}

080031bc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_PCD_SetAddress+0x1a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e012      	b.n	80031fc <HAL_PCD_SetAddress+0x40>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fac7 	bl	8006780 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	4603      	mov	r3, r0
 8003214:	70fb      	strb	r3, [r7, #3]
 8003216:	460b      	mov	r3, r1
 8003218:	803b      	strh	r3, [r7, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003222:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003226:	2b00      	cmp	r3, #0
 8003228:	da0f      	bge.n	800324a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	f003 020f 	and.w	r2, r3, #15
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	3310      	adds	r3, #16
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	705a      	strb	r2, [r3, #1]
 8003248:	e00f      	b.n	800326a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800324a:	78fb      	ldrb	r3, [r7, #3]
 800324c:	f003 020f 	and.w	r2, r3, #15
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	3304      	adds	r3, #4
 8003262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	b2da      	uxtb	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003276:	883b      	ldrh	r3, [r7, #0]
 8003278:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	78ba      	ldrb	r2, [r7, #2]
 8003284:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	785b      	ldrb	r3, [r3, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003298:	78bb      	ldrb	r3, [r7, #2]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d102      	bne.n	80032a4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_PCD_EP_Open+0xae>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e00e      	b.n	80032d0 <HAL_PCD_EP_Open+0xcc>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68f9      	ldr	r1, [r7, #12]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 fc47 	bl	8005b54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80032ce:	7afb      	ldrb	r3, [r7, #11]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da0f      	bge.n	800330c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	f003 020f 	and.w	r2, r3, #15
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	3310      	adds	r3, #16
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4413      	add	r3, r2
 8003300:	3304      	adds	r3, #4
 8003302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	705a      	strb	r2, [r3, #1]
 800330a:	e00f      	b.n	800332c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	f003 020f 	and.w	r2, r3, #15
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	3304      	adds	r3, #4
 8003324:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800332c:	78fb      	ldrb	r3, [r7, #3]
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	b2da      	uxtb	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_PCD_EP_Close+0x6e>
 8003342:	2302      	movs	r3, #2
 8003344:	e00e      	b.n	8003364 <HAL_PCD_EP_Close+0x8c>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68f9      	ldr	r1, [r7, #12]
 8003354:	4618      	mov	r0, r3
 8003356:	f002 fc85 	bl	8005c64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	460b      	mov	r3, r1
 800337a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800337c:	7afb      	ldrb	r3, [r7, #11]
 800337e:	f003 020f 	and.w	r2, r3, #15
 8003382:	4613      	mov	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4413      	add	r3, r2
 8003392:	3304      	adds	r3, #4
 8003394:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2200      	movs	r2, #0
 80033a6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2200      	movs	r2, #0
 80033ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ae:	7afb      	ldrb	r3, [r7, #11]
 80033b0:	f003 030f 	and.w	r3, r3, #15
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	799b      	ldrb	r3, [r3, #6]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d102      	bne.n	80033c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6818      	ldr	r0, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	799b      	ldrb	r3, [r3, #6]
 80033d0:	461a      	mov	r2, r3
 80033d2:	6979      	ldr	r1, [r7, #20]
 80033d4:	f002 fd22 	bl	8005e1c <USB_EPStartXfer>

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	460b      	mov	r3, r1
 80033ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033ee:	78fb      	ldrb	r3, [r7, #3]
 80033f0:	f003 020f 	and.w	r2, r3, #15
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003404:	681b      	ldr	r3, [r3, #0]
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b086      	sub	sp, #24
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	460b      	mov	r3, r1
 8003420:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003422:	7afb      	ldrb	r3, [r7, #11]
 8003424:	f003 020f 	and.w	r2, r3, #15
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	3310      	adds	r3, #16
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4413      	add	r3, r2
 8003436:	3304      	adds	r3, #4
 8003438:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2200      	movs	r2, #0
 800344a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2201      	movs	r2, #1
 8003450:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003452:	7afb      	ldrb	r3, [r7, #11]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	b2da      	uxtb	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	799b      	ldrb	r3, [r3, #6]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d102      	bne.n	800346c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	799b      	ldrb	r3, [r3, #6]
 8003474:	461a      	mov	r2, r3
 8003476:	6979      	ldr	r1, [r7, #20]
 8003478:	f002 fcd0 	bl	8005e1c <USB_EPStartXfer>

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	7912      	ldrb	r2, [r2, #4]
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e04f      	b.n	8003544 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	da0f      	bge.n	80034cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 020f 	and.w	r2, r3, #15
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	3310      	adds	r3, #16
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	3304      	adds	r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	705a      	strb	r2, [r3, #1]
 80034ca:	e00d      	b.n	80034e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	4613      	mov	r3, r2
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	4413      	add	r3, r2
 80034de:	3304      	adds	r3, #4
 80034e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	f003 030f 	and.w	r3, r3, #15
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_PCD_EP_SetStall+0x82>
 8003504:	2302      	movs	r3, #2
 8003506:	e01d      	b.n	8003544 <HAL_PCD_EP_SetStall+0xbe>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68f9      	ldr	r1, [r7, #12]
 8003516:	4618      	mov	r0, r3
 8003518:	f003 f85e 	bl	80065d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	7999      	ldrb	r1, [r3, #6]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003534:	461a      	mov	r2, r3
 8003536:	f003 fa4f 	bl	80069d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	7912      	ldrb	r2, [r2, #4]
 8003562:	4293      	cmp	r3, r2
 8003564:	d901      	bls.n	800356a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e042      	b.n	80035f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800356a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800356e:	2b00      	cmp	r3, #0
 8003570:	da0f      	bge.n	8003592 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	f003 020f 	and.w	r2, r3, #15
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	3310      	adds	r3, #16
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	4413      	add	r3, r2
 8003586:	3304      	adds	r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	705a      	strb	r2, [r3, #1]
 8003590:	e00f      	b.n	80035b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	f003 020f 	and.w	r2, r3, #15
 8003598:	4613      	mov	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	3304      	adds	r3, #4
 80035aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_PCD_EP_ClrStall+0x86>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e00e      	b.n	80035f0 <HAL_PCD_EP_ClrStall+0xa4>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f003 f867 	bl	80066b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003608:	2b00      	cmp	r3, #0
 800360a:	da0c      	bge.n	8003626 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	4413      	add	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	3310      	adds	r3, #16
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	3304      	adds	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	e00c      	b.n	8003640 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	f003 020f 	and.w	r2, r3, #15
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	4413      	add	r3, r2
 800363c:	3304      	adds	r3, #4
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	4618      	mov	r0, r3
 8003648:	f002 fe86 	bl	8006358 <USB_EPStopXfer>
 800364c:	4603      	mov	r3, r0
 800364e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003650:	7afb      	ldrb	r3, [r7, #11]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b08a      	sub	sp, #40	@ 0x28
 800365e:	af02      	add	r7, sp, #8
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	3310      	adds	r3, #16
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	3304      	adds	r3, #4
 8003680:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	429a      	cmp	r2, r3
 800368c:	d901      	bls.n	8003692 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e06b      	b.n	800376a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691a      	ldr	r2, [r3, #16]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d902      	bls.n	80036ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3303      	adds	r3, #3
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036b6:	e02a      	b.n	800370e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d902      	bls.n	80036d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	3303      	adds	r3, #3
 80036d8:	089b      	lsrs	r3, r3, #2
 80036da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68d9      	ldr	r1, [r3, #12]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	4603      	mov	r3, r0
 80036f0:	6978      	ldr	r0, [r7, #20]
 80036f2:	f002 fedb 	bl	80064ac <USB_WritePacket>

    ep->xfer_buff  += len;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	441a      	add	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	441a      	add	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	429a      	cmp	r2, r3
 8003722:	d809      	bhi.n	8003738 <PCD_WriteEmptyTxFifo+0xde>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800372c:	429a      	cmp	r2, r3
 800372e:	d203      	bcs.n	8003738 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1bf      	bne.n	80036b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691a      	ldr	r2, [r3, #16]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	429a      	cmp	r2, r3
 8003742:	d811      	bhi.n	8003768 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	2201      	movs	r2, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	43db      	mvns	r3, r3
 800375e:	6939      	ldr	r1, [r7, #16]
 8003760:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003764:	4013      	ands	r3, r2
 8003766:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	333c      	adds	r3, #60	@ 0x3c
 800378c:	3304      	adds	r3, #4
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	015a      	lsls	r2, r3, #5
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	4413      	add	r3, r2
 800379a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	799b      	ldrb	r3, [r3, #6]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d17b      	bne.n	80038a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d015      	beq.n	80037e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	4a61      	ldr	r2, [pc, #388]	@ (800393c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	f240 80b9 	bls.w	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80b3 	beq.w	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d6:	461a      	mov	r2, r3
 80037d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037dc:	6093      	str	r3, [r2, #8]
 80037de:	e0a7      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d009      	beq.n	80037fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f6:	461a      	mov	r2, r3
 80037f8:	2320      	movs	r3, #32
 80037fa:	6093      	str	r3, [r2, #8]
 80037fc:	e098      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003804:	2b00      	cmp	r3, #0
 8003806:	f040 8093 	bne.w	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	4a4b      	ldr	r2, [pc, #300]	@ (800393c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d90f      	bls.n	8003832 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003828:	461a      	mov	r2, r3
 800382a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800382e:	6093      	str	r3, [r2, #8]
 8003830:	e07e      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	4613      	mov	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4413      	add	r3, r2
 8003844:	3304      	adds	r3, #4
 8003846:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	0159      	lsls	r1, r3, #5
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	440b      	add	r3, r1
 8003854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800385e:	1ad2      	subs	r2, r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d114      	bne.n	8003894 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800387c:	461a      	mov	r2, r3
 800387e:	2101      	movs	r1, #1
 8003880:	f003 f8aa 	bl	80069d8 <USB_EP0_OutStart>
 8003884:	e006      	b.n	8003894 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	441a      	add	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	4619      	mov	r1, r3
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f005 fb80 	bl	8008fa0 <HAL_PCD_DataOutStageCallback>
 80038a0:	e046      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4a26      	ldr	r2, [pc, #152]	@ (8003940 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d124      	bne.n	80038f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c0:	461a      	mov	r2, r3
 80038c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038c6:	6093      	str	r3, [r2, #8]
 80038c8:	e032      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038e0:	461a      	mov	r2, r3
 80038e2:	2320      	movs	r3, #32
 80038e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f005 fb57 	bl	8008fa0 <HAL_PCD_DataOutStageCallback>
 80038f2:	e01d      	b.n	8003930 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d114      	bne.n	8003924 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800391c:	461a      	mov	r2, r3
 800391e:	2100      	movs	r1, #0
 8003920:	f003 f85a 	bl	80069d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f005 fb38 	bl	8008fa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	4f54300a 	.word	0x4f54300a
 8003940:	4f54310a 	.word	0x4f54310a

08003944 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	333c      	adds	r3, #60	@ 0x3c
 800395c:	3304      	adds	r3, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4a15      	ldr	r2, [pc, #84]	@ (80039cc <PCD_EP_OutSetupPacket_int+0x88>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d90e      	bls.n	8003998 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003990:	461a      	mov	r2, r3
 8003992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003996:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f005 faef 	bl	8008f7c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a0a      	ldr	r2, [pc, #40]	@ (80039cc <PCD_EP_OutSetupPacket_int+0x88>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d90c      	bls.n	80039c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	799b      	ldrb	r3, [r3, #6]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d108      	bne.n	80039c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039b8:	461a      	mov	r2, r3
 80039ba:	2101      	movs	r1, #1
 80039bc:	f003 f80c 	bl	80069d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3718      	adds	r7, #24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	4f54300a 	.word	0x4f54300a

080039d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	70fb      	strb	r3, [r7, #3]
 80039dc:	4613      	mov	r3, r2
 80039de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039ee:	883b      	ldrh	r3, [r7, #0]
 80039f0:	0419      	lsls	r1, r3, #16
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80039fc:	e028      	b.n	8003a50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	4413      	add	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e00d      	b.n	8003a2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	3340      	adds	r3, #64	@ 0x40
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	0c1b      	lsrs	r3, r3, #16
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	4413      	add	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	73fb      	strb	r3, [r7, #15]
 8003a2e:	7bfa      	ldrb	r2, [r7, #15]
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d3ec      	bcc.n	8003a12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a38:	883b      	ldrh	r3, [r7, #0]
 8003a3a:	0418      	lsls	r0, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6819      	ldr	r1, [r3, #0]
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	4302      	orrs	r2, r0
 8003a48:	3340      	adds	r3, #64	@ 0x40
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e267      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d075      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ab6:	4b88      	ldr	r3, [pc, #544]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d00c      	beq.n	8003adc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac2:	4b85      	ldr	r3, [pc, #532]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d112      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ace:	4b82      	ldr	r3, [pc, #520]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d05b      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x108>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d157      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e242      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afc:	d106      	bne.n	8003b0c <HAL_RCC_OscConfig+0x74>
 8003afe:	4b76      	ldr	r3, [pc, #472]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a75      	ldr	r2, [pc, #468]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e01d      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x98>
 8003b16:	4b70      	ldr	r3, [pc, #448]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6f      	ldr	r2, [pc, #444]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b6d      	ldr	r3, [pc, #436]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6c      	ldr	r2, [pc, #432]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b30:	4b69      	ldr	r3, [pc, #420]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a68      	ldr	r2, [pc, #416]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b66      	ldr	r3, [pc, #408]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a65      	ldr	r2, [pc, #404]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fe fa58 	bl	8002004 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fe fa54 	bl	8002004 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	@ 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e207      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0xc0>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe fa44 	bl	8002004 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fe fa40 	bl	8002004 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	@ 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e1f3      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b92:	4b51      	ldr	r3, [pc, #324]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0xe8>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d063      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bae:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bba:	4b47      	ldr	r3, [pc, #284]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d11c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b44      	ldr	r3, [pc, #272]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d116      	bne.n	8003c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd2:	4b41      	ldr	r3, [pc, #260]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_RCC_OscConfig+0x152>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e1c7      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bea:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4937      	ldr	r1, [pc, #220]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	e03a      	b.n	8003c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c08:	4b34      	ldr	r3, [pc, #208]	@ (8003cdc <HAL_RCC_OscConfig+0x244>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fe f9f9 	bl	8002004 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c16:	f7fe f9f5 	bl	8002004 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1a8      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c28:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4925      	ldr	r1, [pc, #148]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]
 8003c48:	e015      	b.n	8003c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4a:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCC_OscConfig+0x244>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe f9d8 	bl	8002004 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fe f9d4 	bl	8002004 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e187      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d036      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_RCC_OscConfig+0x248>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fe f9b8 	bl	8002004 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c98:	f7fe f9b4 	bl	8002004 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e167      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003caa:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x200>
 8003cb6:	e01b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb8:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <HAL_RCC_OscConfig+0x248>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbe:	f7fe f9a1 	bl	8002004 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc4:	e00e      	b.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fe f99d 	bl	8002004 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d907      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e150      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	42470000 	.word	0x42470000
 8003ce0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce4:	4b88      	ldr	r3, [pc, #544]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ea      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8097 	beq.w	8003e2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d02:	4b81      	ldr	r3, [pc, #516]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	4b7d      	ldr	r3, [pc, #500]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	4a7c      	ldr	r2, [pc, #496]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2e:	4b77      	ldr	r3, [pc, #476]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d118      	bne.n	8003d6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d3a:	4b74      	ldr	r3, [pc, #464]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a73      	ldr	r2, [pc, #460]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d46:	f7fe f95d 	bl	8002004 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fe f959 	bl	8002004 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e10c      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	4b6a      	ldr	r3, [pc, #424]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x2ea>
 8003d74:	4b64      	ldr	r3, [pc, #400]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d78:	4a63      	ldr	r2, [pc, #396]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d80:	e01c      	b.n	8003dbc <HAL_RCC_OscConfig+0x324>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x30c>
 8003d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	4a5e      	ldr	r2, [pc, #376]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d96:	4b5c      	ldr	r3, [pc, #368]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	4a5b      	ldr	r2, [pc, #364]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0x324>
 8003da4:	4b58      	ldr	r3, [pc, #352]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da8:	4a57      	ldr	r2, [pc, #348]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db0:	4b55      	ldr	r3, [pc, #340]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db4:	4a54      	ldr	r2, [pc, #336]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003db6:	f023 0304 	bic.w	r3, r3, #4
 8003dba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fe f91e 	bl	8002004 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fe f91a 	bl	8002004 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0cb      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de2:	4b49      	ldr	r3, [pc, #292]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0ee      	beq.n	8003dcc <HAL_RCC_OscConfig+0x334>
 8003dee:	e014      	b.n	8003e1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df0:	f7fe f908 	bl	8002004 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fe f904 	bl	8002004 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0b5      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ee      	bne.n	8003df8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e20:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	4a38      	ldr	r2, [pc, #224]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a1 	beq.w	8003f78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e36:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d05c      	beq.n	8003efc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d141      	bne.n	8003ece <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4a:	4b31      	ldr	r3, [pc, #196]	@ (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fe f8d8 	bl	8002004 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fe f8d4 	bl	8002004 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e087      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6a:	4b27      	ldr	r3, [pc, #156]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	019b      	lsls	r3, r3, #6
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	491b      	ldr	r1, [pc, #108]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fe f8ad 	bl	8002004 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fe f8a9 	bl	8002004 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e05c      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec0:	4b11      	ldr	r3, [pc, #68]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x416>
 8003ecc:	e054      	b.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ece:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f896 	bl	8002004 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fe f892 	bl	8002004 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e045      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x444>
 8003efa:	e03d      	b.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e038      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f14:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <HAL_RCC_OscConfig+0x4ec>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d028      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d121      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d11a      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d111      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800

08003f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0cc      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b68      	ldr	r3, [pc, #416]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d90c      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b65      	ldr	r3, [pc, #404]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b63      	ldr	r3, [pc, #396]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0b8      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fdc:	4b59      	ldr	r3, [pc, #356]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a58      	ldr	r2, [pc, #352]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff4:	4b53      	ldr	r3, [pc, #332]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b50      	ldr	r3, [pc, #320]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	494d      	ldr	r1, [pc, #308]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d044      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b47      	ldr	r3, [pc, #284]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d119      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e07f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d003      	beq.n	8004046 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004042:	2b03      	cmp	r3, #3
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b3f      	ldr	r3, [pc, #252]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	4b3b      	ldr	r3, [pc, #236]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e067      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004066:	4b37      	ldr	r3, [pc, #220]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4934      	ldr	r1, [pc, #208]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004078:	f7fd ffc4 	bl	8002004 <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7fd ffc0 	bl	8002004 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e04f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b2b      	ldr	r3, [pc, #172]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 020c 	and.w	r2, r3, #12
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1eb      	bne.n	8004080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a8:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d20c      	bcs.n	80040d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b22      	ldr	r3, [pc, #136]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b20      	ldr	r3, [pc, #128]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e032      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040dc:	4b19      	ldr	r3, [pc, #100]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4916      	ldr	r1, [pc, #88]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040fa:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	490e      	ldr	r1, [pc, #56]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800410e:	f000 f821 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004112:	4602      	mov	r2, r0
 8004114:	4b0b      	ldr	r3, [pc, #44]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	490a      	ldr	r1, [pc, #40]	@ (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 8004120:	5ccb      	ldrb	r3, [r1, r3]
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	4a09      	ldr	r2, [pc, #36]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800412a:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd ff24 	bl	8001f7c <HAL_InitTick>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023c00 	.word	0x40023c00
 8004144:	40023800 	.word	0x40023800
 8004148:	08009f74 	.word	0x08009f74
 800414c:	20000008 	.word	0x20000008
 8004150:	2000000c 	.word	0x2000000c

08004154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b090      	sub	sp, #64	@ 0x40
 800415a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800416c:	4b59      	ldr	r3, [pc, #356]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d00d      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x40>
 8004178:	2b08      	cmp	r3, #8
 800417a:	f200 80a1 	bhi.w	80042c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x34>
 8004182:	2b04      	cmp	r3, #4
 8004184:	d003      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x3a>
 8004186:	e09b      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4b53      	ldr	r3, [pc, #332]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800418a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800418c:	e09b      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418e:	4b53      	ldr	r3, [pc, #332]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x188>)
 8004190:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004192:	e098      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004194:	4b4f      	ldr	r3, [pc, #316]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800419c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419e:	4b4d      	ldr	r3, [pc, #308]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d028      	beq.n	80041fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b4a      	ldr	r3, [pc, #296]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	2200      	movs	r2, #0
 80041b2:	623b      	str	r3, [r7, #32]
 80041b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041bc:	2100      	movs	r1, #0
 80041be:	4b47      	ldr	r3, [pc, #284]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x188>)
 80041c0:	fb03 f201 	mul.w	r2, r3, r1
 80041c4:	2300      	movs	r3, #0
 80041c6:	fb00 f303 	mul.w	r3, r0, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	4a43      	ldr	r2, [pc, #268]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x188>)
 80041ce:	fba0 1202 	umull	r1, r2, r0, r2
 80041d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041d4:	460a      	mov	r2, r1
 80041d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041da:	4413      	add	r3, r2
 80041dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e0:	2200      	movs	r2, #0
 80041e2:	61bb      	str	r3, [r7, #24]
 80041e4:	61fa      	str	r2, [r7, #28]
 80041e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041ee:	f7fc fbb5 	bl	800095c <__aeabi_uldivmod>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4613      	mov	r3, r2
 80041f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041fa:	e053      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fc:	4b35      	ldr	r3, [pc, #212]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	2200      	movs	r2, #0
 8004204:	613b      	str	r3, [r7, #16]
 8004206:	617a      	str	r2, [r7, #20]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800420e:	f04f 0b00 	mov.w	fp, #0
 8004212:	4652      	mov	r2, sl
 8004214:	465b      	mov	r3, fp
 8004216:	f04f 0000 	mov.w	r0, #0
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	0159      	lsls	r1, r3, #5
 8004220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004224:	0150      	lsls	r0, r2, #5
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	ebb2 080a 	subs.w	r8, r2, sl
 800422e:	eb63 090b 	sbc.w	r9, r3, fp
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800423e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004242:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004246:	ebb2 0408 	subs.w	r4, r2, r8
 800424a:	eb63 0509 	sbc.w	r5, r3, r9
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	00eb      	lsls	r3, r5, #3
 8004258:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800425c:	00e2      	lsls	r2, r4, #3
 800425e:	4614      	mov	r4, r2
 8004260:	461d      	mov	r5, r3
 8004262:	eb14 030a 	adds.w	r3, r4, sl
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	eb45 030b 	adc.w	r3, r5, fp
 800426c:	607b      	str	r3, [r7, #4]
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	e9d7 4500 	ldrd	r4, r5, [r7]
 800427a:	4629      	mov	r1, r5
 800427c:	028b      	lsls	r3, r1, #10
 800427e:	4621      	mov	r1, r4
 8004280:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004284:	4621      	mov	r1, r4
 8004286:	028a      	lsls	r2, r1, #10
 8004288:	4610      	mov	r0, r2
 800428a:	4619      	mov	r1, r3
 800428c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428e:	2200      	movs	r2, #0
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	60fa      	str	r2, [r7, #12]
 8004294:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004298:	f7fc fb60 	bl	800095c <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4613      	mov	r3, r2
 80042a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	3301      	adds	r3, #1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042be:	e002      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80042c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3740      	adds	r7, #64	@ 0x40
 80042cc:	46bd      	mov	sp, r7
 80042ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
 80042d8:	00f42400 	.word	0x00f42400
 80042dc:	017d7840 	.word	0x017d7840

080042e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e4:	4b03      	ldr	r3, [pc, #12]	@ (80042f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000008 	.word	0x20000008

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042fc:	f7ff fff0 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b05      	ldr	r3, [pc, #20]	@ (8004318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	0a9b      	lsrs	r3, r3, #10
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4903      	ldr	r1, [pc, #12]	@ (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40023800 	.word	0x40023800
 800431c:	08009f84 	.word	0x08009f84

08004320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004324:	f7ff ffdc 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b05      	ldr	r3, [pc, #20]	@ (8004340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	0b5b      	lsrs	r3, r3, #13
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4903      	ldr	r1, [pc, #12]	@ (8004344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40023800 	.word	0x40023800
 8004344:	08009f84 	.word	0x08009f84

08004348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e041      	b.n	80043de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fd fb62 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3304      	adds	r3, #4
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f000 fbdc 	bl	8004b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e044      	b.n	800448a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1e      	ldr	r2, [pc, #120]	@ (8004498 <HAL_TIM_Base_Start_IT+0xb0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d018      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x6c>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442a:	d013      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x6c>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1a      	ldr	r2, [pc, #104]	@ (800449c <HAL_TIM_Base_Start_IT+0xb4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00e      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x6c>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a19      	ldr	r2, [pc, #100]	@ (80044a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d009      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x6c>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a17      	ldr	r2, [pc, #92]	@ (80044a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x6c>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d111      	bne.n	8004478 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2b06      	cmp	r3, #6
 8004464:	d010      	beq.n	8004488 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	e007      	b.n	8004488 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40014000 	.word	0x40014000

080044ac <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6a1a      	ldr	r2, [r3, #32]
 80044ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10f      	bne.n	80044f4 <HAL_TIM_Base_Stop_IT+0x48>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a1a      	ldr	r2, [r3, #32]
 80044da:	f240 4344 	movw	r3, #1092	@ 0x444
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_Base_Stop_IT+0x48>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e097      	b.n	800464e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fd fabe 	bl	8001ab4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6812      	ldr	r2, [r2, #0]
 800454a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800454e:	f023 0307 	bic.w	r3, r3, #7
 8004552:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f000 faf0 	bl	8004b44 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458c:	f023 0303 	bic.w	r3, r3, #3
 8004590:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	4313      	orrs	r3, r2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80045aa:	f023 030c 	bic.w	r3, r3, #12
 80045ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	021b      	lsls	r3, r3, #8
 80045c6:	4313      	orrs	r3, r2
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	011a      	lsls	r2, r3, #4
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	031b      	lsls	r3, r3, #12
 80045da:	4313      	orrs	r3, r2
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80045e8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80045f0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	4313      	orrs	r3, r2
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004666:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800466e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004676:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800467e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d110      	bne.n	80046a8 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004686:	7bfb      	ldrb	r3, [r7, #15]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d102      	bne.n	8004692 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800468c:	7b7b      	ldrb	r3, [r7, #13]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d001      	beq.n	8004696 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e069      	b.n	800476a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2202      	movs	r2, #2
 800469a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046a6:	e031      	b.n	800470c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d110      	bne.n	80046d0 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ae:	7bbb      	ldrb	r3, [r7, #14]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d102      	bne.n	80046ba <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046b4:	7b3b      	ldrb	r3, [r7, #12]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d001      	beq.n	80046be <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e055      	b.n	800476a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046ce:	e01d      	b.n	800470c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d108      	bne.n	80046e8 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d6:	7bbb      	ldrb	r3, [r7, #14]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d105      	bne.n	80046e8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046dc:	7b7b      	ldrb	r3, [r7, #13]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d102      	bne.n	80046e8 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046e2:	7b3b      	ldrb	r3, [r7, #12]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d001      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e03e      	b.n	800476a <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_TIM_Encoder_Start+0xc4>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b04      	cmp	r3, #4
 8004716:	d008      	beq.n	800472a <HAL_TIM_Encoder_Start+0xd4>
 8004718:	e00f      	b.n	800473a <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2201      	movs	r2, #1
 8004720:	2100      	movs	r1, #0
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fb34 	bl	8004d90 <TIM_CCxChannelCmd>
      break;
 8004728:	e016      	b.n	8004758 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2201      	movs	r2, #1
 8004730:	2104      	movs	r1, #4
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fb2c 	bl	8004d90 <TIM_CCxChannelCmd>
      break;
 8004738:	e00e      	b.n	8004758 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2201      	movs	r2, #1
 8004740:	2100      	movs	r1, #0
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fb24 	bl	8004d90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2201      	movs	r2, #1
 800474e:	2104      	movs	r1, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f000 fb1d 	bl	8004d90 <TIM_CCxChannelCmd>
      break;
 8004756:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d020      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01b      	beq.n	80047d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f06f 0202 	mvn.w	r2, #2
 80047a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f9a3 	bl	8004b08 <HAL_TIM_IC_CaptureCallback>
 80047c2:	e005      	b.n	80047d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f995 	bl	8004af4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f9a6 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d01b      	beq.n	8004822 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f06f 0204 	mvn.w	r2, #4
 80047f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f97d 	bl	8004b08 <HAL_TIM_IC_CaptureCallback>
 800480e:	e005      	b.n	800481c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f96f 	bl	8004af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f980 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d020      	beq.n	800486e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 0308 	and.w	r3, r3, #8
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01b      	beq.n	800486e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f06f 0208 	mvn.w	r2, #8
 800483e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2204      	movs	r2, #4
 8004844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f957 	bl	8004b08 <HAL_TIM_IC_CaptureCallback>
 800485a:	e005      	b.n	8004868 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f949 	bl	8004af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f95a 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f003 0310 	and.w	r3, r3, #16
 8004874:	2b00      	cmp	r3, #0
 8004876:	d020      	beq.n	80048ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b00      	cmp	r3, #0
 8004880:	d01b      	beq.n	80048ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f06f 0210 	mvn.w	r2, #16
 800488a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2208      	movs	r2, #8
 8004890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f931 	bl	8004b08 <HAL_TIM_IC_CaptureCallback>
 80048a6:	e005      	b.n	80048b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f923 	bl	8004af4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f934 	bl	8004b1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00c      	beq.n	80048de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f06f 0201 	mvn.w	r2, #1
 80048d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f901 	bl	8004ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00c      	beq.n	8004902 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80048fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 fae5 	bl	8004ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00c      	beq.n	8004926 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800491e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f905 	bl	8004b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00c      	beq.n	800494a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0220 	mvn.w	r2, #32
 8004942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 fab7 	bl	8004eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_TIM_ConfigClockSource+0x1c>
 800496a:	2302      	movs	r3, #2
 800496c:	e0b4      	b.n	8004ad8 <HAL_TIM_ConfigClockSource+0x186>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800498c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004994:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a6:	d03e      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0xd4>
 80049a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ac:	f200 8087 	bhi.w	8004abe <HAL_TIM_ConfigClockSource+0x16c>
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b4:	f000 8086 	beq.w	8004ac4 <HAL_TIM_ConfigClockSource+0x172>
 80049b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049bc:	d87f      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x16c>
 80049be:	2b70      	cmp	r3, #112	@ 0x70
 80049c0:	d01a      	beq.n	80049f8 <HAL_TIM_ConfigClockSource+0xa6>
 80049c2:	2b70      	cmp	r3, #112	@ 0x70
 80049c4:	d87b      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x16c>
 80049c6:	2b60      	cmp	r3, #96	@ 0x60
 80049c8:	d050      	beq.n	8004a6c <HAL_TIM_ConfigClockSource+0x11a>
 80049ca:	2b60      	cmp	r3, #96	@ 0x60
 80049cc:	d877      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x16c>
 80049ce:	2b50      	cmp	r3, #80	@ 0x50
 80049d0:	d03c      	beq.n	8004a4c <HAL_TIM_ConfigClockSource+0xfa>
 80049d2:	2b50      	cmp	r3, #80	@ 0x50
 80049d4:	d873      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x16c>
 80049d6:	2b40      	cmp	r3, #64	@ 0x40
 80049d8:	d058      	beq.n	8004a8c <HAL_TIM_ConfigClockSource+0x13a>
 80049da:	2b40      	cmp	r3, #64	@ 0x40
 80049dc:	d86f      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x16c>
 80049de:	2b30      	cmp	r3, #48	@ 0x30
 80049e0:	d064      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x15a>
 80049e2:	2b30      	cmp	r3, #48	@ 0x30
 80049e4:	d86b      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x16c>
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d060      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x15a>
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d867      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x16c>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d05c      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x15a>
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d05a      	beq.n	8004aac <HAL_TIM_ConfigClockSource+0x15a>
 80049f6:	e062      	b.n	8004abe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a08:	f000 f9a2 	bl	8004d50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004a1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	609a      	str	r2, [r3, #8]
      break;
 8004a24:	e04f      	b.n	8004ac6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a36:	f000 f98b 	bl	8004d50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004a48:	609a      	str	r2, [r3, #8]
      break;
 8004a4a:	e03c      	b.n	8004ac6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f000 f8ff 	bl	8004c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2150      	movs	r1, #80	@ 0x50
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 f958 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004a6a:	e02c      	b.n	8004ac6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a78:	461a      	mov	r2, r3
 8004a7a:	f000 f91e 	bl	8004cba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2160      	movs	r1, #96	@ 0x60
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 f948 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004a8a:	e01c      	b.n	8004ac6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f000 f8df 	bl	8004c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2140      	movs	r1, #64	@ 0x40
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f938 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004aaa:	e00c      	b.n	8004ac6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f000 f92f 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004abc:	e003      	b.n	8004ac6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac2:	e000      	b.n	8004ac6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ac4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a3a      	ldr	r2, [pc, #232]	@ (8004c40 <TIM_Base_SetConfig+0xfc>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b62:	d00b      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a37      	ldr	r2, [pc, #220]	@ (8004c44 <TIM_Base_SetConfig+0x100>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a36      	ldr	r2, [pc, #216]	@ (8004c48 <TIM_Base_SetConfig+0x104>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0x38>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a35      	ldr	r2, [pc, #212]	@ (8004c4c <TIM_Base_SetConfig+0x108>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d108      	bne.n	8004b8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a2b      	ldr	r2, [pc, #172]	@ (8004c40 <TIM_Base_SetConfig+0xfc>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d01b      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b9c:	d017      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a28      	ldr	r2, [pc, #160]	@ (8004c44 <TIM_Base_SetConfig+0x100>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d013      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a27      	ldr	r2, [pc, #156]	@ (8004c48 <TIM_Base_SetConfig+0x104>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d00f      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a26      	ldr	r2, [pc, #152]	@ (8004c4c <TIM_Base_SetConfig+0x108>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a25      	ldr	r2, [pc, #148]	@ (8004c50 <TIM_Base_SetConfig+0x10c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d007      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a24      	ldr	r2, [pc, #144]	@ (8004c54 <TIM_Base_SetConfig+0x110>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_Base_SetConfig+0x8a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a23      	ldr	r2, [pc, #140]	@ (8004c58 <TIM_Base_SetConfig+0x114>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d108      	bne.n	8004be0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a0e      	ldr	r2, [pc, #56]	@ (8004c40 <TIM_Base_SetConfig+0xfc>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d103      	bne.n	8004c14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d105      	bne.n	8004c32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f023 0201 	bic.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	611a      	str	r2, [r3, #16]
  }
}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40014000 	.word	0x40014000
 8004c54:	40014400 	.word	0x40014400
 8004c58:	40014800 	.word	0x40014800

08004c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	f023 0201 	bic.w	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f023 030a 	bic.w	r3, r3, #10
 8004c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	621a      	str	r2, [r3, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b087      	sub	sp, #28
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f023 0210 	bic.w	r2, r3, #16
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	031b      	lsls	r3, r3, #12
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	011b      	lsls	r3, r3, #4
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	621a      	str	r2, [r3, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f043 0307 	orr.w	r3, r3, #7
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	021a      	lsls	r2, r3, #8
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	bf00      	nop
 8004d86:	371c      	adds	r7, #28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 031f 	and.w	r3, r3, #31
 8004da2:	2201      	movs	r2, #1
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1a      	ldr	r2, [r3, #32]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	401a      	ands	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1a      	ldr	r2, [r3, #32]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	6879      	ldr	r1, [r7, #4]
 8004dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
	...

08004ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e050      	b.n	8004e96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e40:	d013      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a18      	ldr	r2, [pc, #96]	@ (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a15      	ldr	r2, [pc, #84]	@ (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a13      	ldr	r2, [pc, #76]	@ (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10c      	bne.n	8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40000400 	.word	0x40000400
 8004eac:	40000800 	.word	0x40000800
 8004eb0:	40000c00 	.word	0x40000c00
 8004eb4:	40014000 	.word	0x40014000

08004eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e042      	b.n	8004f78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fc fe1c 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2224      	movs	r2, #36	@ 0x24
 8004f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68da      	ldr	r2, [r3, #12]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f82b 	bl	8004f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691a      	ldr	r2, [r3, #16]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f84:	b0c0      	sub	sp, #256	@ 0x100
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	68d9      	ldr	r1, [r3, #12]
 8004f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	ea40 0301 	orr.w	r3, r0, r1
 8004fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fd8:	f021 010c 	bic.w	r1, r1, #12
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fe6:	430b      	orrs	r3, r1
 8004fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffa:	6999      	ldr	r1, [r3, #24]
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	ea40 0301 	orr.w	r3, r0, r1
 8005006:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b8f      	ldr	r3, [pc, #572]	@ (800524c <UART_SetConfig+0x2cc>)
 8005010:	429a      	cmp	r2, r3
 8005012:	d005      	beq.n	8005020 <UART_SetConfig+0xa0>
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b8d      	ldr	r3, [pc, #564]	@ (8005250 <UART_SetConfig+0x2d0>)
 800501c:	429a      	cmp	r2, r3
 800501e:	d104      	bne.n	800502a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005020:	f7ff f97e 	bl	8004320 <HAL_RCC_GetPCLK2Freq>
 8005024:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005028:	e003      	b.n	8005032 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800502a:	f7ff f965 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 800502e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800503c:	f040 810c 	bne.w	8005258 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005044:	2200      	movs	r2, #0
 8005046:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800504a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800504e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005052:	4622      	mov	r2, r4
 8005054:	462b      	mov	r3, r5
 8005056:	1891      	adds	r1, r2, r2
 8005058:	65b9      	str	r1, [r7, #88]	@ 0x58
 800505a:	415b      	adcs	r3, r3
 800505c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800505e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005062:	4621      	mov	r1, r4
 8005064:	eb12 0801 	adds.w	r8, r2, r1
 8005068:	4629      	mov	r1, r5
 800506a:	eb43 0901 	adc.w	r9, r3, r1
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800507a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800507e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005082:	4690      	mov	r8, r2
 8005084:	4699      	mov	r9, r3
 8005086:	4623      	mov	r3, r4
 8005088:	eb18 0303 	adds.w	r3, r8, r3
 800508c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005090:	462b      	mov	r3, r5
 8005092:	eb49 0303 	adc.w	r3, r9, r3
 8005096:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800509a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050ae:	460b      	mov	r3, r1
 80050b0:	18db      	adds	r3, r3, r3
 80050b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050b4:	4613      	mov	r3, r2
 80050b6:	eb42 0303 	adc.w	r3, r2, r3
 80050ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80050bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050c4:	f7fb fc4a 	bl	800095c <__aeabi_uldivmod>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4b61      	ldr	r3, [pc, #388]	@ (8005254 <UART_SetConfig+0x2d4>)
 80050ce:	fba3 2302 	umull	r2, r3, r3, r2
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	011c      	lsls	r4, r3, #4
 80050d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050e8:	4642      	mov	r2, r8
 80050ea:	464b      	mov	r3, r9
 80050ec:	1891      	adds	r1, r2, r2
 80050ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050f0:	415b      	adcs	r3, r3
 80050f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050f8:	4641      	mov	r1, r8
 80050fa:	eb12 0a01 	adds.w	sl, r2, r1
 80050fe:	4649      	mov	r1, r9
 8005100:	eb43 0b01 	adc.w	fp, r3, r1
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005110:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005118:	4692      	mov	sl, r2
 800511a:	469b      	mov	fp, r3
 800511c:	4643      	mov	r3, r8
 800511e:	eb1a 0303 	adds.w	r3, sl, r3
 8005122:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005126:	464b      	mov	r3, r9
 8005128:	eb4b 0303 	adc.w	r3, fp, r3
 800512c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800513c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005140:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005144:	460b      	mov	r3, r1
 8005146:	18db      	adds	r3, r3, r3
 8005148:	643b      	str	r3, [r7, #64]	@ 0x40
 800514a:	4613      	mov	r3, r2
 800514c:	eb42 0303 	adc.w	r3, r2, r3
 8005150:	647b      	str	r3, [r7, #68]	@ 0x44
 8005152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005156:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800515a:	f7fb fbff 	bl	800095c <__aeabi_uldivmod>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4611      	mov	r1, r2
 8005164:	4b3b      	ldr	r3, [pc, #236]	@ (8005254 <UART_SetConfig+0x2d4>)
 8005166:	fba3 2301 	umull	r2, r3, r3, r1
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	2264      	movs	r2, #100	@ 0x64
 800516e:	fb02 f303 	mul.w	r3, r2, r3
 8005172:	1acb      	subs	r3, r1, r3
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800517a:	4b36      	ldr	r3, [pc, #216]	@ (8005254 <UART_SetConfig+0x2d4>)
 800517c:	fba3 2302 	umull	r2, r3, r3, r2
 8005180:	095b      	lsrs	r3, r3, #5
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005188:	441c      	add	r4, r3
 800518a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800518e:	2200      	movs	r2, #0
 8005190:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005194:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005198:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800519c:	4642      	mov	r2, r8
 800519e:	464b      	mov	r3, r9
 80051a0:	1891      	adds	r1, r2, r2
 80051a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051a4:	415b      	adcs	r3, r3
 80051a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051ac:	4641      	mov	r1, r8
 80051ae:	1851      	adds	r1, r2, r1
 80051b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80051b2:	4649      	mov	r1, r9
 80051b4:	414b      	adcs	r3, r1
 80051b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b8:	f04f 0200 	mov.w	r2, #0
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051c4:	4659      	mov	r1, fp
 80051c6:	00cb      	lsls	r3, r1, #3
 80051c8:	4651      	mov	r1, sl
 80051ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ce:	4651      	mov	r1, sl
 80051d0:	00ca      	lsls	r2, r1, #3
 80051d2:	4610      	mov	r0, r2
 80051d4:	4619      	mov	r1, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	4642      	mov	r2, r8
 80051da:	189b      	adds	r3, r3, r2
 80051dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051e0:	464b      	mov	r3, r9
 80051e2:	460a      	mov	r2, r1
 80051e4:	eb42 0303 	adc.w	r3, r2, r3
 80051e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005200:	460b      	mov	r3, r1
 8005202:	18db      	adds	r3, r3, r3
 8005204:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005206:	4613      	mov	r3, r2
 8005208:	eb42 0303 	adc.w	r3, r2, r3
 800520c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005212:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005216:	f7fb fba1 	bl	800095c <__aeabi_uldivmod>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <UART_SetConfig+0x2d4>)
 8005220:	fba3 1302 	umull	r1, r3, r3, r2
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	2164      	movs	r1, #100	@ 0x64
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	3332      	adds	r3, #50	@ 0x32
 8005232:	4a08      	ldr	r2, [pc, #32]	@ (8005254 <UART_SetConfig+0x2d4>)
 8005234:	fba2 2303 	umull	r2, r3, r2, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	f003 0207 	and.w	r2, r3, #7
 800523e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4422      	add	r2, r4
 8005246:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005248:	e106      	b.n	8005458 <UART_SetConfig+0x4d8>
 800524a:	bf00      	nop
 800524c:	40011000 	.word	0x40011000
 8005250:	40011400 	.word	0x40011400
 8005254:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800525c:	2200      	movs	r2, #0
 800525e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005262:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005266:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800526a:	4642      	mov	r2, r8
 800526c:	464b      	mov	r3, r9
 800526e:	1891      	adds	r1, r2, r2
 8005270:	6239      	str	r1, [r7, #32]
 8005272:	415b      	adcs	r3, r3
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
 8005276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800527a:	4641      	mov	r1, r8
 800527c:	1854      	adds	r4, r2, r1
 800527e:	4649      	mov	r1, r9
 8005280:	eb43 0501 	adc.w	r5, r3, r1
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	00eb      	lsls	r3, r5, #3
 800528e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005292:	00e2      	lsls	r2, r4, #3
 8005294:	4614      	mov	r4, r2
 8005296:	461d      	mov	r5, r3
 8005298:	4643      	mov	r3, r8
 800529a:	18e3      	adds	r3, r4, r3
 800529c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052a0:	464b      	mov	r3, r9
 80052a2:	eb45 0303 	adc.w	r3, r5, r3
 80052a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052c6:	4629      	mov	r1, r5
 80052c8:	008b      	lsls	r3, r1, #2
 80052ca:	4621      	mov	r1, r4
 80052cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052d0:	4621      	mov	r1, r4
 80052d2:	008a      	lsls	r2, r1, #2
 80052d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052d8:	f7fb fb40 	bl	800095c <__aeabi_uldivmod>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4b60      	ldr	r3, [pc, #384]	@ (8005464 <UART_SetConfig+0x4e4>)
 80052e2:	fba3 2302 	umull	r2, r3, r3, r2
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	011c      	lsls	r4, r3, #4
 80052ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052fc:	4642      	mov	r2, r8
 80052fe:	464b      	mov	r3, r9
 8005300:	1891      	adds	r1, r2, r2
 8005302:	61b9      	str	r1, [r7, #24]
 8005304:	415b      	adcs	r3, r3
 8005306:	61fb      	str	r3, [r7, #28]
 8005308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800530c:	4641      	mov	r1, r8
 800530e:	1851      	adds	r1, r2, r1
 8005310:	6139      	str	r1, [r7, #16]
 8005312:	4649      	mov	r1, r9
 8005314:	414b      	adcs	r3, r1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005324:	4659      	mov	r1, fp
 8005326:	00cb      	lsls	r3, r1, #3
 8005328:	4651      	mov	r1, sl
 800532a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800532e:	4651      	mov	r1, sl
 8005330:	00ca      	lsls	r2, r1, #3
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	4603      	mov	r3, r0
 8005338:	4642      	mov	r2, r8
 800533a:	189b      	adds	r3, r3, r2
 800533c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005340:	464b      	mov	r3, r9
 8005342:	460a      	mov	r2, r1
 8005344:	eb42 0303 	adc.w	r3, r2, r3
 8005348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005356:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005364:	4649      	mov	r1, r9
 8005366:	008b      	lsls	r3, r1, #2
 8005368:	4641      	mov	r1, r8
 800536a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800536e:	4641      	mov	r1, r8
 8005370:	008a      	lsls	r2, r1, #2
 8005372:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005376:	f7fb faf1 	bl	800095c <__aeabi_uldivmod>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4611      	mov	r1, r2
 8005380:	4b38      	ldr	r3, [pc, #224]	@ (8005464 <UART_SetConfig+0x4e4>)
 8005382:	fba3 2301 	umull	r2, r3, r3, r1
 8005386:	095b      	lsrs	r3, r3, #5
 8005388:	2264      	movs	r2, #100	@ 0x64
 800538a:	fb02 f303 	mul.w	r3, r2, r3
 800538e:	1acb      	subs	r3, r1, r3
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	3332      	adds	r3, #50	@ 0x32
 8005394:	4a33      	ldr	r2, [pc, #204]	@ (8005464 <UART_SetConfig+0x4e4>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	095b      	lsrs	r3, r3, #5
 800539c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053a0:	441c      	add	r4, r3
 80053a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a6:	2200      	movs	r2, #0
 80053a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80053ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	1891      	adds	r1, r2, r2
 80053b6:	60b9      	str	r1, [r7, #8]
 80053b8:	415b      	adcs	r3, r3
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053c0:	4641      	mov	r1, r8
 80053c2:	1851      	adds	r1, r2, r1
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	4649      	mov	r1, r9
 80053c8:	414b      	adcs	r3, r1
 80053ca:	607b      	str	r3, [r7, #4]
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053d8:	4659      	mov	r1, fp
 80053da:	00cb      	lsls	r3, r1, #3
 80053dc:	4651      	mov	r1, sl
 80053de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053e2:	4651      	mov	r1, sl
 80053e4:	00ca      	lsls	r2, r1, #3
 80053e6:	4610      	mov	r0, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	4642      	mov	r2, r8
 80053ee:	189b      	adds	r3, r3, r2
 80053f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053f2:	464b      	mov	r3, r9
 80053f4:	460a      	mov	r2, r1
 80053f6:	eb42 0303 	adc.w	r3, r2, r3
 80053fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	663b      	str	r3, [r7, #96]	@ 0x60
 8005406:	667a      	str	r2, [r7, #100]	@ 0x64
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005414:	4649      	mov	r1, r9
 8005416:	008b      	lsls	r3, r1, #2
 8005418:	4641      	mov	r1, r8
 800541a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800541e:	4641      	mov	r1, r8
 8005420:	008a      	lsls	r2, r1, #2
 8005422:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005426:	f7fb fa99 	bl	800095c <__aeabi_uldivmod>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4b0d      	ldr	r3, [pc, #52]	@ (8005464 <UART_SetConfig+0x4e4>)
 8005430:	fba3 1302 	umull	r1, r3, r3, r2
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	2164      	movs	r1, #100	@ 0x64
 8005438:	fb01 f303 	mul.w	r3, r1, r3
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	3332      	adds	r3, #50	@ 0x32
 8005442:	4a08      	ldr	r2, [pc, #32]	@ (8005464 <UART_SetConfig+0x4e4>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	f003 020f 	and.w	r2, r3, #15
 800544e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4422      	add	r2, r4
 8005456:	609a      	str	r2, [r3, #8]
}
 8005458:	bf00      	nop
 800545a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800545e:	46bd      	mov	sp, r7
 8005460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005464:	51eb851f 	.word	0x51eb851f

08005468 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005468:	b084      	sub	sp, #16
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	f107 001c 	add.w	r0, r7, #28
 8005476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800547a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800547e:	2b01      	cmp	r3, #1
 8005480:	d123      	bne.n	80054ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005486:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005496:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d105      	bne.n	80054be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f001 fae8 	bl	8006a94 <USB_CoreReset>
 80054c4:	4603      	mov	r3, r0
 80054c6:	73fb      	strb	r3, [r7, #15]
 80054c8:	e01b      	b.n	8005502 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 fadc 	bl	8006a94 <USB_CoreReset>
 80054dc:	4603      	mov	r3, r0
 80054de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d106      	bne.n	80054f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80054f4:	e005      	b.n	8005502 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005502:	7fbb      	ldrb	r3, [r7, #30]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d10b      	bne.n	8005520 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f043 0206 	orr.w	r2, r3, #6
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f043 0220 	orr.w	r2, r3, #32
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800552c:	b004      	add	sp, #16
 800552e:	4770      	bx	lr

08005530 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	4613      	mov	r3, r2
 800553c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d165      	bne.n	8005610 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4a41      	ldr	r2, [pc, #260]	@ (800564c <USB_SetTurnaroundTime+0x11c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d906      	bls.n	800555a <USB_SetTurnaroundTime+0x2a>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4a40      	ldr	r2, [pc, #256]	@ (8005650 <USB_SetTurnaroundTime+0x120>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d202      	bcs.n	800555a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005554:	230f      	movs	r3, #15
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e062      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4a3c      	ldr	r2, [pc, #240]	@ (8005650 <USB_SetTurnaroundTime+0x120>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d306      	bcc.n	8005570 <USB_SetTurnaroundTime+0x40>
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4a3b      	ldr	r2, [pc, #236]	@ (8005654 <USB_SetTurnaroundTime+0x124>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d202      	bcs.n	8005570 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800556a:	230e      	movs	r3, #14
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	e057      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4a38      	ldr	r2, [pc, #224]	@ (8005654 <USB_SetTurnaroundTime+0x124>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d306      	bcc.n	8005586 <USB_SetTurnaroundTime+0x56>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a37      	ldr	r2, [pc, #220]	@ (8005658 <USB_SetTurnaroundTime+0x128>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d202      	bcs.n	8005586 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005580:	230d      	movs	r3, #13
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	e04c      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4a33      	ldr	r2, [pc, #204]	@ (8005658 <USB_SetTurnaroundTime+0x128>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d306      	bcc.n	800559c <USB_SetTurnaroundTime+0x6c>
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4a32      	ldr	r2, [pc, #200]	@ (800565c <USB_SetTurnaroundTime+0x12c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d802      	bhi.n	800559c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005596:	230c      	movs	r3, #12
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	e041      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4a2f      	ldr	r2, [pc, #188]	@ (800565c <USB_SetTurnaroundTime+0x12c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d906      	bls.n	80055b2 <USB_SetTurnaroundTime+0x82>
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005660 <USB_SetTurnaroundTime+0x130>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d802      	bhi.n	80055b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055ac:	230b      	movs	r3, #11
 80055ae:	617b      	str	r3, [r7, #20]
 80055b0:	e036      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005660 <USB_SetTurnaroundTime+0x130>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d906      	bls.n	80055c8 <USB_SetTurnaroundTime+0x98>
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a29      	ldr	r2, [pc, #164]	@ (8005664 <USB_SetTurnaroundTime+0x134>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d802      	bhi.n	80055c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055c2:	230a      	movs	r3, #10
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e02b      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	4a26      	ldr	r2, [pc, #152]	@ (8005664 <USB_SetTurnaroundTime+0x134>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d906      	bls.n	80055de <USB_SetTurnaroundTime+0xae>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a25      	ldr	r2, [pc, #148]	@ (8005668 <USB_SetTurnaroundTime+0x138>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d202      	bcs.n	80055de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055d8:	2309      	movs	r3, #9
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	e020      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	4a21      	ldr	r2, [pc, #132]	@ (8005668 <USB_SetTurnaroundTime+0x138>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d306      	bcc.n	80055f4 <USB_SetTurnaroundTime+0xc4>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4a20      	ldr	r2, [pc, #128]	@ (800566c <USB_SetTurnaroundTime+0x13c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d802      	bhi.n	80055f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055ee:	2308      	movs	r3, #8
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e015      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	4a1d      	ldr	r2, [pc, #116]	@ (800566c <USB_SetTurnaroundTime+0x13c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d906      	bls.n	800560a <USB_SetTurnaroundTime+0xda>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005670 <USB_SetTurnaroundTime+0x140>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d202      	bcs.n	800560a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005604:	2307      	movs	r3, #7
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e00a      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800560a:	2306      	movs	r3, #6
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	e007      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005610:	79fb      	ldrb	r3, [r7, #7]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d102      	bne.n	800561c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005616:	2309      	movs	r3, #9
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	e001      	b.n	8005620 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800561c:	2309      	movs	r3, #9
 800561e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	029b      	lsls	r3, r3, #10
 8005634:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005638:	431a      	orrs	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	00d8acbf 	.word	0x00d8acbf
 8005650:	00e4e1c0 	.word	0x00e4e1c0
 8005654:	00f42400 	.word	0x00f42400
 8005658:	01067380 	.word	0x01067380
 800565c:	011a499f 	.word	0x011a499f
 8005660:	01312cff 	.word	0x01312cff
 8005664:	014ca43f 	.word	0x014ca43f
 8005668:	016e3600 	.word	0x016e3600
 800566c:	01a6ab1f 	.word	0x01a6ab1f
 8005670:	01e84800 	.word	0x01e84800

08005674 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f043 0201 	orr.w	r2, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f023 0201 	bic.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d115      	bne.n	8005706 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056e6:	200a      	movs	r0, #10
 80056e8:	f7fc fc98 	bl	800201c <HAL_Delay>
      ms += 10U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	330a      	adds	r3, #10
 80056f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f001 f93f 	bl	8006976 <USB_GetMode>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d01e      	beq.n	800573c <USB_SetCurrentMode+0x84>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2bc7      	cmp	r3, #199	@ 0xc7
 8005702:	d9f0      	bls.n	80056e6 <USB_SetCurrentMode+0x2e>
 8005704:	e01a      	b.n	800573c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d115      	bne.n	8005738 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005718:	200a      	movs	r0, #10
 800571a:	f7fc fc7f 	bl	800201c <HAL_Delay>
      ms += 10U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	330a      	adds	r3, #10
 8005722:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 f926 	bl	8006976 <USB_GetMode>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <USB_SetCurrentMode+0x84>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2bc7      	cmp	r3, #199	@ 0xc7
 8005734:	d9f0      	bls.n	8005718 <USB_SetCurrentMode+0x60>
 8005736:	e001      	b.n	800573c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e005      	b.n	8005748 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005740:	d101      	bne.n	8005746 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005750:	b084      	sub	sp, #16
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800575e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	e009      	b.n	8005784 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	3340      	adds	r3, #64	@ 0x40
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	2200      	movs	r2, #0
 800577c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	3301      	adds	r3, #1
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b0e      	cmp	r3, #14
 8005788:	d9f2      	bls.n	8005770 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800578a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800578e:	2b00      	cmp	r3, #0
 8005790:	d11c      	bne.n	80057cc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057a0:	f043 0302 	orr.w	r3, r3, #2
 80057a4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80057ca:	e00b      	b.n	80057e4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057dc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057ea:	461a      	mov	r2, r3
 80057ec:	2300      	movs	r3, #0
 80057ee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057f0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d10d      	bne.n	8005814 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d104      	bne.n	800580a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005800:	2100      	movs	r1, #0
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f968 	bl	8005ad8 <USB_SetDevSpeed>
 8005808:	e008      	b.n	800581c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800580a:	2101      	movs	r1, #1
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f963 	bl	8005ad8 <USB_SetDevSpeed>
 8005812:	e003      	b.n	800581c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005814:	2103      	movs	r1, #3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f95e 	bl	8005ad8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800581c:	2110      	movs	r1, #16
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8fa 	bl	8005a18 <USB_FlushTxFifo>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f924 	bl	8005a7c <USB_FlushRxFifo>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005844:	461a      	mov	r2, r3
 8005846:	2300      	movs	r3, #0
 8005848:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005850:	461a      	mov	r2, r3
 8005852:	2300      	movs	r3, #0
 8005854:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800585c:	461a      	mov	r2, r3
 800585e:	2300      	movs	r3, #0
 8005860:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
 8005866:	e043      	b.n	80058f0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800587a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800587e:	d118      	bne.n	80058b2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005892:	461a      	mov	r2, r3
 8005894:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	e013      	b.n	80058c4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a8:	461a      	mov	r2, r3
 80058aa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	e008      	b.n	80058c4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058be:	461a      	mov	r2, r3
 80058c0:	2300      	movs	r3, #0
 80058c2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d0:	461a      	mov	r2, r3
 80058d2:	2300      	movs	r3, #0
 80058d4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e2:	461a      	mov	r2, r3
 80058e4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	3301      	adds	r3, #1
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058f4:	461a      	mov	r2, r3
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d3b5      	bcc.n	8005868 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	613b      	str	r3, [r7, #16]
 8005900:	e043      	b.n	800598a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005918:	d118      	bne.n	800594c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800592c:	461a      	mov	r2, r3
 800592e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	e013      	b.n	800595e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005942:	461a      	mov	r2, r3
 8005944:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e008      	b.n	800595e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005958:	461a      	mov	r2, r3
 800595a:	2300      	movs	r3, #0
 800595c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596a:	461a      	mov	r2, r3
 800596c:	2300      	movs	r3, #0
 800596e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597c:	461a      	mov	r2, r3
 800597e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005982:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	3301      	adds	r3, #1
 8005988:	613b      	str	r3, [r7, #16]
 800598a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800598e:	461a      	mov	r2, r3
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	4293      	cmp	r3, r2
 8005994:	d3b5      	bcc.n	8005902 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059a8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80059b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f043 0210 	orr.w	r2, r3, #16
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699a      	ldr	r2, [r3, #24]
 80059d0:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <USB_DevInit+0x2c4>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059d8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d005      	beq.n	80059ec <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f043 0208 	orr.w	r2, r3, #8
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d107      	bne.n	8005a04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059fc:	f043 0304 	orr.w	r3, r3, #4
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a10:	b004      	add	sp, #16
 8005a12:	4770      	bx	lr
 8005a14:	803c3800 	.word	0x803c3800

08005a18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a32:	d901      	bls.n	8005a38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e01b      	b.n	8005a70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	daf2      	bge.n	8005a26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	019b      	lsls	r3, r3, #6
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	3301      	adds	r3, #1
 8005a54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a5c:	d901      	bls.n	8005a62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e006      	b.n	8005a70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b20      	cmp	r3, #32
 8005a6c:	d0f0      	beq.n	8005a50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3714      	adds	r7, #20
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a94:	d901      	bls.n	8005a9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e018      	b.n	8005acc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	daf2      	bge.n	8005a88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ab8:	d901      	bls.n	8005abe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e006      	b.n	8005acc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d0f0      	beq.n	8005aac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	68f9      	ldr	r1, [r7, #12]
 8005af4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005af8:	4313      	orrs	r3, r2
 8005afa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b087      	sub	sp, #28
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0306 	and.w	r3, r3, #6
 8005b22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d102      	bne.n	8005b30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]
 8005b2e:	e00a      	b.n	8005b46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d002      	beq.n	8005b3c <USB_GetDevSpeed+0x32>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b06      	cmp	r3, #6
 8005b3a:	d102      	bne.n	8005b42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	75fb      	strb	r3, [r7, #23]
 8005b40:	e001      	b.n	8005b46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b42:	230f      	movs	r3, #15
 8005b44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d13a      	bne.n	8005be6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	2101      	movs	r1, #1
 8005b82:	fa01 f303 	lsl.w	r3, r1, r3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	68f9      	ldr	r1, [r7, #12]
 8005b8a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d155      	bne.n	8005c54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	791b      	ldrb	r3, [r3, #4]
 8005bc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	059b      	lsls	r3, r3, #22
 8005bca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	0151      	lsls	r1, r2, #5
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	440a      	add	r2, r1
 8005bd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	e036      	b.n	8005c54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bec:	69da      	ldr	r2, [r3, #28]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bfc:	041b      	lsls	r3, r3, #16
 8005bfe:	68f9      	ldr	r1, [r7, #12]
 8005c00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d11a      	bne.n	8005c54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	791b      	ldrb	r3, [r3, #4]
 8005c38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	0151      	lsls	r1, r2, #5
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	440a      	add	r2, r1
 8005c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
	...

08005c64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	785b      	ldrb	r3, [r3, #1]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d161      	bne.n	8005d44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c96:	d11f      	bne.n	8005cd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	0151      	lsls	r1, r2, #5
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	440a      	add	r2, r1
 8005cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005cb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	2101      	movs	r1, #1
 8005cea:	fa01 f303 	lsl.w	r3, r1, r3
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	f003 030f 	and.w	r3, r3, #15
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	43db      	mvns	r3, r3
 8005d16:	68f9      	ldr	r1, [r7, #12]
 8005d18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	0159      	lsls	r1, r3, #5
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	440b      	add	r3, r1
 8005d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	4b35      	ldr	r3, [pc, #212]	@ (8005e14 <USB_DeactivateEndpoint+0x1b0>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]
 8005d42:	e060      	b.n	8005e06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d5a:	d11f      	bne.n	8005d9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	2101      	movs	r1, #1
 8005dae:	fa01 f303 	lsl.w	r3, r1, r3
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	43db      	mvns	r3, r3
 8005db6:	68f9      	ldr	r1, [r7, #12]
 8005db8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005de0:	4013      	ands	r3, r2
 8005de2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	0159      	lsls	r1, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	440b      	add	r3, r1
 8005dfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <USB_DeactivateEndpoint+0x1b4>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	ec337800 	.word	0xec337800
 8005e18:	eff37800 	.word	0xeff37800

08005e1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b08a      	sub	sp, #40	@ 0x28
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	785b      	ldrb	r3, [r3, #1]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	f040 817f 	bne.w	800613c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d132      	bne.n	8005eac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e60:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e64:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	69fa      	ldr	r2, [r7, #28]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ea4:	0cdb      	lsrs	r3, r3, #19
 8005ea6:	04db      	lsls	r3, r3, #19
 8005ea8:	6113      	str	r3, [r2, #16]
 8005eaa:	e097      	b.n	8005fdc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	0151      	lsls	r1, r2, #5
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	440a      	add	r2, r1
 8005ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ec6:	0cdb      	lsrs	r3, r3, #19
 8005ec8:	04db      	lsls	r3, r3, #19
 8005eca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	0151      	lsls	r1, r2, #5
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	440a      	add	r2, r1
 8005ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ee6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005eea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005eee:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d11a      	bne.n	8005f2c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	691a      	ldr	r2, [r3, #16]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d903      	bls.n	8005f0a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f28:	6113      	str	r3, [r2, #16]
 8005f2a:	e044      	b.n	8005fb6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4413      	add	r3, r2
 8005f36:	1e5a      	subs	r2, r3, #1
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f40:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	8afb      	ldrh	r3, [r7, #22]
 8005f52:	04d9      	lsls	r1, r3, #19
 8005f54:	4ba4      	ldr	r3, [pc, #656]	@ (80061e8 <USB_EPStartXfer+0x3cc>)
 8005f56:	400b      	ands	r3, r1
 8005f58:	69b9      	ldr	r1, [r7, #24]
 8005f5a:	0148      	lsls	r0, r1, #5
 8005f5c:	69f9      	ldr	r1, [r7, #28]
 8005f5e:	4401      	add	r1, r0
 8005f60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005f64:	4313      	orrs	r3, r2
 8005f66:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	791b      	ldrb	r3, [r3, #4]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d122      	bne.n	8005fb6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f8a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005f8e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f9c:	691a      	ldr	r2, [r3, #16]
 8005f9e:	8afb      	ldrh	r3, [r7, #22]
 8005fa0:	075b      	lsls	r3, r3, #29
 8005fa2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	0148      	lsls	r0, r1, #5
 8005faa:	69f9      	ldr	r1, [r7, #28]
 8005fac:	4401      	add	r1, r0
 8005fae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fcc:	69b9      	ldr	r1, [r7, #24]
 8005fce:	0148      	lsls	r0, r1, #5
 8005fd0:	69f9      	ldr	r1, [r7, #28]
 8005fd2:	4401      	add	r1, r0
 8005fd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005fdc:	79fb      	ldrb	r3, [r7, #7]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d14b      	bne.n	800607a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	791b      	ldrb	r3, [r3, #4]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d128      	bne.n	8006058 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d110      	bne.n	8006038 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	015a      	lsls	r2, r3, #5
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	4413      	add	r3, r2
 800601e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	0151      	lsls	r1, r2, #5
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	440a      	add	r2, r1
 800602c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006030:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	e00f      	b.n	8006058 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	440a      	add	r2, r1
 800604e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006056:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006072:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	e166      	b.n	8006348 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	440a      	add	r2, r1
 8006090:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006094:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006098:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	791b      	ldrb	r3, [r3, #4]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d015      	beq.n	80060ce <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 814e 	beq.w	8006348 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	f003 030f 	and.w	r3, r3, #15
 80060bc:	2101      	movs	r1, #1
 80060be:	fa01 f303 	lsl.w	r3, r1, r3
 80060c2:	69f9      	ldr	r1, [r7, #28]
 80060c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060c8:	4313      	orrs	r3, r2
 80060ca:	634b      	str	r3, [r1, #52]	@ 0x34
 80060cc:	e13c      	b.n	8006348 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d110      	bne.n	8006100 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e00f      	b.n	8006120 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	69fa      	ldr	r2, [r7, #28]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800611a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800611e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68d9      	ldr	r1, [r3, #12]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	b298      	uxth	r0, r3
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	4603      	mov	r3, r0
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f9b9 	bl	80064ac <USB_WritePacket>
 800613a:	e105      	b.n	8006348 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006156:	0cdb      	lsrs	r3, r3, #19
 8006158:	04db      	lsls	r3, r3, #19
 800615a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006176:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800617a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800617e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d132      	bne.n	80061ec <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b4:	69b9      	ldr	r1, [r7, #24]
 80061b6:	0148      	lsls	r0, r1, #5
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	4401      	add	r1, r0
 80061bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80061c0:	4313      	orrs	r3, r2
 80061c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80061e2:	6113      	str	r3, [r2, #16]
 80061e4:	e062      	b.n	80062ac <USB_EPStartXfer+0x490>
 80061e6:	bf00      	nop
 80061e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d123      	bne.n	800623c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800620a:	69b9      	ldr	r1, [r7, #24]
 800620c:	0148      	lsls	r0, r1, #5
 800620e:	69f9      	ldr	r1, [r7, #28]
 8006210:	4401      	add	r1, r0
 8006212:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006216:	4313      	orrs	r3, r2
 8006218:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	0151      	lsls	r1, r2, #5
 800622c:	69fa      	ldr	r2, [r7, #28]
 800622e:	440a      	add	r2, r1
 8006230:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006234:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006238:	6113      	str	r3, [r2, #16]
 800623a:	e037      	b.n	80062ac <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	4413      	add	r3, r2
 8006246:	1e5a      	subs	r2, r3, #1
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006250:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	8afa      	ldrh	r2, [r7, #22]
 8006258:	fb03 f202 	mul.w	r2, r3, r2
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800626c:	691a      	ldr	r2, [r3, #16]
 800626e:	8afb      	ldrh	r3, [r7, #22]
 8006270:	04d9      	lsls	r1, r3, #19
 8006272:	4b38      	ldr	r3, [pc, #224]	@ (8006354 <USB_EPStartXfer+0x538>)
 8006274:	400b      	ands	r3, r1
 8006276:	69b9      	ldr	r1, [r7, #24]
 8006278:	0148      	lsls	r0, r1, #5
 800627a:	69f9      	ldr	r1, [r7, #28]
 800627c:	4401      	add	r1, r0
 800627e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006282:	4313      	orrs	r3, r2
 8006284:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	6a1b      	ldr	r3, [r3, #32]
 8006298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629c:	69b9      	ldr	r1, [r7, #24]
 800629e:	0148      	lsls	r0, r1, #5
 80062a0:	69f9      	ldr	r1, [r7, #28]
 80062a2:	4401      	add	r1, r0
 80062a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80062a8:	4313      	orrs	r3, r2
 80062aa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80062ac:	79fb      	ldrb	r3, [r7, #7]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10d      	bne.n	80062ce <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d009      	beq.n	80062ce <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	68d9      	ldr	r1, [r3, #12]
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ca:	460a      	mov	r2, r1
 80062cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	791b      	ldrb	r3, [r3, #4]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d128      	bne.n	8006328 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d110      	bne.n	8006308 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006300:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e00f      	b.n	8006328 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	0151      	lsls	r1, r2, #5
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	440a      	add	r2, r1
 800631e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006322:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006326:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	440a      	add	r2, r1
 800633e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006342:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006346:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3720      	adds	r7, #32
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	1ff80000 	.word	0x1ff80000

08006358 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	785b      	ldrb	r3, [r3, #1]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d14a      	bne.n	800640c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800638a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800638e:	f040 8086 	bne.w	800649e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	7812      	ldrb	r2, [r2, #0]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80063b4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	7812      	ldrb	r2, [r2, #0]
 80063ca:	0151      	lsls	r1, r2, #5
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	440a      	add	r2, r1
 80063d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	3301      	adds	r3, #1
 80063de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d902      	bls.n	80063f0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
          break;
 80063ee:	e056      	b.n	800649e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006408:	d0e7      	beq.n	80063da <USB_EPStopXfer+0x82>
 800640a:	e048      	b.n	800649e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006420:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006424:	d13b      	bne.n	800649e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	7812      	ldrb	r2, [r2, #0]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006444:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006448:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	7812      	ldrb	r2, [r2, #0]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006468:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800646c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3301      	adds	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f242 7210 	movw	r2, #10000	@ 0x2710
 800647a:	4293      	cmp	r3, r2
 800647c:	d902      	bls.n	8006484 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	75fb      	strb	r3, [r7, #23]
          break;
 8006482:	e00c      	b.n	800649e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006498:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800649c:	d0e7      	beq.n	800646e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	371c      	adds	r7, #28
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b089      	sub	sp, #36	@ 0x24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	4611      	mov	r1, r2
 80064b8:	461a      	mov	r2, r3
 80064ba:	460b      	mov	r3, r1
 80064bc:	71fb      	strb	r3, [r7, #7]
 80064be:	4613      	mov	r3, r2
 80064c0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80064ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d123      	bne.n	800651a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064d2:	88bb      	ldrh	r3, [r7, #4]
 80064d4:	3303      	adds	r3, #3
 80064d6:	089b      	lsrs	r3, r3, #2
 80064d8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064da:	2300      	movs	r3, #0
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	e018      	b.n	8006512 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064e0:	79fb      	ldrb	r3, [r7, #7]
 80064e2:	031a      	lsls	r2, r3, #12
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80064ec:	461a      	mov	r2, r3
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	3301      	adds	r3, #1
 80064fe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	3301      	adds	r3, #1
 8006504:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	3301      	adds	r3, #1
 800650a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	3301      	adds	r3, #1
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	429a      	cmp	r2, r3
 8006518:	d3e2      	bcc.n	80064e0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3724      	adds	r7, #36	@ 0x24
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006528:	b480      	push	{r7}
 800652a:	b08b      	sub	sp, #44	@ 0x2c
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	4613      	mov	r3, r2
 8006534:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800653e:	88fb      	ldrh	r3, [r7, #6]
 8006540:	089b      	lsrs	r3, r3, #2
 8006542:	b29b      	uxth	r3, r3
 8006544:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006546:	88fb      	ldrh	r3, [r7, #6]
 8006548:	f003 0303 	and.w	r3, r3, #3
 800654c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800654e:	2300      	movs	r3, #0
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	e014      	b.n	800657e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006562:	3301      	adds	r3, #1
 8006564:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	3301      	adds	r3, #1
 800656a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800656c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656e:	3301      	adds	r3, #1
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006574:	3301      	adds	r3, #1
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	3301      	adds	r3, #1
 800657c:	623b      	str	r3, [r7, #32]
 800657e:	6a3a      	ldr	r2, [r7, #32]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	429a      	cmp	r2, r3
 8006584:	d3e6      	bcc.n	8006554 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006586:	8bfb      	ldrh	r3, [r7, #30]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01e      	beq.n	80065ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006596:	461a      	mov	r2, r3
 8006598:	f107 0310 	add.w	r3, r7, #16
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	fa22 f303 	lsr.w	r3, r2, r3
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	701a      	strb	r2, [r3, #0]
      i++;
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	3301      	adds	r3, #1
 80065b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80065b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ba:	3301      	adds	r3, #1
 80065bc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80065be:	8bfb      	ldrh	r3, [r7, #30]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80065c4:	8bfb      	ldrh	r3, [r7, #30]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1ea      	bne.n	80065a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	372c      	adds	r7, #44	@ 0x2c
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d12c      	bne.n	800664e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	db12      	blt.n	800662c <USB_EPSetStall+0x54>
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00f      	beq.n	800662c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	015a      	lsls	r2, r3, #5
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	0151      	lsls	r1, r2, #5
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	440a      	add	r2, r1
 8006622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006626:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800662a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	0151      	lsls	r1, r2, #5
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	440a      	add	r2, r1
 8006642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006646:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e02b      	b.n	80066a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	db12      	blt.n	8006686 <USB_EPSetStall+0xae>
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00f      	beq.n	8006686 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	0151      	lsls	r1, r2, #5
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	440a      	add	r2, r1
 800667c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006680:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006684:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80066a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	785b      	ldrb	r3, [r3, #1]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d128      	bne.n	8006722 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	791b      	ldrb	r3, [r3, #4]
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d003      	beq.n	8006700 <USB_EPClearStall+0x4c>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	791b      	ldrb	r3, [r3, #4]
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d138      	bne.n	8006772 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800671a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	e027      	b.n	8006772 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	015a      	lsls	r2, r3, #5
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4413      	add	r3, r2
 800672a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	0151      	lsls	r1, r2, #5
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	440a      	add	r2, r1
 8006738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800673c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006740:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	791b      	ldrb	r3, [r3, #4]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d003      	beq.n	8006752 <USB_EPClearStall+0x9e>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	791b      	ldrb	r3, [r3, #4]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d10f      	bne.n	8006772 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	440a      	add	r2, r1
 8006768:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800676c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006770:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800679e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80067a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80067b4:	68f9      	ldr	r1, [r7, #12]
 80067b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067ba:	4313      	orrs	r3, r2
 80067bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3714      	adds	r7, #20
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80067e6:	f023 0303 	bic.w	r3, r3, #3
 80067ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067fa:	f023 0302 	bic.w	r3, r3, #2
 80067fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3714      	adds	r7, #20
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006828:	f023 0303 	bic.w	r3, r3, #3
 800682c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800683c:	f043 0302 	orr.w	r3, r3, #2
 8006840:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4013      	ands	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006868:	68fb      	ldr	r3, [r7, #12]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	4013      	ands	r3, r2
 8006898:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	0c1b      	lsrs	r3, r3, #16
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	4013      	ands	r3, r2
 80068cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	b29b      	uxth	r3, r3
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068de:	b480      	push	{r7}
 80068e0:	b085      	sub	sp, #20
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
 80068e6:	460b      	mov	r3, r1
 80068e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068ee:	78fb      	ldrb	r3, [r7, #3]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	4013      	ands	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800690c:	68bb      	ldr	r3, [r7, #8]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800691a:	b480      	push	{r7}
 800691c:	b087      	sub	sp, #28
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800693a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	fa22 f303 	lsr.w	r3, r2, r3
 800694a:	01db      	lsls	r3, r3, #7
 800694c:	b2db      	uxtb	r3, r3
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	015a      	lsls	r2, r3, #5
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	4413      	add	r3, r2
 800695c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4013      	ands	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006968:	68bb      	ldr	r3, [r7, #8]
}
 800696a:	4618      	mov	r0, r3
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f003 0301 	and.w	r3, r3, #1
}
 8006986:	4618      	mov	r0, r3
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006992:	b480      	push	{r7}
 8006994:	b085      	sub	sp, #20
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80069b0:	f023 0307 	bic.w	r3, r3, #7
 80069b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	460b      	mov	r3, r1
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	333c      	adds	r3, #60	@ 0x3c
 80069ee:	3304      	adds	r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4a26      	ldr	r2, [pc, #152]	@ (8006a90 <USB_EP0_OutStart+0xb8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d90a      	bls.n	8006a12 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a0c:	d101      	bne.n	8006a12 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	e037      	b.n	8006a82 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a18:	461a      	mov	r2, r3
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a2c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a40:	f043 0318 	orr.w	r3, r3, #24
 8006a44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a54:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006a58:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d10f      	bne.n	8006a80 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a66:	461a      	mov	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a7a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006a7e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	4f54300a 	.word	0x4f54300a

08006a94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006aac:	d901      	bls.n	8006ab2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e01b      	b.n	8006aea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	daf2      	bge.n	8006aa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f043 0201 	orr.w	r2, r3, #1
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	3301      	adds	r3, #1
 8006ace:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ad6:	d901      	bls.n	8006adc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e006      	b.n	8006aea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d0f0      	beq.n	8006aca <USB_CoreReset+0x36>

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
	...

08006af8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	460b      	mov	r3, r1
 8006b02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006b04:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006b08:	f002 fcaa 	bl	8009460 <USBD_static_malloc>
 8006b0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d109      	bne.n	8006b28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	32b0      	adds	r2, #176	@ 0xb0
 8006b1e:	2100      	movs	r1, #0
 8006b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006b24:	2302      	movs	r3, #2
 8006b26:	e0d4      	b.n	8006cd2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006b28:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f002 fcfa 	bl	8009528 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	32b0      	adds	r2, #176	@ 0xb0
 8006b3e:	68f9      	ldr	r1, [r7, #12]
 8006b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	32b0      	adds	r2, #176	@ 0xb0
 8006b4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	7c1b      	ldrb	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d138      	bne.n	8006bd2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006b60:	4b5e      	ldr	r3, [pc, #376]	@ (8006cdc <USBD_CDC_Init+0x1e4>)
 8006b62:	7819      	ldrb	r1, [r3, #0]
 8006b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b68:	2202      	movs	r2, #2
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f002 fb55 	bl	800921a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006b70:	4b5a      	ldr	r3, [pc, #360]	@ (8006cdc <USBD_CDC_Init+0x1e4>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 020f 	and.w	r2, r3, #15
 8006b78:	6879      	ldr	r1, [r7, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	3324      	adds	r3, #36	@ 0x24
 8006b86:	2201      	movs	r2, #1
 8006b88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006b8a:	4b55      	ldr	r3, [pc, #340]	@ (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006b8c:	7819      	ldrb	r1, [r3, #0]
 8006b8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b92:	2202      	movs	r2, #2
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f002 fb40 	bl	800921a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006b9a:	4b51      	ldr	r3, [pc, #324]	@ (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	f003 020f 	and.w	r2, r3, #15
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	440b      	add	r3, r1
 8006bae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006bb6:	4b4b      	ldr	r3, [pc, #300]	@ (8006ce4 <USBD_CDC_Init+0x1ec>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f003 020f 	and.w	r2, r3, #15
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	440b      	add	r3, r1
 8006bca:	3326      	adds	r3, #38	@ 0x26
 8006bcc:	2210      	movs	r2, #16
 8006bce:	801a      	strh	r2, [r3, #0]
 8006bd0:	e035      	b.n	8006c3e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006bd2:	4b42      	ldr	r3, [pc, #264]	@ (8006cdc <USBD_CDC_Init+0x1e4>)
 8006bd4:	7819      	ldrb	r1, [r3, #0]
 8006bd6:	2340      	movs	r3, #64	@ 0x40
 8006bd8:	2202      	movs	r2, #2
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f002 fb1d 	bl	800921a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006be0:	4b3e      	ldr	r3, [pc, #248]	@ (8006cdc <USBD_CDC_Init+0x1e4>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	f003 020f 	and.w	r2, r3, #15
 8006be8:	6879      	ldr	r1, [r7, #4]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	440b      	add	r3, r1
 8006bf4:	3324      	adds	r3, #36	@ 0x24
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006bfa:	4b39      	ldr	r3, [pc, #228]	@ (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006bfc:	7819      	ldrb	r1, [r3, #0]
 8006bfe:	2340      	movs	r3, #64	@ 0x40
 8006c00:	2202      	movs	r2, #2
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f002 fb09 	bl	800921a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006c08:	4b35      	ldr	r3, [pc, #212]	@ (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	f003 020f 	and.w	r2, r3, #15
 8006c10:	6879      	ldr	r1, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006c20:	2201      	movs	r2, #1
 8006c22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c24:	4b2f      	ldr	r3, [pc, #188]	@ (8006ce4 <USBD_CDC_Init+0x1ec>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	3326      	adds	r3, #38	@ 0x26
 8006c3a:	2210      	movs	r2, #16
 8006c3c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c3e:	4b29      	ldr	r3, [pc, #164]	@ (8006ce4 <USBD_CDC_Init+0x1ec>)
 8006c40:	7819      	ldrb	r1, [r3, #0]
 8006c42:	2308      	movs	r3, #8
 8006c44:	2203      	movs	r2, #3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f002 fae7 	bl	800921a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006c4c:	4b25      	ldr	r3, [pc, #148]	@ (8006ce4 <USBD_CDC_Init+0x1ec>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	f003 020f 	and.w	r2, r3, #15
 8006c54:	6879      	ldr	r1, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	3324      	adds	r3, #36	@ 0x24
 8006c62:	2201      	movs	r2, #1
 8006c64:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	33b0      	adds	r3, #176	@ 0xb0
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4413      	add	r3, r2
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	e018      	b.n	8006cd2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	7c1b      	ldrb	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006caa:	7819      	ldrb	r1, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 fb9e 	bl	80093f8 <USBD_LL_PrepareReceive>
 8006cbc:	e008      	b.n	8006cd0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cbe:	4b08      	ldr	r3, [pc, #32]	@ (8006ce0 <USBD_CDC_Init+0x1e8>)
 8006cc0:	7819      	ldrb	r1, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cc8:	2340      	movs	r3, #64	@ 0x40
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f002 fb94 	bl	80093f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	2000009b 	.word	0x2000009b
 8006ce0:	2000009c 	.word	0x2000009c
 8006ce4:	2000009d 	.word	0x2000009d

08006ce8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8006de0 <USBD_CDC_DeInit+0xf8>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f002 fab3 	bl	8009266 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006d00:	4b37      	ldr	r3, [pc, #220]	@ (8006de0 <USBD_CDC_DeInit+0xf8>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 020f 	and.w	r2, r3, #15
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	3324      	adds	r3, #36	@ 0x24
 8006d16:	2200      	movs	r2, #0
 8006d18:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006d1a:	4b32      	ldr	r3, [pc, #200]	@ (8006de4 <USBD_CDC_DeInit+0xfc>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f002 faa0 	bl	8009266 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006d26:	4b2f      	ldr	r3, [pc, #188]	@ (8006de4 <USBD_CDC_DeInit+0xfc>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	f003 020f 	and.w	r2, r3, #15
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	440b      	add	r3, r1
 8006d3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d3e:	2200      	movs	r2, #0
 8006d40:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006d42:	4b29      	ldr	r3, [pc, #164]	@ (8006de8 <USBD_CDC_DeInit+0x100>)
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f002 fa8c 	bl	8009266 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006d4e:	4b26      	ldr	r3, [pc, #152]	@ (8006de8 <USBD_CDC_DeInit+0x100>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	f003 020f 	and.w	r2, r3, #15
 8006d56:	6879      	ldr	r1, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	3324      	adds	r3, #36	@ 0x24
 8006d64:	2200      	movs	r2, #0
 8006d66:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006d68:	4b1f      	ldr	r3, [pc, #124]	@ (8006de8 <USBD_CDC_DeInit+0x100>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	f003 020f 	and.w	r2, r3, #15
 8006d70:	6879      	ldr	r1, [r7, #4]
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	3326      	adds	r3, #38	@ 0x26
 8006d7e:	2200      	movs	r2, #0
 8006d80:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	32b0      	adds	r2, #176	@ 0xb0
 8006d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01f      	beq.n	8006dd4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	33b0      	adds	r3, #176	@ 0xb0
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4413      	add	r3, r2
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	32b0      	adds	r2, #176	@ 0xb0
 8006db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f002 fb60 	bl	800947c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	32b0      	adds	r2, #176	@ 0xb0
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3708      	adds	r7, #8
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	2000009b 	.word	0x2000009b
 8006de4:	2000009c 	.word	0x2000009c
 8006de8:	2000009d 	.word	0x2000009d

08006dec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b086      	sub	sp, #24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	32b0      	adds	r2, #176	@ 0xb0
 8006e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e0bf      	b.n	8006f9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d050      	beq.n	8006eca <USBD_CDC_Setup+0xde>
 8006e28:	2b20      	cmp	r3, #32
 8006e2a:	f040 80af 	bne.w	8006f8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	88db      	ldrh	r3, [r3, #6]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d03a      	beq.n	8006eac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	b25b      	sxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	da1b      	bge.n	8006e78 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	33b0      	adds	r3, #176	@ 0xb0
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006e56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	88d2      	ldrh	r2, [r2, #6]
 8006e5c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	88db      	ldrh	r3, [r3, #6]
 8006e62:	2b07      	cmp	r3, #7
 8006e64:	bf28      	it	cs
 8006e66:	2307      	movcs	r3, #7
 8006e68:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	89fa      	ldrh	r2, [r7, #14]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fd93 	bl	800899c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006e76:	e090      	b.n	8006f9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	785a      	ldrb	r2, [r3, #1]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	88db      	ldrh	r3, [r3, #6]
 8006e86:	2b3f      	cmp	r3, #63	@ 0x3f
 8006e88:	d803      	bhi.n	8006e92 <USBD_CDC_Setup+0xa6>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	88db      	ldrh	r3, [r3, #6]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	e000      	b.n	8006e94 <USBD_CDC_Setup+0xa8>
 8006e92:	2240      	movs	r2, #64	@ 0x40
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006e9a:	6939      	ldr	r1, [r7, #16]
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fda5 	bl	80089f4 <USBD_CtlPrepareRx>
      break;
 8006eaa:	e076      	b.n	8006f9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	33b0      	adds	r3, #176	@ 0xb0
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	7850      	ldrb	r0, [r2, #1]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	4798      	blx	r3
      break;
 8006ec8:	e067      	b.n	8006f9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	2b0b      	cmp	r3, #11
 8006ed0:	d851      	bhi.n	8006f76 <USBD_CDC_Setup+0x18a>
 8006ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8006ed8 <USBD_CDC_Setup+0xec>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f85 	.word	0x08006f85
 8006ee0:	08006f77 	.word	0x08006f77
 8006ee4:	08006f77 	.word	0x08006f77
 8006ee8:	08006f77 	.word	0x08006f77
 8006eec:	08006f77 	.word	0x08006f77
 8006ef0:	08006f77 	.word	0x08006f77
 8006ef4:	08006f77 	.word	0x08006f77
 8006ef8:	08006f77 	.word	0x08006f77
 8006efc:	08006f77 	.word	0x08006f77
 8006f00:	08006f33 	.word	0x08006f33
 8006f04:	08006f5d 	.word	0x08006f5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d107      	bne.n	8006f24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f14:	f107 030a 	add.w	r3, r7, #10
 8006f18:	2202      	movs	r2, #2
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f001 fd3d 	bl	800899c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f22:	e032      	b.n	8006f8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fcbb 	bl	80088a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	75fb      	strb	r3, [r7, #23]
          break;
 8006f30:	e02b      	b.n	8006f8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d107      	bne.n	8006f4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f3e:	f107 030d 	add.w	r3, r7, #13
 8006f42:	2201      	movs	r2, #1
 8006f44:	4619      	mov	r1, r3
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f001 fd28 	bl	800899c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f4c:	e01d      	b.n	8006f8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 fca6 	bl	80088a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f56:	2303      	movs	r3, #3
 8006f58:	75fb      	strb	r3, [r7, #23]
          break;
 8006f5a:	e016      	b.n	8006f8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b03      	cmp	r3, #3
 8006f66:	d00f      	beq.n	8006f88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fc99 	bl	80088a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f70:	2303      	movs	r3, #3
 8006f72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f74:	e008      	b.n	8006f88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 fc92 	bl	80088a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	75fb      	strb	r3, [r7, #23]
          break;
 8006f82:	e002      	b.n	8006f8a <USBD_CDC_Setup+0x19e>
          break;
 8006f84:	bf00      	nop
 8006f86:	e008      	b.n	8006f9a <USBD_CDC_Setup+0x1ae>
          break;
 8006f88:	bf00      	nop
      }
      break;
 8006f8a:	e006      	b.n	8006f9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f001 fc87 	bl	80088a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	75fb      	strb	r3, [r7, #23]
      break;
 8006f98:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006fb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	32b0      	adds	r2, #176	@ 0xb0
 8006fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e065      	b.n	800709a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	32b0      	adds	r2, #176	@ 0xb0
 8006fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fdc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006fde:	78fb      	ldrb	r3, [r7, #3]
 8006fe0:	f003 020f 	and.w	r2, r3, #15
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	440b      	add	r3, r1
 8006ff0:	3318      	adds	r3, #24
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d02f      	beq.n	8007058 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	f003 020f 	and.w	r2, r3, #15
 8006ffe:	6879      	ldr	r1, [r7, #4]
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	440b      	add	r3, r1
 800700a:	3318      	adds	r3, #24
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	f003 010f 	and.w	r1, r3, #15
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	460b      	mov	r3, r1
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	440b      	add	r3, r1
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4403      	add	r3, r0
 8007020:	331c      	adds	r3, #28
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	fbb2 f1f3 	udiv	r1, r2, r3
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800702e:	2b00      	cmp	r3, #0
 8007030:	d112      	bne.n	8007058 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007032:	78fb      	ldrb	r3, [r7, #3]
 8007034:	f003 020f 	and.w	r2, r3, #15
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	4613      	mov	r3, r2
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	3318      	adds	r3, #24
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800704a:	78f9      	ldrb	r1, [r7, #3]
 800704c:	2300      	movs	r3, #0
 800704e:	2200      	movs	r2, #0
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f002 f9b0 	bl	80093b6 <USBD_LL_Transmit>
 8007056:	e01f      	b.n	8007098 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	33b0      	adds	r3, #176	@ 0xb0
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d010      	beq.n	8007098 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	33b0      	adds	r3, #176	@ 0xb0
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007094:	78fa      	ldrb	r2, [r7, #3]
 8007096:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	32b0      	adds	r2, #176	@ 0xb0
 80070b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	32b0      	adds	r2, #176	@ 0xb0
 80070c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e01a      	b.n	800710a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f002 f9ae 	bl	800943a <USBD_LL_GetRxDataSize>
 80070de:	4602      	mov	r2, r0
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	33b0      	adds	r3, #176	@ 0xb0
 80070f0:	009b      	lsls	r3, r3, #2
 80070f2:	4413      	add	r3, r2
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007104:	4611      	mov	r1, r2
 8007106:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	32b0      	adds	r2, #176	@ 0xb0
 8007124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007128:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007130:	2303      	movs	r3, #3
 8007132:	e024      	b.n	800717e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	33b0      	adds	r3, #176	@ 0xb0
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	4413      	add	r3, r2
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d019      	beq.n	800717c <USBD_CDC_EP0_RxReady+0x6a>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800714e:	2bff      	cmp	r3, #255	@ 0xff
 8007150:	d014      	beq.n	800717c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	33b0      	adds	r3, #176	@ 0xb0
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800716a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007172:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	22ff      	movs	r2, #255	@ 0xff
 8007178:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007190:	2182      	movs	r1, #130	@ 0x82
 8007192:	4818      	ldr	r0, [pc, #96]	@ (80071f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007194:	f000 fd4f 	bl	8007c36 <USBD_GetEpDesc>
 8007198:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800719a:	2101      	movs	r1, #1
 800719c:	4815      	ldr	r0, [pc, #84]	@ (80071f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800719e:	f000 fd4a 	bl	8007c36 <USBD_GetEpDesc>
 80071a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80071a4:	2181      	movs	r1, #129	@ 0x81
 80071a6:	4813      	ldr	r0, [pc, #76]	@ (80071f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80071a8:	f000 fd45 	bl	8007c36 <USBD_GetEpDesc>
 80071ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d002      	beq.n	80071ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2210      	movs	r2, #16
 80071b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d006      	beq.n	80071ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071c8:	711a      	strb	r2, [r3, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d006      	beq.n	80071e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071dc:	711a      	strb	r2, [r3, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2243      	movs	r2, #67	@ 0x43
 80071e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80071e8:	4b02      	ldr	r3, [pc, #8]	@ (80071f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000058 	.word	0x20000058

080071f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007200:	2182      	movs	r1, #130	@ 0x82
 8007202:	4818      	ldr	r0, [pc, #96]	@ (8007264 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007204:	f000 fd17 	bl	8007c36 <USBD_GetEpDesc>
 8007208:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800720a:	2101      	movs	r1, #1
 800720c:	4815      	ldr	r0, [pc, #84]	@ (8007264 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800720e:	f000 fd12 	bl	8007c36 <USBD_GetEpDesc>
 8007212:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007214:	2181      	movs	r1, #129	@ 0x81
 8007216:	4813      	ldr	r0, [pc, #76]	@ (8007264 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007218:	f000 fd0d 	bl	8007c36 <USBD_GetEpDesc>
 800721c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2210      	movs	r2, #16
 8007228:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d006      	beq.n	800723e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	2200      	movs	r2, #0
 8007234:	711a      	strb	r2, [r3, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f042 0202 	orr.w	r2, r2, #2
 800723c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d006      	beq.n	8007252 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	711a      	strb	r2, [r3, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f042 0202 	orr.w	r2, r2, #2
 8007250:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2243      	movs	r2, #67	@ 0x43
 8007256:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007258:	4b02      	ldr	r3, [pc, #8]	@ (8007264 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20000058 	.word	0x20000058

08007268 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007270:	2182      	movs	r1, #130	@ 0x82
 8007272:	4818      	ldr	r0, [pc, #96]	@ (80072d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007274:	f000 fcdf 	bl	8007c36 <USBD_GetEpDesc>
 8007278:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800727a:	2101      	movs	r1, #1
 800727c:	4815      	ldr	r0, [pc, #84]	@ (80072d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800727e:	f000 fcda 	bl	8007c36 <USBD_GetEpDesc>
 8007282:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007284:	2181      	movs	r1, #129	@ 0x81
 8007286:	4813      	ldr	r0, [pc, #76]	@ (80072d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007288:	f000 fcd5 	bl	8007c36 <USBD_GetEpDesc>
 800728c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2210      	movs	r2, #16
 8007298:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d006      	beq.n	80072ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072a8:	711a      	strb	r2, [r3, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d006      	beq.n	80072c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072bc:	711a      	strb	r2, [r3, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2243      	movs	r2, #67	@ 0x43
 80072c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80072c8:	4b02      	ldr	r3, [pc, #8]	@ (80072d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000058 	.word	0x20000058

080072d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	220a      	movs	r2, #10
 80072e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80072e6:	4b03      	ldr	r3, [pc, #12]	@ (80072f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	20000014 	.word	0x20000014

080072f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007308:	2303      	movs	r3, #3
 800730a:	e009      	b.n	8007320 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	33b0      	adds	r3, #176	@ 0xb0
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800731e:	2300      	movs	r3, #0
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	32b0      	adds	r2, #176	@ 0xb0
 8007342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007346:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800734e:	2303      	movs	r3, #3
 8007350:	e008      	b.n	8007364 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	32b0      	adds	r2, #176	@ 0xb0
 8007384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007388:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007390:	2303      	movs	r3, #3
 8007392:	e004      	b.n	800739e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
	...

080073ac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	32b0      	adds	r2, #176	@ 0xb0
 80073be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80073c4:	2301      	movs	r3, #1
 80073c6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e025      	b.n	800741e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d11f      	bne.n	800741c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2201      	movs	r2, #1
 80073e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80073e4:	4b10      	ldr	r3, [pc, #64]	@ (8007428 <USBD_CDC_TransmitPacket+0x7c>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f003 020f 	and.w	r2, r3, #15
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4613      	mov	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4403      	add	r3, r0
 80073fe:	3318      	adds	r3, #24
 8007400:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007402:	4b09      	ldr	r3, [pc, #36]	@ (8007428 <USBD_CDC_TransmitPacket+0x7c>)
 8007404:	7819      	ldrb	r1, [r3, #0]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f001 ffcf 	bl	80093b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	2000009b 	.word	0x2000009b

0800742c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	32b0      	adds	r2, #176	@ 0xb0
 800743e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007442:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	32b0      	adds	r2, #176	@ 0xb0
 800744e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007456:	2303      	movs	r3, #3
 8007458:	e018      	b.n	800748c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	7c1b      	ldrb	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007462:	4b0c      	ldr	r3, [pc, #48]	@ (8007494 <USBD_CDC_ReceivePacket+0x68>)
 8007464:	7819      	ldrb	r1, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800746c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 ffc1 	bl	80093f8 <USBD_LL_PrepareReceive>
 8007476:	e008      	b.n	800748a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007478:	4b06      	ldr	r3, [pc, #24]	@ (8007494 <USBD_CDC_ReceivePacket+0x68>)
 800747a:	7819      	ldrb	r1, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007482:	2340      	movs	r3, #64	@ 0x40
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 ffb7 	bl	80093f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	2000009c 	.word	0x2000009c

08007498 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	4613      	mov	r3, r2
 80074a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e01f      	b.n	80074f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2200      	movs	r2, #0
 80074b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d003      	beq.n	80074d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	79fa      	ldrb	r2, [r7, #7]
 80074e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f001 fe31 	bl	800914c <USBD_LL_Init>
 80074ea:	4603      	mov	r3, r0
 80074ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007502:	2300      	movs	r3, #0
 8007504:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800750c:	2303      	movs	r3, #3
 800750e:	e025      	b.n	800755c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	683a      	ldr	r2, [r7, #0]
 8007514:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	32ae      	adds	r2, #174	@ 0xae
 8007522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00f      	beq.n	800754c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	32ae      	adds	r2, #174	@ 0xae
 8007536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753c:	f107 020e 	add.w	r2, r7, #14
 8007540:	4610      	mov	r0, r2
 8007542:	4798      	blx	r3
 8007544:	4602      	mov	r2, r0
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 fe39 	bl	80091e4 <USBD_LL_Start>
 8007572:	4603      	mov	r3, r0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007584:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007586:	4618      	mov	r0, r3
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800759e:	2300      	movs	r3, #0
 80075a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d009      	beq.n	80075c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	4611      	mov	r1, r2
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
 80075bc:	4603      	mov	r3, r0
 80075be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	4611      	mov	r1, r2
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	4798      	blx	r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075f0:	2303      	movs	r3, #3
 80075f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f001 f90c 	bl	800882e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007624:	461a      	mov	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	2b02      	cmp	r3, #2
 8007638:	d01a      	beq.n	8007670 <USBD_LL_SetupStage+0x72>
 800763a:	2b02      	cmp	r3, #2
 800763c:	d822      	bhi.n	8007684 <USBD_LL_SetupStage+0x86>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <USBD_LL_SetupStage+0x4a>
 8007642:	2b01      	cmp	r3, #1
 8007644:	d00a      	beq.n	800765c <USBD_LL_SetupStage+0x5e>
 8007646:	e01d      	b.n	8007684 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fb63 	bl	8007d1c <USBD_StdDevReq>
 8007656:	4603      	mov	r3, r0
 8007658:	73fb      	strb	r3, [r7, #15]
      break;
 800765a:	e020      	b.n	800769e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fbcb 	bl	8007e00 <USBD_StdItfReq>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]
      break;
 800766e:	e016      	b.n	800769e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007676:	4619      	mov	r1, r3
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fc2d 	bl	8007ed8 <USBD_StdEPReq>
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]
      break;
 8007682:	e00c      	b.n	800769e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800768a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800768e:	b2db      	uxtb	r3, r3
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f001 fe06 	bl	80092a4 <USBD_LL_StallEP>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
      break;
 800769c:	bf00      	nop
  }

  return ret;
 800769e:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b086      	sub	sp, #24
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	460b      	mov	r3, r1
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d16e      	bne.n	800779e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80076c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076ce:	2b03      	cmp	r3, #3
 80076d0:	f040 8098 	bne.w	8007804 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d913      	bls.n	8007708 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	689a      	ldr	r2, [r3, #8]
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	1ad2      	subs	r2, r2, r3
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	4293      	cmp	r3, r2
 80076f8:	bf28      	it	cs
 80076fa:	4613      	movcs	r3, r2
 80076fc:	461a      	mov	r2, r3
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	68f8      	ldr	r0, [r7, #12]
 8007702:	f001 f994 	bl	8008a2e <USBD_CtlContinueRx>
 8007706:	e07d      	b.n	8007804 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800770e:	f003 031f 	and.w	r3, r3, #31
 8007712:	2b02      	cmp	r3, #2
 8007714:	d014      	beq.n	8007740 <USBD_LL_DataOutStage+0x98>
 8007716:	2b02      	cmp	r3, #2
 8007718:	d81d      	bhi.n	8007756 <USBD_LL_DataOutStage+0xae>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <USBD_LL_DataOutStage+0x7c>
 800771e:	2b01      	cmp	r3, #1
 8007720:	d003      	beq.n	800772a <USBD_LL_DataOutStage+0x82>
 8007722:	e018      	b.n	8007756 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007724:	2300      	movs	r3, #0
 8007726:	75bb      	strb	r3, [r7, #22]
            break;
 8007728:	e018      	b.n	800775c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007730:	b2db      	uxtb	r3, r3
 8007732:	4619      	mov	r1, r3
 8007734:	68f8      	ldr	r0, [r7, #12]
 8007736:	f000 fa64 	bl	8007c02 <USBD_CoreFindIF>
 800773a:	4603      	mov	r3, r0
 800773c:	75bb      	strb	r3, [r7, #22]
            break;
 800773e:	e00d      	b.n	800775c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007746:	b2db      	uxtb	r3, r3
 8007748:	4619      	mov	r1, r3
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 fa66 	bl	8007c1c <USBD_CoreFindEP>
 8007750:	4603      	mov	r3, r0
 8007752:	75bb      	strb	r3, [r7, #22]
            break;
 8007754:	e002      	b.n	800775c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	75bb      	strb	r3, [r7, #22]
            break;
 800775a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800775c:	7dbb      	ldrb	r3, [r7, #22]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d119      	bne.n	8007796 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b03      	cmp	r3, #3
 800776c:	d113      	bne.n	8007796 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800776e:	7dba      	ldrb	r2, [r7, #22]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	32ae      	adds	r2, #174	@ 0xae
 8007774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00b      	beq.n	8007796 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800777e:	7dba      	ldrb	r2, [r7, #22]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007786:	7dba      	ldrb	r2, [r7, #22]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	32ae      	adds	r2, #174	@ 0xae
 800778c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f001 f95a 	bl	8008a50 <USBD_CtlSendStatus>
 800779c:	e032      	b.n	8007804 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800779e:	7afb      	ldrb	r3, [r7, #11]
 80077a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	4619      	mov	r1, r3
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fa37 	bl	8007c1c <USBD_CoreFindEP>
 80077ae:	4603      	mov	r3, r0
 80077b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077b2:	7dbb      	ldrb	r3, [r7, #22]
 80077b4:	2bff      	cmp	r3, #255	@ 0xff
 80077b6:	d025      	beq.n	8007804 <USBD_LL_DataOutStage+0x15c>
 80077b8:	7dbb      	ldrb	r3, [r7, #22]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d122      	bne.n	8007804 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d117      	bne.n	80077fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80077ca:	7dba      	ldrb	r2, [r7, #22]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	32ae      	adds	r2, #174	@ 0xae
 80077d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00f      	beq.n	80077fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077da:	7dba      	ldrb	r2, [r7, #22]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077e2:	7dba      	ldrb	r2, [r7, #22]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	32ae      	adds	r2, #174	@ 0xae
 80077e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	7afa      	ldrb	r2, [r7, #11]
 80077f0:	4611      	mov	r1, r2
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	4798      	blx	r3
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d001      	beq.n	8007804 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007800:	7dfb      	ldrb	r3, [r7, #23]
 8007802:	e000      	b.n	8007806 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b086      	sub	sp, #24
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	460b      	mov	r3, r1
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800781c:	7afb      	ldrb	r3, [r7, #11]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d16f      	bne.n	8007902 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3314      	adds	r3, #20
 8007826:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800782e:	2b02      	cmp	r3, #2
 8007830:	d15a      	bne.n	80078e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	429a      	cmp	r2, r3
 800783c:	d914      	bls.n	8007868 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	1ad2      	subs	r2, r2, r3
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	461a      	mov	r2, r3
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f001 f8bc 	bl	80089d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800785a:	2300      	movs	r3, #0
 800785c:	2200      	movs	r2, #0
 800785e:	2100      	movs	r1, #0
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f001 fdc9 	bl	80093f8 <USBD_LL_PrepareReceive>
 8007866:	e03f      	b.n	80078e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	429a      	cmp	r2, r3
 8007872:	d11c      	bne.n	80078ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800787c:	429a      	cmp	r2, r3
 800787e:	d316      	bcc.n	80078ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800788a:	429a      	cmp	r2, r3
 800788c:	d20f      	bcs.n	80078ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800788e:	2200      	movs	r2, #0
 8007890:	2100      	movs	r1, #0
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f001 f89d 	bl	80089d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078a0:	2300      	movs	r3, #0
 80078a2:	2200      	movs	r2, #0
 80078a4:	2100      	movs	r1, #0
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f001 fda6 	bl	80093f8 <USBD_LL_PrepareReceive>
 80078ac:	e01c      	b.n	80078e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d10f      	bne.n	80078da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078da:	2180      	movs	r1, #128	@ 0x80
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f001 fce1 	bl	80092a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f001 f8c7 	bl	8008a76 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d03a      	beq.n	8007968 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078f2:	68f8      	ldr	r0, [r7, #12]
 80078f4:	f7ff fe42 	bl	800757c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007900:	e032      	b.n	8007968 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007902:	7afb      	ldrb	r3, [r7, #11]
 8007904:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007908:	b2db      	uxtb	r3, r3
 800790a:	4619      	mov	r1, r3
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f985 	bl	8007c1c <USBD_CoreFindEP>
 8007912:	4603      	mov	r3, r0
 8007914:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007916:	7dfb      	ldrb	r3, [r7, #23]
 8007918:	2bff      	cmp	r3, #255	@ 0xff
 800791a:	d025      	beq.n	8007968 <USBD_LL_DataInStage+0x15a>
 800791c:	7dfb      	ldrb	r3, [r7, #23]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d122      	bne.n	8007968 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b03      	cmp	r3, #3
 800792c:	d11c      	bne.n	8007968 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800792e:	7dfa      	ldrb	r2, [r7, #23]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	32ae      	adds	r2, #174	@ 0xae
 8007934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d014      	beq.n	8007968 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800793e:	7dfa      	ldrb	r2, [r7, #23]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007946:	7dfa      	ldrb	r2, [r7, #23]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	32ae      	adds	r2, #174	@ 0xae
 800794c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	7afa      	ldrb	r2, [r7, #11]
 8007954:	4611      	mov	r1, r2
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	4798      	blx	r3
 800795a:	4603      	mov	r3, r0
 800795c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800795e:	7dbb      	ldrb	r3, [r7, #22]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007964:	7dbb      	ldrb	r3, [r7, #22]
 8007966:	e000      	b.n	800796a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b084      	sub	sp, #16
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d014      	beq.n	80079d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00e      	beq.n	80079d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6852      	ldr	r2, [r2, #4]
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	4611      	mov	r1, r2
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079d8:	2340      	movs	r3, #64	@ 0x40
 80079da:	2200      	movs	r2, #0
 80079dc:	2100      	movs	r1, #0
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 fc1b 	bl	800921a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2240      	movs	r2, #64	@ 0x40
 80079f0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079f4:	2340      	movs	r3, #64	@ 0x40
 80079f6:	2200      	movs	r2, #0
 80079f8:	2180      	movs	r1, #128	@ 0x80
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 fc0d 	bl	800921a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2240      	movs	r2, #64	@ 0x40
 8007a0a:	621a      	str	r2, [r3, #32]

  return ret;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b083      	sub	sp, #12
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b04      	cmp	r3, #4
 8007a48:	d006      	beq.n	8007a58 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b083      	sub	sp, #12
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d106      	bne.n	8007a90 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b082      	sub	sp, #8
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d110      	bne.n	8007ad4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	32ae      	adds	r2, #174	@ 0xae
 8007af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e01c      	b.n	8007b3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d115      	bne.n	8007b38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	32ae      	adds	r2, #174	@ 0xae
 8007b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	32ae      	adds	r2, #174	@ 0xae
 8007b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	78fa      	ldrb	r2, [r7, #3]
 8007b32:	4611      	mov	r1, r2
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	32ae      	adds	r2, #174	@ 0xae
 8007b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e01c      	b.n	8007b9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d115      	bne.n	8007b9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	32ae      	adds	r2, #174	@ 0xae
 8007b7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	32ae      	adds	r2, #174	@ 0xae
 8007b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b94:	78fa      	ldrb	r2, [r7, #3]
 8007b96:	4611      	mov	r1, r2
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3708      	adds	r7, #8
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00e      	beq.n	8007bf8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6852      	ldr	r2, [r2, #4]
 8007be6:	b2d2      	uxtb	r2, r2
 8007be8:	4611      	mov	r1, r2
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007c28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b086      	sub	sp, #24
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	460b      	mov	r3, r1
 8007c40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	885b      	ldrh	r3, [r3, #2]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	7812      	ldrb	r2, [r2, #0]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d91f      	bls.n	8007c9c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c62:	e013      	b.n	8007c8c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c64:	f107 030a 	add.w	r3, r7, #10
 8007c68:	4619      	mov	r1, r3
 8007c6a:	6978      	ldr	r0, [r7, #20]
 8007c6c:	f000 f81b 	bl	8007ca6 <USBD_GetNextDesc>
 8007c70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	785b      	ldrb	r3, [r3, #1]
 8007c76:	2b05      	cmp	r3, #5
 8007c78:	d108      	bne.n	8007c8c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	789b      	ldrb	r3, [r3, #2]
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d008      	beq.n	8007c9a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	885b      	ldrh	r3, [r3, #2]
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	897b      	ldrh	r3, [r7, #10]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d8e5      	bhi.n	8007c64 <USBD_GetEpDesc+0x2e>
 8007c98:	e000      	b.n	8007c9c <USBD_GetEpDesc+0x66>
          break;
 8007c9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c9c:	693b      	ldr	r3, [r7, #16]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b085      	sub	sp, #20
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	7812      	ldrb	r2, [r2, #0]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4413      	add	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cfc:	8a3b      	ldrh	r3, [r7, #16]
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	b21a      	sxth	r2, r3
 8007d02:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	b21b      	sxth	r3, r3
 8007d0a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007d0c:	89fb      	ldrh	r3, [r7, #14]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
	...

08007d1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007d32:	2b40      	cmp	r3, #64	@ 0x40
 8007d34:	d005      	beq.n	8007d42 <USBD_StdDevReq+0x26>
 8007d36:	2b40      	cmp	r3, #64	@ 0x40
 8007d38:	d857      	bhi.n	8007dea <USBD_StdDevReq+0xce>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00f      	beq.n	8007d5e <USBD_StdDevReq+0x42>
 8007d3e:	2b20      	cmp	r3, #32
 8007d40:	d153      	bne.n	8007dea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	32ae      	adds	r2, #174	@ 0xae
 8007d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	4798      	blx	r3
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d5c:	e04a      	b.n	8007df4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	785b      	ldrb	r3, [r3, #1]
 8007d62:	2b09      	cmp	r3, #9
 8007d64:	d83b      	bhi.n	8007dde <USBD_StdDevReq+0xc2>
 8007d66:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <USBD_StdDevReq+0x50>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007dc1 	.word	0x08007dc1
 8007d70:	08007dd5 	.word	0x08007dd5
 8007d74:	08007ddf 	.word	0x08007ddf
 8007d78:	08007dcb 	.word	0x08007dcb
 8007d7c:	08007ddf 	.word	0x08007ddf
 8007d80:	08007d9f 	.word	0x08007d9f
 8007d84:	08007d95 	.word	0x08007d95
 8007d88:	08007ddf 	.word	0x08007ddf
 8007d8c:	08007db7 	.word	0x08007db7
 8007d90:	08007da9 	.word	0x08007da9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 fa3c 	bl	8008214 <USBD_GetDescriptor>
          break;
 8007d9c:	e024      	b.n	8007de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fba1 	bl	80084e8 <USBD_SetAddress>
          break;
 8007da6:	e01f      	b.n	8007de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fbe0 	bl	8008570 <USBD_SetConfig>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]
          break;
 8007db4:	e018      	b.n	8007de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 fc83 	bl	80086c4 <USBD_GetConfig>
          break;
 8007dbe:	e013      	b.n	8007de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fcb4 	bl	8008730 <USBD_GetStatus>
          break;
 8007dc8:	e00e      	b.n	8007de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fce3 	bl	8008798 <USBD_SetFeature>
          break;
 8007dd2:	e009      	b.n	8007de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fd07 	bl	80087ea <USBD_ClrFeature>
          break;
 8007ddc:	e004      	b.n	8007de8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fd5e 	bl	80088a2 <USBD_CtlError>
          break;
 8007de6:	bf00      	nop
      }
      break;
 8007de8:	e004      	b.n	8007df4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fd58 	bl	80088a2 <USBD_CtlError>
      break;
 8007df2:	bf00      	nop
  }

  return ret;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop

08007e00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e16:	2b40      	cmp	r3, #64	@ 0x40
 8007e18:	d005      	beq.n	8007e26 <USBD_StdItfReq+0x26>
 8007e1a:	2b40      	cmp	r3, #64	@ 0x40
 8007e1c:	d852      	bhi.n	8007ec4 <USBD_StdItfReq+0xc4>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <USBD_StdItfReq+0x26>
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d14e      	bne.n	8007ec4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d840      	bhi.n	8007eb6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	889b      	ldrh	r3, [r3, #4]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d836      	bhi.n	8007eac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	889b      	ldrh	r3, [r3, #4]
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff fedb 	bl	8007c02 <USBD_CoreFindIF>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
 8007e52:	2bff      	cmp	r3, #255	@ 0xff
 8007e54:	d01d      	beq.n	8007e92 <USBD_StdItfReq+0x92>
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d11a      	bne.n	8007e92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e5c:	7bba      	ldrb	r2, [r7, #14]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	32ae      	adds	r2, #174	@ 0xae
 8007e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00f      	beq.n	8007e8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e6c:	7bba      	ldrb	r2, [r7, #14]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e74:	7bba      	ldrb	r2, [r7, #14]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	32ae      	adds	r2, #174	@ 0xae
 8007e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	4798      	blx	r3
 8007e86:	4603      	mov	r3, r0
 8007e88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e8a:	e004      	b.n	8007e96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e90:	e001      	b.n	8007e96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e92:	2303      	movs	r3, #3
 8007e94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	88db      	ldrh	r3, [r3, #6]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d110      	bne.n	8007ec0 <USBD_StdItfReq+0xc0>
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10d      	bne.n	8007ec0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fdd3 	bl	8008a50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007eaa:	e009      	b.n	8007ec0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fcf7 	bl	80088a2 <USBD_CtlError>
          break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fcf2 	bl	80088a2 <USBD_CtlError>
          break;
 8007ebe:	e000      	b.n	8007ec2 <USBD_StdItfReq+0xc2>
          break;
 8007ec0:	bf00      	nop
      }
      break;
 8007ec2:	e004      	b.n	8007ece <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fceb 	bl	80088a2 <USBD_CtlError>
      break;
 8007ecc:	bf00      	nop
  }

  return ret;
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	889b      	ldrh	r3, [r3, #4]
 8007eea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ef4:	2b40      	cmp	r3, #64	@ 0x40
 8007ef6:	d007      	beq.n	8007f08 <USBD_StdEPReq+0x30>
 8007ef8:	2b40      	cmp	r3, #64	@ 0x40
 8007efa:	f200 817f 	bhi.w	80081fc <USBD_StdEPReq+0x324>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d02a      	beq.n	8007f58 <USBD_StdEPReq+0x80>
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	f040 817a 	bne.w	80081fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007f08:	7bbb      	ldrb	r3, [r7, #14]
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff fe85 	bl	8007c1c <USBD_CoreFindEP>
 8007f12:	4603      	mov	r3, r0
 8007f14:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f16:	7b7b      	ldrb	r3, [r7, #13]
 8007f18:	2bff      	cmp	r3, #255	@ 0xff
 8007f1a:	f000 8174 	beq.w	8008206 <USBD_StdEPReq+0x32e>
 8007f1e:	7b7b      	ldrb	r3, [r7, #13]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f040 8170 	bne.w	8008206 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007f26:	7b7a      	ldrb	r2, [r7, #13]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007f2e:	7b7a      	ldrb	r2, [r7, #13]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	32ae      	adds	r2, #174	@ 0xae
 8007f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f000 8163 	beq.w	8008206 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f40:	7b7a      	ldrb	r2, [r7, #13]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	32ae      	adds	r2, #174	@ 0xae
 8007f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	4798      	blx	r3
 8007f52:	4603      	mov	r3, r0
 8007f54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f56:	e156      	b.n	8008206 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	785b      	ldrb	r3, [r3, #1]
 8007f5c:	2b03      	cmp	r3, #3
 8007f5e:	d008      	beq.n	8007f72 <USBD_StdEPReq+0x9a>
 8007f60:	2b03      	cmp	r3, #3
 8007f62:	f300 8145 	bgt.w	80081f0 <USBD_StdEPReq+0x318>
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 809b 	beq.w	80080a2 <USBD_StdEPReq+0x1ca>
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d03c      	beq.n	8007fea <USBD_StdEPReq+0x112>
 8007f70:	e13e      	b.n	80081f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d002      	beq.n	8007f84 <USBD_StdEPReq+0xac>
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d016      	beq.n	8007fb0 <USBD_StdEPReq+0xd8>
 8007f82:	e02c      	b.n	8007fde <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00d      	beq.n	8007fa6 <USBD_StdEPReq+0xce>
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b80      	cmp	r3, #128	@ 0x80
 8007f8e:	d00a      	beq.n	8007fa6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f001 f985 	bl	80092a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f9a:	2180      	movs	r1, #128	@ 0x80
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f001 f981 	bl	80092a4 <USBD_LL_StallEP>
 8007fa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fa4:	e020      	b.n	8007fe8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fc7a 	bl	80088a2 <USBD_CtlError>
              break;
 8007fae:	e01b      	b.n	8007fe8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	885b      	ldrh	r3, [r3, #2]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10e      	bne.n	8007fd6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <USBD_StdEPReq+0xfe>
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b80      	cmp	r3, #128	@ 0x80
 8007fc2:	d008      	beq.n	8007fd6 <USBD_StdEPReq+0xfe>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	88db      	ldrh	r3, [r3, #6]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d104      	bne.n	8007fd6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fcc:	7bbb      	ldrb	r3, [r7, #14]
 8007fce:	4619      	mov	r1, r3
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 f967 	bl	80092a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fd3a 	bl	8008a50 <USBD_CtlSendStatus>

              break;
 8007fdc:	e004      	b.n	8007fe8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fc5e 	bl	80088a2 <USBD_CtlError>
              break;
 8007fe6:	bf00      	nop
          }
          break;
 8007fe8:	e107      	b.n	80081fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d002      	beq.n	8007ffc <USBD_StdEPReq+0x124>
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d016      	beq.n	8008028 <USBD_StdEPReq+0x150>
 8007ffa:	e04b      	b.n	8008094 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00d      	beq.n	800801e <USBD_StdEPReq+0x146>
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b80      	cmp	r3, #128	@ 0x80
 8008006:	d00a      	beq.n	800801e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f949 	bl	80092a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008012:	2180      	movs	r1, #128	@ 0x80
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f001 f945 	bl	80092a4 <USBD_LL_StallEP>
 800801a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800801c:	e040      	b.n	80080a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fc3e 	bl	80088a2 <USBD_CtlError>
              break;
 8008026:	e03b      	b.n	80080a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	885b      	ldrh	r3, [r3, #2]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d136      	bne.n	800809e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008030:	7bbb      	ldrb	r3, [r7, #14]
 8008032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008036:	2b00      	cmp	r3, #0
 8008038:	d004      	beq.n	8008044 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f001 f94f 	bl	80092e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fd03 	bl	8008a50 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800804a:	7bbb      	ldrb	r3, [r7, #14]
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff fde4 	bl	8007c1c <USBD_CoreFindEP>
 8008054:	4603      	mov	r3, r0
 8008056:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008058:	7b7b      	ldrb	r3, [r7, #13]
 800805a:	2bff      	cmp	r3, #255	@ 0xff
 800805c:	d01f      	beq.n	800809e <USBD_StdEPReq+0x1c6>
 800805e:	7b7b      	ldrb	r3, [r7, #13]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d11c      	bne.n	800809e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008064:	7b7a      	ldrb	r2, [r7, #13]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800806c:	7b7a      	ldrb	r2, [r7, #13]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	32ae      	adds	r2, #174	@ 0xae
 8008072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d010      	beq.n	800809e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800807c:	7b7a      	ldrb	r2, [r7, #13]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	32ae      	adds	r2, #174	@ 0xae
 8008082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	4798      	blx	r3
 800808e:	4603      	mov	r3, r0
 8008090:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008092:	e004      	b.n	800809e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fc03 	bl	80088a2 <USBD_CtlError>
              break;
 800809c:	e000      	b.n	80080a0 <USBD_StdEPReq+0x1c8>
              break;
 800809e:	bf00      	nop
          }
          break;
 80080a0:	e0ab      	b.n	80081fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d002      	beq.n	80080b4 <USBD_StdEPReq+0x1dc>
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d032      	beq.n	8008118 <USBD_StdEPReq+0x240>
 80080b2:	e097      	b.n	80081e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <USBD_StdEPReq+0x1f2>
 80080ba:	7bbb      	ldrb	r3, [r7, #14]
 80080bc:	2b80      	cmp	r3, #128	@ 0x80
 80080be:	d004      	beq.n	80080ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80080c0:	6839      	ldr	r1, [r7, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 fbed 	bl	80088a2 <USBD_CtlError>
                break;
 80080c8:	e091      	b.n	80081ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	da0b      	bge.n	80080ea <USBD_StdEPReq+0x212>
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	3310      	adds	r3, #16
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	4413      	add	r3, r2
 80080e6:	3304      	adds	r3, #4
 80080e8:	e00b      	b.n	8008102 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	4413      	add	r3, r2
 8008100:	3304      	adds	r3, #4
 8008102:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2202      	movs	r2, #2
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fc43 	bl	800899c <USBD_CtlSendData>
              break;
 8008116:	e06a      	b.n	80081ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800811c:	2b00      	cmp	r3, #0
 800811e:	da11      	bge.n	8008144 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	f003 020f 	and.w	r2, r3, #15
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	440b      	add	r3, r1
 8008132:	3324      	adds	r3, #36	@ 0x24
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d117      	bne.n	800816a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fbb0 	bl	80088a2 <USBD_CtlError>
                  break;
 8008142:	e054      	b.n	80081ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	f003 020f 	and.w	r2, r3, #15
 800814a:	6879      	ldr	r1, [r7, #4]
 800814c:	4613      	mov	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	440b      	add	r3, r1
 8008156:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d104      	bne.n	800816a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008160:	6839      	ldr	r1, [r7, #0]
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fb9d 	bl	80088a2 <USBD_CtlError>
                  break;
 8008168:	e041      	b.n	80081ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800816a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800816e:	2b00      	cmp	r3, #0
 8008170:	da0b      	bge.n	800818a <USBD_StdEPReq+0x2b2>
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008178:	4613      	mov	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	3310      	adds	r3, #16
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	4413      	add	r3, r2
 8008186:	3304      	adds	r3, #4
 8008188:	e00b      	b.n	80081a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008190:	4613      	mov	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4413      	add	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	4413      	add	r3, r2
 80081a0:	3304      	adds	r3, #4
 80081a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80081a4:	7bbb      	ldrb	r3, [r7, #14]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <USBD_StdEPReq+0x2d8>
 80081aa:	7bbb      	ldrb	r3, [r7, #14]
 80081ac:	2b80      	cmp	r3, #128	@ 0x80
 80081ae:	d103      	bne.n	80081b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	e00e      	b.n	80081d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	4619      	mov	r1, r3
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f001 f8af 	bl	8009320 <USBD_LL_IsStallEP>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2201      	movs	r2, #1
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e002      	b.n	80081d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2200      	movs	r2, #0
 80081d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2202      	movs	r2, #2
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fbdd 	bl	800899c <USBD_CtlSendData>
              break;
 80081e2:	e004      	b.n	80081ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081e4:	6839      	ldr	r1, [r7, #0]
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fb5b 	bl	80088a2 <USBD_CtlError>
              break;
 80081ec:	bf00      	nop
          }
          break;
 80081ee:	e004      	b.n	80081fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 fb55 	bl	80088a2 <USBD_CtlError>
          break;
 80081f8:	bf00      	nop
      }
      break;
 80081fa:	e005      	b.n	8008208 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081fc:	6839      	ldr	r1, [r7, #0]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fb4f 	bl	80088a2 <USBD_CtlError>
      break;
 8008204:	e000      	b.n	8008208 <USBD_StdEPReq+0x330>
      break;
 8008206:	bf00      	nop
  }

  return ret;
 8008208:	7bfb      	ldrb	r3, [r7, #15]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800821e:	2300      	movs	r3, #0
 8008220:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	885b      	ldrh	r3, [r3, #2]
 800822e:	0a1b      	lsrs	r3, r3, #8
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	2b06      	cmp	r3, #6
 8008236:	f200 8128 	bhi.w	800848a <USBD_GetDescriptor+0x276>
 800823a:	a201      	add	r2, pc, #4	@ (adr r2, 8008240 <USBD_GetDescriptor+0x2c>)
 800823c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008240:	0800825d 	.word	0x0800825d
 8008244:	08008275 	.word	0x08008275
 8008248:	080082b5 	.word	0x080082b5
 800824c:	0800848b 	.word	0x0800848b
 8008250:	0800848b 	.word	0x0800848b
 8008254:	0800842b 	.word	0x0800842b
 8008258:	08008457 	.word	0x08008457
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	7c12      	ldrb	r2, [r2, #16]
 8008268:	f107 0108 	add.w	r1, r7, #8
 800826c:	4610      	mov	r0, r2
 800826e:	4798      	blx	r3
 8008270:	60f8      	str	r0, [r7, #12]
      break;
 8008272:	e112      	b.n	800849a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	7c1b      	ldrb	r3, [r3, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10d      	bne.n	8008298 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008284:	f107 0208 	add.w	r2, r7, #8
 8008288:	4610      	mov	r0, r2
 800828a:	4798      	blx	r3
 800828c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3301      	adds	r3, #1
 8008292:	2202      	movs	r2, #2
 8008294:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008296:	e100      	b.n	800849a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800829e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a0:	f107 0208 	add.w	r2, r7, #8
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
 80082a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3301      	adds	r3, #1
 80082ae:	2202      	movs	r2, #2
 80082b0:	701a      	strb	r2, [r3, #0]
      break;
 80082b2:	e0f2      	b.n	800849a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	885b      	ldrh	r3, [r3, #2]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b05      	cmp	r3, #5
 80082bc:	f200 80ac 	bhi.w	8008418 <USBD_GetDescriptor+0x204>
 80082c0:	a201      	add	r2, pc, #4	@ (adr r2, 80082c8 <USBD_GetDescriptor+0xb4>)
 80082c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c6:	bf00      	nop
 80082c8:	080082e1 	.word	0x080082e1
 80082cc:	08008315 	.word	0x08008315
 80082d0:	08008349 	.word	0x08008349
 80082d4:	0800837d 	.word	0x0800837d
 80082d8:	080083b1 	.word	0x080083b1
 80082dc:	080083e5 	.word	0x080083e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00b      	beq.n	8008304 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	7c12      	ldrb	r2, [r2, #16]
 80082f8:	f107 0108 	add.w	r1, r7, #8
 80082fc:	4610      	mov	r0, r2
 80082fe:	4798      	blx	r3
 8008300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008302:	e091      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 facb 	bl	80088a2 <USBD_CtlError>
            err++;
 800830c:	7afb      	ldrb	r3, [r7, #11]
 800830e:	3301      	adds	r3, #1
 8008310:	72fb      	strb	r3, [r7, #11]
          break;
 8008312:	e089      	b.n	8008428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	7c12      	ldrb	r2, [r2, #16]
 800832c:	f107 0108 	add.w	r1, r7, #8
 8008330:	4610      	mov	r0, r2
 8008332:	4798      	blx	r3
 8008334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008336:	e077      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fab1 	bl	80088a2 <USBD_CtlError>
            err++;
 8008340:	7afb      	ldrb	r3, [r7, #11]
 8008342:	3301      	adds	r3, #1
 8008344:	72fb      	strb	r3, [r7, #11]
          break;
 8008346:	e06f      	b.n	8008428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	7c12      	ldrb	r2, [r2, #16]
 8008360:	f107 0108 	add.w	r1, r7, #8
 8008364:	4610      	mov	r0, r2
 8008366:	4798      	blx	r3
 8008368:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800836a:	e05d      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa97 	bl	80088a2 <USBD_CtlError>
            err++;
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	3301      	adds	r3, #1
 8008378:	72fb      	strb	r3, [r7, #11]
          break;
 800837a:	e055      	b.n	8008428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	7c12      	ldrb	r2, [r2, #16]
 8008394:	f107 0108 	add.w	r1, r7, #8
 8008398:	4610      	mov	r0, r2
 800839a:	4798      	blx	r3
 800839c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839e:	e043      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa7d 	bl	80088a2 <USBD_CtlError>
            err++;
 80083a8:	7afb      	ldrb	r3, [r7, #11]
 80083aa:	3301      	adds	r3, #1
 80083ac:	72fb      	strb	r3, [r7, #11]
          break;
 80083ae:	e03b      	b.n	8008428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083b6:	695b      	ldr	r3, [r3, #20]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00b      	beq.n	80083d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083c2:	695b      	ldr	r3, [r3, #20]
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	7c12      	ldrb	r2, [r2, #16]
 80083c8:	f107 0108 	add.w	r1, r7, #8
 80083cc:	4610      	mov	r0, r2
 80083ce:	4798      	blx	r3
 80083d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083d2:	e029      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa63 	bl	80088a2 <USBD_CtlError>
            err++;
 80083dc:	7afb      	ldrb	r3, [r7, #11]
 80083de:	3301      	adds	r3, #1
 80083e0:	72fb      	strb	r3, [r7, #11]
          break;
 80083e2:	e021      	b.n	8008428 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083ea:	699b      	ldr	r3, [r3, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00b      	beq.n	8008408 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7c12      	ldrb	r2, [r2, #16]
 80083fc:	f107 0108 	add.w	r1, r7, #8
 8008400:	4610      	mov	r0, r2
 8008402:	4798      	blx	r3
 8008404:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008406:	e00f      	b.n	8008428 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fa49 	bl	80088a2 <USBD_CtlError>
            err++;
 8008410:	7afb      	ldrb	r3, [r7, #11]
 8008412:	3301      	adds	r3, #1
 8008414:	72fb      	strb	r3, [r7, #11]
          break;
 8008416:	e007      	b.n	8008428 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa41 	bl	80088a2 <USBD_CtlError>
          err++;
 8008420:	7afb      	ldrb	r3, [r7, #11]
 8008422:	3301      	adds	r3, #1
 8008424:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008426:	bf00      	nop
      }
      break;
 8008428:	e037      	b.n	800849a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	7c1b      	ldrb	r3, [r3, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d109      	bne.n	8008446 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800843a:	f107 0208 	add.w	r2, r7, #8
 800843e:	4610      	mov	r0, r2
 8008440:	4798      	blx	r3
 8008442:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008444:	e029      	b.n	800849a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008446:	6839      	ldr	r1, [r7, #0]
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fa2a 	bl	80088a2 <USBD_CtlError>
        err++;
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	3301      	adds	r3, #1
 8008452:	72fb      	strb	r3, [r7, #11]
      break;
 8008454:	e021      	b.n	800849a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	7c1b      	ldrb	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10d      	bne.n	800847a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008466:	f107 0208 	add.w	r2, r7, #8
 800846a:	4610      	mov	r0, r2
 800846c:	4798      	blx	r3
 800846e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	3301      	adds	r3, #1
 8008474:	2207      	movs	r2, #7
 8008476:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008478:	e00f      	b.n	800849a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800847a:	6839      	ldr	r1, [r7, #0]
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fa10 	bl	80088a2 <USBD_CtlError>
        err++;
 8008482:	7afb      	ldrb	r3, [r7, #11]
 8008484:	3301      	adds	r3, #1
 8008486:	72fb      	strb	r3, [r7, #11]
      break;
 8008488:	e007      	b.n	800849a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fa08 	bl	80088a2 <USBD_CtlError>
      err++;
 8008492:	7afb      	ldrb	r3, [r7, #11]
 8008494:	3301      	adds	r3, #1
 8008496:	72fb      	strb	r3, [r7, #11]
      break;
 8008498:	bf00      	nop
  }

  if (err != 0U)
 800849a:	7afb      	ldrb	r3, [r7, #11]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d11e      	bne.n	80084de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	88db      	ldrh	r3, [r3, #6]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d016      	beq.n	80084d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80084a8:	893b      	ldrh	r3, [r7, #8]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00e      	beq.n	80084cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	88da      	ldrh	r2, [r3, #6]
 80084b2:	893b      	ldrh	r3, [r7, #8]
 80084b4:	4293      	cmp	r3, r2
 80084b6:	bf28      	it	cs
 80084b8:	4613      	movcs	r3, r2
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80084be:	893b      	ldrh	r3, [r7, #8]
 80084c0:	461a      	mov	r2, r3
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fa69 	bl	800899c <USBD_CtlSendData>
 80084ca:	e009      	b.n	80084e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f9e7 	bl	80088a2 <USBD_CtlError>
 80084d4:	e004      	b.n	80084e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 faba 	bl	8008a50 <USBD_CtlSendStatus>
 80084dc:	e000      	b.n	80084e0 <USBD_GetDescriptor+0x2cc>
    return;
 80084de:	bf00      	nop
  }
}
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop

080084e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	889b      	ldrh	r3, [r3, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d131      	bne.n	800855e <USBD_SetAddress+0x76>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	88db      	ldrh	r3, [r3, #6]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d12d      	bne.n	800855e <USBD_SetAddress+0x76>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	885b      	ldrh	r3, [r3, #2]
 8008506:	2b7f      	cmp	r3, #127	@ 0x7f
 8008508:	d829      	bhi.n	800855e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	885b      	ldrh	r3, [r3, #2]
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008514:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b03      	cmp	r3, #3
 8008520:	d104      	bne.n	800852c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f9bc 	bl	80088a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800852a:	e01d      	b.n	8008568 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	7bfa      	ldrb	r2, [r7, #15]
 8008530:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 ff1d 	bl	8009378 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fa86 	bl	8008a50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2202      	movs	r2, #2
 800854e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008552:	e009      	b.n	8008568 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800855c:	e004      	b.n	8008568 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f99e 	bl	80088a2 <USBD_CtlError>
  }
}
 8008566:	bf00      	nop
 8008568:	bf00      	nop
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	885b      	ldrh	r3, [r3, #2]
 8008582:	b2da      	uxtb	r2, r3
 8008584:	4b4e      	ldr	r3, [pc, #312]	@ (80086c0 <USBD_SetConfig+0x150>)
 8008586:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008588:	4b4d      	ldr	r3, [pc, #308]	@ (80086c0 <USBD_SetConfig+0x150>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d905      	bls.n	800859c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f985 	bl	80088a2 <USBD_CtlError>
    return USBD_FAIL;
 8008598:	2303      	movs	r3, #3
 800859a:	e08c      	b.n	80086b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d002      	beq.n	80085ae <USBD_SetConfig+0x3e>
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d029      	beq.n	8008600 <USBD_SetConfig+0x90>
 80085ac:	e075      	b.n	800869a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80085ae:	4b44      	ldr	r3, [pc, #272]	@ (80086c0 <USBD_SetConfig+0x150>)
 80085b0:	781b      	ldrb	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d020      	beq.n	80085f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80085b6:	4b42      	ldr	r3, [pc, #264]	@ (80086c0 <USBD_SetConfig+0x150>)
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80085c0:	4b3f      	ldr	r3, [pc, #252]	@ (80086c0 <USBD_SetConfig+0x150>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f7fe ffe3 	bl	8007592 <USBD_SetClassConfig>
 80085cc:	4603      	mov	r3, r0
 80085ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d008      	beq.n	80085e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	f000 f962 	bl	80088a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085e6:	e065      	b.n	80086b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fa31 	bl	8008a50 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2203      	movs	r2, #3
 80085f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80085f6:	e05d      	b.n	80086b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fa29 	bl	8008a50 <USBD_CtlSendStatus>
      break;
 80085fe:	e059      	b.n	80086b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008600:	4b2f      	ldr	r3, [pc, #188]	@ (80086c0 <USBD_SetConfig+0x150>)
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d112      	bne.n	800862e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008610:	4b2b      	ldr	r3, [pc, #172]	@ (80086c0 <USBD_SetConfig+0x150>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	461a      	mov	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800861a:	4b29      	ldr	r3, [pc, #164]	@ (80086c0 <USBD_SetConfig+0x150>)
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7fe ffd2 	bl	80075ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fa12 	bl	8008a50 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800862c:	e042      	b.n	80086b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800862e:	4b24      	ldr	r3, [pc, #144]	@ (80086c0 <USBD_SetConfig+0x150>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	429a      	cmp	r2, r3
 800863a:	d02a      	beq.n	8008692 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	b2db      	uxtb	r3, r3
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7fe ffc0 	bl	80075ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800864a:	4b1d      	ldr	r3, [pc, #116]	@ (80086c0 <USBD_SetConfig+0x150>)
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008654:	4b1a      	ldr	r3, [pc, #104]	@ (80086c0 <USBD_SetConfig+0x150>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	4619      	mov	r1, r3
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7fe ff99 	bl	8007592 <USBD_SetClassConfig>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00f      	beq.n	800868a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 f918 	bl	80088a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7fe ffa5 	bl	80075ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008688:	e014      	b.n	80086b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f9e0 	bl	8008a50 <USBD_CtlSendStatus>
      break;
 8008690:	e010      	b.n	80086b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f9dc 	bl	8008a50 <USBD_CtlSendStatus>
      break;
 8008698:	e00c      	b.n	80086b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f900 	bl	80088a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80086a2:	4b07      	ldr	r3, [pc, #28]	@ (80086c0 <USBD_SetConfig+0x150>)
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7fe ff8e 	bl	80075ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80086ae:	2303      	movs	r3, #3
 80086b0:	73fb      	strb	r3, [r7, #15]
      break;
 80086b2:	bf00      	nop
  }

  return ret;
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	200003b0 	.word	0x200003b0

080086c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	88db      	ldrh	r3, [r3, #6]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d004      	beq.n	80086e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f8e2 	bl	80088a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086de:	e023      	b.n	8008728 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	dc02      	bgt.n	80086f2 <USBD_GetConfig+0x2e>
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dc03      	bgt.n	80086f8 <USBD_GetConfig+0x34>
 80086f0:	e015      	b.n	800871e <USBD_GetConfig+0x5a>
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d00b      	beq.n	800870e <USBD_GetConfig+0x4a>
 80086f6:	e012      	b.n	800871e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	3308      	adds	r3, #8
 8008702:	2201      	movs	r2, #1
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 f948 	bl	800899c <USBD_CtlSendData>
        break;
 800870c:	e00c      	b.n	8008728 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3304      	adds	r3, #4
 8008712:	2201      	movs	r2, #1
 8008714:	4619      	mov	r1, r3
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f940 	bl	800899c <USBD_CtlSendData>
        break;
 800871c:	e004      	b.n	8008728 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f8be 	bl	80088a2 <USBD_CtlError>
        break;
 8008726:	bf00      	nop
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008740:	b2db      	uxtb	r3, r3
 8008742:	3b01      	subs	r3, #1
 8008744:	2b02      	cmp	r3, #2
 8008746:	d81e      	bhi.n	8008786 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	88db      	ldrh	r3, [r3, #6]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d004      	beq.n	800875a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f8a5 	bl	80088a2 <USBD_CtlError>
        break;
 8008758:	e01a      	b.n	8008790 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f043 0202 	orr.w	r2, r3, #2
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	330c      	adds	r3, #12
 800877a:	2202      	movs	r2, #2
 800877c:	4619      	mov	r1, r3
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f90c 	bl	800899c <USBD_CtlSendData>
      break;
 8008784:	e004      	b.n	8008790 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f88a 	bl	80088a2 <USBD_CtlError>
      break;
 800878e:	bf00      	nop
  }
}
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	885b      	ldrh	r3, [r3, #2]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d107      	bne.n	80087ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f94c 	bl	8008a50 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80087b8:	e013      	b.n	80087e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	885b      	ldrh	r3, [r3, #2]
 80087be:	2b02      	cmp	r3, #2
 80087c0:	d10b      	bne.n	80087da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	889b      	ldrh	r3, [r3, #4]
 80087c6:	0a1b      	lsrs	r3, r3, #8
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	b2da      	uxtb	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f93c 	bl	8008a50 <USBD_CtlSendStatus>
}
 80087d8:	e003      	b.n	80087e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f860 	bl	80088a2 <USBD_CtlError>
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
 80087f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	3b01      	subs	r3, #1
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d80b      	bhi.n	800881a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	885b      	ldrh	r3, [r3, #2]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d10c      	bne.n	8008824 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f91c 	bl	8008a50 <USBD_CtlSendStatus>
      }
      break;
 8008818:	e004      	b.n	8008824 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f840 	bl	80088a2 <USBD_CtlError>
      break;
 8008822:	e000      	b.n	8008826 <USBD_ClrFeature+0x3c>
      break;
 8008824:	bf00      	nop
  }
}
 8008826:	bf00      	nop
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	781a      	ldrb	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3301      	adds	r3, #1
 8008848:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	781a      	ldrb	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	3301      	adds	r3, #1
 8008856:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f7ff fa40 	bl	8007cde <SWAPBYTE>
 800885e:	4603      	mov	r3, r0
 8008860:	461a      	mov	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	3301      	adds	r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	3301      	adds	r3, #1
 8008870:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f7ff fa33 	bl	8007cde <SWAPBYTE>
 8008878:	4603      	mov	r3, r0
 800887a:	461a      	mov	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	3301      	adds	r3, #1
 8008884:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3301      	adds	r3, #1
 800888a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7ff fa26 	bl	8007cde <SWAPBYTE>
 8008892:	4603      	mov	r3, r0
 8008894:	461a      	mov	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	80da      	strh	r2, [r3, #6]
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ac:	2180      	movs	r1, #128	@ 0x80
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fcf8 	bl	80092a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80088b4:	2100      	movs	r1, #0
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fcf4 	bl	80092a4 <USBD_LL_StallEP>
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d042      	beq.n	8008960 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80088de:	6938      	ldr	r0, [r7, #16]
 80088e0:	f000 f842 	bl	8008968 <USBD_GetLen>
 80088e4:	4603      	mov	r3, r0
 80088e6:	3301      	adds	r3, #1
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ee:	d808      	bhi.n	8008902 <USBD_GetString+0x3e>
 80088f0:	6938      	ldr	r0, [r7, #16]
 80088f2:	f000 f839 	bl	8008968 <USBD_GetLen>
 80088f6:	4603      	mov	r3, r0
 80088f8:	3301      	adds	r3, #1
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	b29a      	uxth	r2, r3
 8008900:	e001      	b.n	8008906 <USBD_GetString+0x42>
 8008902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	4413      	add	r3, r2
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	7812      	ldrb	r2, [r2, #0]
 8008914:	701a      	strb	r2, [r3, #0]
  idx++;
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	3301      	adds	r3, #1
 800891a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800891c:	7dfb      	ldrb	r3, [r7, #23]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	4413      	add	r3, r2
 8008922:	2203      	movs	r2, #3
 8008924:	701a      	strb	r2, [r3, #0]
  idx++;
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	3301      	adds	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800892c:	e013      	b.n	8008956 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	4413      	add	r3, r2
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	7812      	ldrb	r2, [r2, #0]
 8008938:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	3301      	adds	r3, #1
 800893e:	613b      	str	r3, [r7, #16]
    idx++;
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	3301      	adds	r3, #1
 8008944:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008946:	7dfb      	ldrb	r3, [r7, #23]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	4413      	add	r3, r2
 800894c:	2200      	movs	r2, #0
 800894e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	3301      	adds	r3, #1
 8008954:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e7      	bne.n	800892e <USBD_GetString+0x6a>
 800895e:	e000      	b.n	8008962 <USBD_GetString+0x9e>
    return;
 8008960:	bf00      	nop
  }
}
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008978:	e005      	b.n	8008986 <USBD_GetLen+0x1e>
  {
    len++;
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	3301      	adds	r3, #1
 800897e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	3301      	adds	r3, #1
 8008984:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1f5      	bne.n	800897a <USBD_GetLen+0x12>
  }

  return len;
 800898e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3714      	adds	r7, #20
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	2100      	movs	r1, #0
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 fcf7 	bl	80093b6 <USBD_LL_Transmit>

  return USBD_OK;
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b084      	sub	sp, #16
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	2100      	movs	r1, #0
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f000 fce6 	bl	80093b6 <USBD_LL_Transmit>

  return USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2203      	movs	r2, #3
 8008a04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f000 fcea 	bl	80093f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	60f8      	str	r0, [r7, #12]
 8008a36:	60b9      	str	r1, [r7, #8]
 8008a38:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	2100      	movs	r1, #0
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fcd9 	bl	80093f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2204      	movs	r2, #4
 8008a5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008a60:	2300      	movs	r3, #0
 8008a62:	2200      	movs	r2, #0
 8008a64:	2100      	movs	r1, #0
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fca5 	bl	80093b6 <USBD_LL_Transmit>

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2205      	movs	r2, #5
 8008a82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a86:	2300      	movs	r3, #0
 8008a88:	2200      	movs	r2, #0
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fcb3 	bl	80093f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4912      	ldr	r1, [pc, #72]	@ (8008aec <MX_USB_DEVICE_Init+0x50>)
 8008aa4:	4812      	ldr	r0, [pc, #72]	@ (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008aa6:	f7fe fcf7 	bl	8007498 <USBD_Init>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ab0:	f7f8 ff94 	bl	80019dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ab4:	490f      	ldr	r1, [pc, #60]	@ (8008af4 <MX_USB_DEVICE_Init+0x58>)
 8008ab6:	480e      	ldr	r0, [pc, #56]	@ (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008ab8:	f7fe fd1e 	bl	80074f8 <USBD_RegisterClass>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008ac2:	f7f8 ff8b 	bl	80019dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008ac6:	490c      	ldr	r1, [pc, #48]	@ (8008af8 <MX_USB_DEVICE_Init+0x5c>)
 8008ac8:	4809      	ldr	r0, [pc, #36]	@ (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008aca:	f7fe fc15 	bl	80072f8 <USBD_CDC_RegisterInterface>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ad4:	f7f8 ff82 	bl	80019dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ad8:	4805      	ldr	r0, [pc, #20]	@ (8008af0 <MX_USB_DEVICE_Init+0x54>)
 8008ada:	f7fe fd43 	bl	8007564 <USBD_Start>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ae4:	f7f8 ff7a 	bl	80019dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ae8:	bf00      	nop
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	200000b4 	.word	0x200000b4
 8008af0:	200003b4 	.word	0x200003b4
 8008af4:	20000020 	.word	0x20000020
 8008af8:	200000a0 	.word	0x200000a0

08008afc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008b00:	2200      	movs	r2, #0
 8008b02:	4905      	ldr	r1, [pc, #20]	@ (8008b18 <CDC_Init_FS+0x1c>)
 8008b04:	4805      	ldr	r0, [pc, #20]	@ (8008b1c <CDC_Init_FS+0x20>)
 8008b06:	f7fe fc11 	bl	800732c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008b0a:	4905      	ldr	r1, [pc, #20]	@ (8008b20 <CDC_Init_FS+0x24>)
 8008b0c:	4803      	ldr	r0, [pc, #12]	@ (8008b1c <CDC_Init_FS+0x20>)
 8008b0e:	f7fe fc2f 	bl	8007370 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008b12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20000a90 	.word	0x20000a90
 8008b1c:	200003b4 	.word	0x200003b4
 8008b20:	20000690 	.word	0x20000690

08008b24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008b28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	71fb      	strb	r3, [r7, #7]
 8008b40:	4613      	mov	r3, r2
 8008b42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	2b23      	cmp	r3, #35	@ 0x23
 8008b48:	d84a      	bhi.n	8008be0 <CDC_Control_FS+0xac>
 8008b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b50 <CDC_Control_FS+0x1c>)
 8008b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b50:	08008be1 	.word	0x08008be1
 8008b54:	08008be1 	.word	0x08008be1
 8008b58:	08008be1 	.word	0x08008be1
 8008b5c:	08008be1 	.word	0x08008be1
 8008b60:	08008be1 	.word	0x08008be1
 8008b64:	08008be1 	.word	0x08008be1
 8008b68:	08008be1 	.word	0x08008be1
 8008b6c:	08008be1 	.word	0x08008be1
 8008b70:	08008be1 	.word	0x08008be1
 8008b74:	08008be1 	.word	0x08008be1
 8008b78:	08008be1 	.word	0x08008be1
 8008b7c:	08008be1 	.word	0x08008be1
 8008b80:	08008be1 	.word	0x08008be1
 8008b84:	08008be1 	.word	0x08008be1
 8008b88:	08008be1 	.word	0x08008be1
 8008b8c:	08008be1 	.word	0x08008be1
 8008b90:	08008be1 	.word	0x08008be1
 8008b94:	08008be1 	.word	0x08008be1
 8008b98:	08008be1 	.word	0x08008be1
 8008b9c:	08008be1 	.word	0x08008be1
 8008ba0:	08008be1 	.word	0x08008be1
 8008ba4:	08008be1 	.word	0x08008be1
 8008ba8:	08008be1 	.word	0x08008be1
 8008bac:	08008be1 	.word	0x08008be1
 8008bb0:	08008be1 	.word	0x08008be1
 8008bb4:	08008be1 	.word	0x08008be1
 8008bb8:	08008be1 	.word	0x08008be1
 8008bbc:	08008be1 	.word	0x08008be1
 8008bc0:	08008be1 	.word	0x08008be1
 8008bc4:	08008be1 	.word	0x08008be1
 8008bc8:	08008be1 	.word	0x08008be1
 8008bcc:	08008be1 	.word	0x08008be1
 8008bd0:	08008be1 	.word	0x08008be1
 8008bd4:	08008be1 	.word	0x08008be1
 8008bd8:	08008be1 	.word	0x08008be1
 8008bdc:	08008be1 	.word	0x08008be1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008be0:	bf00      	nop
  }

  return (USBD_OK);
 8008be2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008bfa:	6879      	ldr	r1, [r7, #4]
 8008bfc:	480f      	ldr	r0, [pc, #60]	@ (8008c3c <CDC_Receive_FS+0x4c>)
 8008bfe:	f7fe fbb7 	bl	8007370 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008c02:	480e      	ldr	r0, [pc, #56]	@ (8008c3c <CDC_Receive_FS+0x4c>)
 8008c04:	f7fe fc12 	bl	800742c <USBD_CDC_ReceivePacket>

	memset (buffer, '\0', 64);  // clear the buffer
 8008c08:	2240      	movs	r2, #64	@ 0x40
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	480c      	ldr	r0, [pc, #48]	@ (8008c40 <CDC_Receive_FS+0x50>)
 8008c0e:	f000 fc8b 	bl	8009528 <memset>
	uint8_t len = (uint8_t)*Len;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	73fb      	strb	r3, [r7, #15]
	memcpy(buffer, Buf, len);  // copy the data to the buffer
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	4808      	ldr	r0, [pc, #32]	@ (8008c40 <CDC_Receive_FS+0x50>)
 8008c20:	f000 fcb6 	bl	8009590 <memcpy>
	memset(Buf, '\0', len);   // clear the Buf also
 8008c24:	7bfb      	ldrb	r3, [r7, #15]
 8008c26:	461a      	mov	r2, r3
 8008c28:	2100      	movs	r1, #0
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fc7c 	bl	8009528 <memset>

	  return (USBD_OK);
 8008c30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	200003b4 	.word	0x200003b4
 8008c40:	20000290 	.word	0x20000290

08008c44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008c50:	2300      	movs	r3, #0
 8008c52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008c54:	4b0d      	ldr	r3, [pc, #52]	@ (8008c8c <CDC_Transmit_FS+0x48>)
 8008c56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008c5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d001      	beq.n	8008c6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e00b      	b.n	8008c82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008c6a:	887b      	ldrh	r3, [r7, #2]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	4806      	ldr	r0, [pc, #24]	@ (8008c8c <CDC_Transmit_FS+0x48>)
 8008c72:	f7fe fb5b 	bl	800732c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008c76:	4805      	ldr	r0, [pc, #20]	@ (8008c8c <CDC_Transmit_FS+0x48>)
 8008c78:	f7fe fb98 	bl	80073ac <USBD_CDC_TransmitPacket>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200003b4 	.word	0x200003b4

08008c90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	371c      	adds	r7, #28
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
	...

08008cb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	6039      	str	r1, [r7, #0]
 8008cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2212      	movs	r2, #18
 8008cc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008cc6:	4b03      	ldr	r3, [pc, #12]	@ (8008cd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr
 8008cd4:	200000d0 	.word	0x200000d0

08008cd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	6039      	str	r1, [r7, #0]
 8008ce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008cea:	4b03      	ldr	r3, [pc, #12]	@ (8008cf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	200000e4 	.word	0x200000e4

08008cfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	6039      	str	r1, [r7, #0]
 8008d06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d08:	79fb      	ldrb	r3, [r7, #7]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d105      	bne.n	8008d1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	4907      	ldr	r1, [pc, #28]	@ (8008d30 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d12:	4808      	ldr	r0, [pc, #32]	@ (8008d34 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d14:	f7ff fdd6 	bl	80088c4 <USBD_GetString>
 8008d18:	e004      	b.n	8008d24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	4904      	ldr	r1, [pc, #16]	@ (8008d30 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d1e:	4805      	ldr	r0, [pc, #20]	@ (8008d34 <USBD_FS_ProductStrDescriptor+0x38>)
 8008d20:	f7ff fdd0 	bl	80088c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d24:	4b02      	ldr	r3, [pc, #8]	@ (8008d30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000e90 	.word	0x20000e90
 8008d34:	08009f44 	.word	0x08009f44

08008d38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	4603      	mov	r3, r0
 8008d40:	6039      	str	r1, [r7, #0]
 8008d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	4904      	ldr	r1, [pc, #16]	@ (8008d58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d48:	4804      	ldr	r0, [pc, #16]	@ (8008d5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d4a:	f7ff fdbb 	bl	80088c4 <USBD_GetString>
  return USBD_StrDesc;
 8008d4e:	4b02      	ldr	r3, [pc, #8]	@ (8008d58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20000e90 	.word	0x20000e90
 8008d5c:	08009f4c 	.word	0x08009f4c

08008d60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	4603      	mov	r3, r0
 8008d68:	6039      	str	r1, [r7, #0]
 8008d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	221a      	movs	r2, #26
 8008d70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008d72:	f000 f843 	bl	8008dfc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008d76:	4b02      	ldr	r3, [pc, #8]	@ (8008d80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	200000e8 	.word	0x200000e8

08008d84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	6039      	str	r1, [r7, #0]
 8008d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d105      	bne.n	8008da2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4907      	ldr	r1, [pc, #28]	@ (8008db8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008d9a:	4808      	ldr	r0, [pc, #32]	@ (8008dbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008d9c:	f7ff fd92 	bl	80088c4 <USBD_GetString>
 8008da0:	e004      	b.n	8008dac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	4904      	ldr	r1, [pc, #16]	@ (8008db8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008da6:	4805      	ldr	r0, [pc, #20]	@ (8008dbc <USBD_FS_ConfigStrDescriptor+0x38>)
 8008da8:	f7ff fd8c 	bl	80088c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008dac:	4b02      	ldr	r3, [pc, #8]	@ (8008db8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000e90 	.word	0x20000e90
 8008dbc:	08009f58 	.word	0x08009f58

08008dc0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	6039      	str	r1, [r7, #0]
 8008dca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d105      	bne.n	8008dde <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	4907      	ldr	r1, [pc, #28]	@ (8008df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008dd6:	4808      	ldr	r0, [pc, #32]	@ (8008df8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008dd8:	f7ff fd74 	bl	80088c4 <USBD_GetString>
 8008ddc:	e004      	b.n	8008de8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008dde:	683a      	ldr	r2, [r7, #0]
 8008de0:	4904      	ldr	r1, [pc, #16]	@ (8008df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008de2:	4805      	ldr	r0, [pc, #20]	@ (8008df8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008de4:	f7ff fd6e 	bl	80088c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de8:	4b02      	ldr	r3, [pc, #8]	@ (8008df4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	20000e90 	.word	0x20000e90
 8008df8:	08009f64 	.word	0x08009f64

08008dfc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e02:	4b0f      	ldr	r3, [pc, #60]	@ (8008e40 <Get_SerialNum+0x44>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e08:	4b0e      	ldr	r3, [pc, #56]	@ (8008e44 <Get_SerialNum+0x48>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8008e48 <Get_SerialNum+0x4c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4413      	add	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d009      	beq.n	8008e36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e22:	2208      	movs	r2, #8
 8008e24:	4909      	ldr	r1, [pc, #36]	@ (8008e4c <Get_SerialNum+0x50>)
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f000 f814 	bl	8008e54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e2c:	2204      	movs	r2, #4
 8008e2e:	4908      	ldr	r1, [pc, #32]	@ (8008e50 <Get_SerialNum+0x54>)
 8008e30:	68b8      	ldr	r0, [r7, #8]
 8008e32:	f000 f80f 	bl	8008e54 <IntToUnicode>
  }
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	1fff7a10 	.word	0x1fff7a10
 8008e44:	1fff7a14 	.word	0x1fff7a14
 8008e48:	1fff7a18 	.word	0x1fff7a18
 8008e4c:	200000ea 	.word	0x200000ea
 8008e50:	200000fa 	.word	0x200000fa

08008e54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e66:	2300      	movs	r3, #0
 8008e68:	75fb      	strb	r3, [r7, #23]
 8008e6a:	e027      	b.n	8008ebc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	0f1b      	lsrs	r3, r3, #28
 8008e70:	2b09      	cmp	r3, #9
 8008e72:	d80b      	bhi.n	8008e8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	0f1b      	lsrs	r3, r3, #28
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	005b      	lsls	r3, r3, #1
 8008e7e:	4619      	mov	r1, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	440b      	add	r3, r1
 8008e84:	3230      	adds	r2, #48	@ 0x30
 8008e86:	b2d2      	uxtb	r2, r2
 8008e88:	701a      	strb	r2, [r3, #0]
 8008e8a:	e00a      	b.n	8008ea2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	0f1b      	lsrs	r3, r3, #28
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	4619      	mov	r1, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	440b      	add	r3, r1
 8008e9c:	3237      	adds	r2, #55	@ 0x37
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	005b      	lsls	r3, r3, #1
 8008eac:	3301      	adds	r3, #1
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
 8008ebc:	7dfa      	ldrb	r2, [r7, #23]
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d3d3      	bcc.n	8008e6c <IntToUnicode+0x18>
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
	...

08008ed4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08a      	sub	sp, #40	@ 0x28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008edc:	f107 0314 	add.w	r3, r7, #20
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]
 8008ee4:	605a      	str	r2, [r3, #4]
 8008ee6:	609a      	str	r2, [r3, #8]
 8008ee8:	60da      	str	r2, [r3, #12]
 8008eea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ef4:	d13a      	bne.n	8008f6c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	613b      	str	r3, [r7, #16]
 8008efa:	4b1e      	ldr	r3, [pc, #120]	@ (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008efe:	4a1d      	ldr	r2, [pc, #116]	@ (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f00:	f043 0301 	orr.w	r3, r3, #1
 8008f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8008f06:	4b1b      	ldr	r3, [pc, #108]	@ (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	613b      	str	r3, [r7, #16]
 8008f10:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f18:	2302      	movs	r3, #2
 8008f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f20:	2303      	movs	r3, #3
 8008f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f24:	230a      	movs	r3, #10
 8008f26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f28:	f107 0314 	add.w	r3, r7, #20
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4812      	ldr	r0, [pc, #72]	@ (8008f78 <HAL_PCD_MspInit+0xa4>)
 8008f30:	f7f9 f9aa 	bl	8002288 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f34:	4b0f      	ldr	r3, [pc, #60]	@ (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f38:	4a0e      	ldr	r2, [pc, #56]	@ (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f3e:	6353      	str	r3, [r2, #52]	@ 0x34
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	4b0b      	ldr	r3, [pc, #44]	@ (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f48:	4a0a      	ldr	r2, [pc, #40]	@ (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008f4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008f50:	4b08      	ldr	r3, [pc, #32]	@ (8008f74 <HAL_PCD_MspInit+0xa0>)
 8008f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f58:	60fb      	str	r3, [r7, #12]
 8008f5a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2100      	movs	r1, #0
 8008f60:	2043      	movs	r0, #67	@ 0x43
 8008f62:	f7f9 f95a 	bl	800221a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f66:	2043      	movs	r0, #67	@ 0x43
 8008f68:	f7f9 f973 	bl	8002252 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008f6c:	bf00      	nop
 8008f6e:	3728      	adds	r7, #40	@ 0x28
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	40023800 	.word	0x40023800
 8008f78:	40020000 	.word	0x40020000

08008f7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f90:	4619      	mov	r1, r3
 8008f92:	4610      	mov	r0, r2
 8008f94:	f7fe fb33 	bl	80075fe <USBD_LL_SetupStage>
}
 8008f98:	bf00      	nop
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	6879      	ldr	r1, [r7, #4]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	00db      	lsls	r3, r3, #3
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	440b      	add	r3, r1
 8008fc0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	78fb      	ldrb	r3, [r7, #3]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	f7fe fb6d 	bl	80076a8 <USBD_LL_DataOutStage>
}
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	460b      	mov	r3, r1
 8008fe0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	4613      	mov	r3, r2
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	440b      	add	r3, r1
 8008ff6:	3320      	adds	r3, #32
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	f7fe fc06 	bl	800780e <USBD_LL_DataInStage>
}
 8009002:	bf00      	nop
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fd40 	bl	8007a9e <USBD_LL_SOF>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800902e:	2301      	movs	r3, #1
 8009030:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	79db      	ldrb	r3, [r3, #7]
 8009036:	2b02      	cmp	r3, #2
 8009038:	d001      	beq.n	800903e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800903a:	f7f8 fccf 	bl	80019dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009044:	7bfa      	ldrb	r2, [r7, #15]
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f7fe fce4 	bl	8007a16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe fc8c 	bl	8007972 <USBD_LL_Reset>
}
 800905a:	bf00      	nop
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
	...

08009064 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fcdf 	bl	8007a36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	6812      	ldr	r2, [r2, #0]
 8009086:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800908a:	f043 0301 	orr.w	r3, r3, #1
 800908e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	7adb      	ldrb	r3, [r3, #11]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d005      	beq.n	80090a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009098:	4b04      	ldr	r3, [pc, #16]	@ (80090ac <HAL_PCD_SuspendCallback+0x48>)
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	4a03      	ldr	r2, [pc, #12]	@ (80090ac <HAL_PCD_SuspendCallback+0x48>)
 800909e:	f043 0306 	orr.w	r3, r3, #6
 80090a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090a4:	bf00      	nop
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	e000ed00 	.word	0xe000ed00

080090b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fe fcd5 	bl	8007a6e <USBD_LL_Resume>
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	460b      	mov	r3, r1
 80090d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	4611      	mov	r1, r2
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7fe fd2d 	bl	8007b42 <USBD_LL_IsoOUTIncomplete>
}
 80090e8:	bf00      	nop
 80090ea:	3708      	adds	r7, #8
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	4611      	mov	r1, r2
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fce9 	bl	8007ade <USBD_LL_IsoINIncomplete>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fd3f 	bl	8007ba6 <USBD_LL_DevConnected>
}
 8009128:	bf00      	nop
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b082      	sub	sp, #8
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fd3c 	bl	8007bbc <USBD_LL_DevDisconnected>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d13c      	bne.n	80091d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800915c:	4a20      	ldr	r2, [pc, #128]	@ (80091e0 <USBD_LL_Init+0x94>)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a1e      	ldr	r2, [pc, #120]	@ (80091e0 <USBD_LL_Init+0x94>)
 8009168:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800916c:	4b1c      	ldr	r3, [pc, #112]	@ (80091e0 <USBD_LL_Init+0x94>)
 800916e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009172:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009174:	4b1a      	ldr	r3, [pc, #104]	@ (80091e0 <USBD_LL_Init+0x94>)
 8009176:	2204      	movs	r2, #4
 8009178:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800917a:	4b19      	ldr	r3, [pc, #100]	@ (80091e0 <USBD_LL_Init+0x94>)
 800917c:	2202      	movs	r2, #2
 800917e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009180:	4b17      	ldr	r3, [pc, #92]	@ (80091e0 <USBD_LL_Init+0x94>)
 8009182:	2200      	movs	r2, #0
 8009184:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009186:	4b16      	ldr	r3, [pc, #88]	@ (80091e0 <USBD_LL_Init+0x94>)
 8009188:	2202      	movs	r2, #2
 800918a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800918c:	4b14      	ldr	r3, [pc, #80]	@ (80091e0 <USBD_LL_Init+0x94>)
 800918e:	2200      	movs	r2, #0
 8009190:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009192:	4b13      	ldr	r3, [pc, #76]	@ (80091e0 <USBD_LL_Init+0x94>)
 8009194:	2200      	movs	r2, #0
 8009196:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009198:	4b11      	ldr	r3, [pc, #68]	@ (80091e0 <USBD_LL_Init+0x94>)
 800919a:	2200      	movs	r2, #0
 800919c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800919e:	4b10      	ldr	r3, [pc, #64]	@ (80091e0 <USBD_LL_Init+0x94>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091a4:	4b0e      	ldr	r3, [pc, #56]	@ (80091e0 <USBD_LL_Init+0x94>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091aa:	480d      	ldr	r0, [pc, #52]	@ (80091e0 <USBD_LL_Init+0x94>)
 80091ac:	f7f9 fa21 	bl	80025f2 <HAL_PCD_Init>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80091b6:	f7f8 fc11 	bl	80019dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80091ba:	2180      	movs	r1, #128	@ 0x80
 80091bc:	4808      	ldr	r0, [pc, #32]	@ (80091e0 <USBD_LL_Init+0x94>)
 80091be:	f7fa fc4e 	bl	8003a5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80091c2:	2240      	movs	r2, #64	@ 0x40
 80091c4:	2100      	movs	r1, #0
 80091c6:	4806      	ldr	r0, [pc, #24]	@ (80091e0 <USBD_LL_Init+0x94>)
 80091c8:	f7fa fc02 	bl	80039d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80091cc:	2280      	movs	r2, #128	@ 0x80
 80091ce:	2101      	movs	r1, #1
 80091d0:	4803      	ldr	r0, [pc, #12]	@ (80091e0 <USBD_LL_Init+0x94>)
 80091d2:	f7fa fbfd 	bl	80039d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20001090 	.word	0x20001090

080091e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7f9 fb08 	bl	8002810 <HAL_PCD_Start>
 8009200:	4603      	mov	r3, r0
 8009202:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f942 	bl	8009490 <USBD_Get_USB_Status>
 800920c:	4603      	mov	r3, r0
 800920e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009210:	7bbb      	ldrb	r3, [r7, #14]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	4608      	mov	r0, r1
 8009224:	4611      	mov	r1, r2
 8009226:	461a      	mov	r2, r3
 8009228:	4603      	mov	r3, r0
 800922a:	70fb      	strb	r3, [r7, #3]
 800922c:	460b      	mov	r3, r1
 800922e:	70bb      	strb	r3, [r7, #2]
 8009230:	4613      	mov	r3, r2
 8009232:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009242:	78bb      	ldrb	r3, [r7, #2]
 8009244:	883a      	ldrh	r2, [r7, #0]
 8009246:	78f9      	ldrb	r1, [r7, #3]
 8009248:	f7f9 ffdc 	bl	8003204 <HAL_PCD_EP_Open>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f91c 	bl	8009490 <USBD_Get_USB_Status>
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800925c:	7bbb      	ldrb	r3, [r7, #14]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	460b      	mov	r3, r1
 8009270:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009280:	78fa      	ldrb	r2, [r7, #3]
 8009282:	4611      	mov	r1, r2
 8009284:	4618      	mov	r0, r3
 8009286:	f7fa f827 	bl	80032d8 <HAL_PCD_EP_Close>
 800928a:	4603      	mov	r3, r0
 800928c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800928e:	7bfb      	ldrb	r3, [r7, #15]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 f8fd 	bl	8009490 <USBD_Get_USB_Status>
 8009296:	4603      	mov	r3, r0
 8009298:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800929a:	7bbb      	ldrb	r3, [r7, #14]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092be:	78fa      	ldrb	r2, [r7, #3]
 80092c0:	4611      	mov	r1, r2
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7fa f8df 	bl	8003486 <HAL_PCD_EP_SetStall>
 80092c8:	4603      	mov	r3, r0
 80092ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	4618      	mov	r0, r3
 80092d0:	f000 f8de 	bl	8009490 <USBD_Get_USB_Status>
 80092d4:	4603      	mov	r3, r0
 80092d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	4611      	mov	r1, r2
 8009300:	4618      	mov	r0, r3
 8009302:	f7fa f923 	bl	800354c <HAL_PCD_EP_ClrStall>
 8009306:	4603      	mov	r3, r0
 8009308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 f8bf 	bl	8009490 <USBD_Get_USB_Status>
 8009312:	4603      	mov	r3, r0
 8009314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009316:	7bbb      	ldrb	r3, [r7, #14]
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009332:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009338:	2b00      	cmp	r3, #0
 800933a:	da0b      	bge.n	8009354 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009342:	68f9      	ldr	r1, [r7, #12]
 8009344:	4613      	mov	r3, r2
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	3316      	adds	r3, #22
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	e00b      	b.n	800936c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800935a:	68f9      	ldr	r1, [r7, #12]
 800935c:	4613      	mov	r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800936a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800936c:	4618      	mov	r0, r3
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009384:	2300      	movs	r3, #0
 8009386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009388:	2300      	movs	r3, #0
 800938a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009392:	78fa      	ldrb	r2, [r7, #3]
 8009394:	4611      	mov	r1, r2
 8009396:	4618      	mov	r0, r3
 8009398:	f7f9 ff10 	bl	80031bc <HAL_PCD_SetAddress>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f874 	bl	8009490 <USBD_Get_USB_Status>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	607a      	str	r2, [r7, #4]
 80093c0:	603b      	str	r3, [r7, #0]
 80093c2:	460b      	mov	r3, r1
 80093c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80093d4:	7af9      	ldrb	r1, [r7, #11]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	f7fa f81a 	bl	8003412 <HAL_PCD_EP_Transmit>
 80093de:	4603      	mov	r3, r0
 80093e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e2:	7dfb      	ldrb	r3, [r7, #23]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 f853 	bl	8009490 <USBD_Get_USB_Status>
 80093ea:	4603      	mov	r3, r0
 80093ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	607a      	str	r2, [r7, #4]
 8009402:	603b      	str	r3, [r7, #0]
 8009404:	460b      	mov	r3, r1
 8009406:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009416:	7af9      	ldrb	r1, [r7, #11]
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	f7f9 ffa6 	bl	800336c <HAL_PCD_EP_Receive>
 8009420:	4603      	mov	r3, r0
 8009422:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f832 	bl	8009490 <USBD_Get_USB_Status>
 800942c:	4603      	mov	r3, r0
 800942e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009430:	7dbb      	ldrb	r3, [r7, #22]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800944c:	78fa      	ldrb	r2, [r7, #3]
 800944e:	4611      	mov	r1, r2
 8009450:	4618      	mov	r0, r3
 8009452:	f7f9 ffc6 	bl	80033e2 <HAL_PCD_EP_GetRxCount>
 8009456:	4603      	mov	r3, r0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009468:	4b03      	ldr	r3, [pc, #12]	@ (8009478 <USBD_static_malloc+0x18>)
}
 800946a:	4618      	mov	r0, r3
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	20001574 	.word	0x20001574

0800947c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]

}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800949a:	2300      	movs	r3, #0
 800949c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	d817      	bhi.n	80094d4 <USBD_Get_USB_Status+0x44>
 80094a4:	a201      	add	r2, pc, #4	@ (adr r2, 80094ac <USBD_Get_USB_Status+0x1c>)
 80094a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094aa:	bf00      	nop
 80094ac:	080094bd 	.word	0x080094bd
 80094b0:	080094c3 	.word	0x080094c3
 80094b4:	080094c9 	.word	0x080094c9
 80094b8:	080094cf 	.word	0x080094cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	73fb      	strb	r3, [r7, #15]
    break;
 80094c0:	e00b      	b.n	80094da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094c2:	2303      	movs	r3, #3
 80094c4:	73fb      	strb	r3, [r7, #15]
    break;
 80094c6:	e008      	b.n	80094da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094c8:	2301      	movs	r3, #1
 80094ca:	73fb      	strb	r3, [r7, #15]
    break;
 80094cc:	e005      	b.n	80094da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094ce:	2303      	movs	r3, #3
 80094d0:	73fb      	strb	r3, [r7, #15]
    break;
 80094d2:	e002      	b.n	80094da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094d4:	2303      	movs	r3, #3
 80094d6:	73fb      	strb	r3, [r7, #15]
    break;
 80094d8:	bf00      	nop
  }
  return usb_status;
 80094da:	7bfb      	ldrb	r3, [r7, #15]
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <siprintf>:
 80094e8:	b40e      	push	{r1, r2, r3}
 80094ea:	b500      	push	{lr}
 80094ec:	b09c      	sub	sp, #112	@ 0x70
 80094ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80094f0:	9002      	str	r0, [sp, #8]
 80094f2:	9006      	str	r0, [sp, #24]
 80094f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80094f8:	4809      	ldr	r0, [pc, #36]	@ (8009520 <siprintf+0x38>)
 80094fa:	9107      	str	r1, [sp, #28]
 80094fc:	9104      	str	r1, [sp, #16]
 80094fe:	4909      	ldr	r1, [pc, #36]	@ (8009524 <siprintf+0x3c>)
 8009500:	f853 2b04 	ldr.w	r2, [r3], #4
 8009504:	9105      	str	r1, [sp, #20]
 8009506:	6800      	ldr	r0, [r0, #0]
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	a902      	add	r1, sp, #8
 800950c:	f000 f9a2 	bl	8009854 <_svfiprintf_r>
 8009510:	9b02      	ldr	r3, [sp, #8]
 8009512:	2200      	movs	r2, #0
 8009514:	701a      	strb	r2, [r3, #0]
 8009516:	b01c      	add	sp, #112	@ 0x70
 8009518:	f85d eb04 	ldr.w	lr, [sp], #4
 800951c:	b003      	add	sp, #12
 800951e:	4770      	bx	lr
 8009520:	20000104 	.word	0x20000104
 8009524:	ffff0208 	.word	0xffff0208

08009528 <memset>:
 8009528:	4402      	add	r2, r0
 800952a:	4603      	mov	r3, r0
 800952c:	4293      	cmp	r3, r2
 800952e:	d100      	bne.n	8009532 <memset+0xa>
 8009530:	4770      	bx	lr
 8009532:	f803 1b01 	strb.w	r1, [r3], #1
 8009536:	e7f9      	b.n	800952c <memset+0x4>

08009538 <__errno>:
 8009538:	4b01      	ldr	r3, [pc, #4]	@ (8009540 <__errno+0x8>)
 800953a:	6818      	ldr	r0, [r3, #0]
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	20000104 	.word	0x20000104

08009544 <__libc_init_array>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	4d0d      	ldr	r5, [pc, #52]	@ (800957c <__libc_init_array+0x38>)
 8009548:	4c0d      	ldr	r4, [pc, #52]	@ (8009580 <__libc_init_array+0x3c>)
 800954a:	1b64      	subs	r4, r4, r5
 800954c:	10a4      	asrs	r4, r4, #2
 800954e:	2600      	movs	r6, #0
 8009550:	42a6      	cmp	r6, r4
 8009552:	d109      	bne.n	8009568 <__libc_init_array+0x24>
 8009554:	4d0b      	ldr	r5, [pc, #44]	@ (8009584 <__libc_init_array+0x40>)
 8009556:	4c0c      	ldr	r4, [pc, #48]	@ (8009588 <__libc_init_array+0x44>)
 8009558:	f000 fc66 	bl	8009e28 <_init>
 800955c:	1b64      	subs	r4, r4, r5
 800955e:	10a4      	asrs	r4, r4, #2
 8009560:	2600      	movs	r6, #0
 8009562:	42a6      	cmp	r6, r4
 8009564:	d105      	bne.n	8009572 <__libc_init_array+0x2e>
 8009566:	bd70      	pop	{r4, r5, r6, pc}
 8009568:	f855 3b04 	ldr.w	r3, [r5], #4
 800956c:	4798      	blx	r3
 800956e:	3601      	adds	r6, #1
 8009570:	e7ee      	b.n	8009550 <__libc_init_array+0xc>
 8009572:	f855 3b04 	ldr.w	r3, [r5], #4
 8009576:	4798      	blx	r3
 8009578:	3601      	adds	r6, #1
 800957a:	e7f2      	b.n	8009562 <__libc_init_array+0x1e>
 800957c:	08009fc8 	.word	0x08009fc8
 8009580:	08009fc8 	.word	0x08009fc8
 8009584:	08009fc8 	.word	0x08009fc8
 8009588:	08009fcc 	.word	0x08009fcc

0800958c <__retarget_lock_acquire_recursive>:
 800958c:	4770      	bx	lr

0800958e <__retarget_lock_release_recursive>:
 800958e:	4770      	bx	lr

08009590 <memcpy>:
 8009590:	440a      	add	r2, r1
 8009592:	4291      	cmp	r1, r2
 8009594:	f100 33ff 	add.w	r3, r0, #4294967295
 8009598:	d100      	bne.n	800959c <memcpy+0xc>
 800959a:	4770      	bx	lr
 800959c:	b510      	push	{r4, lr}
 800959e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095a6:	4291      	cmp	r1, r2
 80095a8:	d1f9      	bne.n	800959e <memcpy+0xe>
 80095aa:	bd10      	pop	{r4, pc}

080095ac <_free_r>:
 80095ac:	b538      	push	{r3, r4, r5, lr}
 80095ae:	4605      	mov	r5, r0
 80095b0:	2900      	cmp	r1, #0
 80095b2:	d041      	beq.n	8009638 <_free_r+0x8c>
 80095b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095b8:	1f0c      	subs	r4, r1, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	bfb8      	it	lt
 80095be:	18e4      	addlt	r4, r4, r3
 80095c0:	f000 f8e0 	bl	8009784 <__malloc_lock>
 80095c4:	4a1d      	ldr	r2, [pc, #116]	@ (800963c <_free_r+0x90>)
 80095c6:	6813      	ldr	r3, [r2, #0]
 80095c8:	b933      	cbnz	r3, 80095d8 <_free_r+0x2c>
 80095ca:	6063      	str	r3, [r4, #4]
 80095cc:	6014      	str	r4, [r2, #0]
 80095ce:	4628      	mov	r0, r5
 80095d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095d4:	f000 b8dc 	b.w	8009790 <__malloc_unlock>
 80095d8:	42a3      	cmp	r3, r4
 80095da:	d908      	bls.n	80095ee <_free_r+0x42>
 80095dc:	6820      	ldr	r0, [r4, #0]
 80095de:	1821      	adds	r1, r4, r0
 80095e0:	428b      	cmp	r3, r1
 80095e2:	bf01      	itttt	eq
 80095e4:	6819      	ldreq	r1, [r3, #0]
 80095e6:	685b      	ldreq	r3, [r3, #4]
 80095e8:	1809      	addeq	r1, r1, r0
 80095ea:	6021      	streq	r1, [r4, #0]
 80095ec:	e7ed      	b.n	80095ca <_free_r+0x1e>
 80095ee:	461a      	mov	r2, r3
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	b10b      	cbz	r3, 80095f8 <_free_r+0x4c>
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	d9fa      	bls.n	80095ee <_free_r+0x42>
 80095f8:	6811      	ldr	r1, [r2, #0]
 80095fa:	1850      	adds	r0, r2, r1
 80095fc:	42a0      	cmp	r0, r4
 80095fe:	d10b      	bne.n	8009618 <_free_r+0x6c>
 8009600:	6820      	ldr	r0, [r4, #0]
 8009602:	4401      	add	r1, r0
 8009604:	1850      	adds	r0, r2, r1
 8009606:	4283      	cmp	r3, r0
 8009608:	6011      	str	r1, [r2, #0]
 800960a:	d1e0      	bne.n	80095ce <_free_r+0x22>
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	6053      	str	r3, [r2, #4]
 8009612:	4408      	add	r0, r1
 8009614:	6010      	str	r0, [r2, #0]
 8009616:	e7da      	b.n	80095ce <_free_r+0x22>
 8009618:	d902      	bls.n	8009620 <_free_r+0x74>
 800961a:	230c      	movs	r3, #12
 800961c:	602b      	str	r3, [r5, #0]
 800961e:	e7d6      	b.n	80095ce <_free_r+0x22>
 8009620:	6820      	ldr	r0, [r4, #0]
 8009622:	1821      	adds	r1, r4, r0
 8009624:	428b      	cmp	r3, r1
 8009626:	bf04      	itt	eq
 8009628:	6819      	ldreq	r1, [r3, #0]
 800962a:	685b      	ldreq	r3, [r3, #4]
 800962c:	6063      	str	r3, [r4, #4]
 800962e:	bf04      	itt	eq
 8009630:	1809      	addeq	r1, r1, r0
 8009632:	6021      	streq	r1, [r4, #0]
 8009634:	6054      	str	r4, [r2, #4]
 8009636:	e7ca      	b.n	80095ce <_free_r+0x22>
 8009638:	bd38      	pop	{r3, r4, r5, pc}
 800963a:	bf00      	nop
 800963c:	200018d8 	.word	0x200018d8

08009640 <sbrk_aligned>:
 8009640:	b570      	push	{r4, r5, r6, lr}
 8009642:	4e0f      	ldr	r6, [pc, #60]	@ (8009680 <sbrk_aligned+0x40>)
 8009644:	460c      	mov	r4, r1
 8009646:	6831      	ldr	r1, [r6, #0]
 8009648:	4605      	mov	r5, r0
 800964a:	b911      	cbnz	r1, 8009652 <sbrk_aligned+0x12>
 800964c:	f000 fba6 	bl	8009d9c <_sbrk_r>
 8009650:	6030      	str	r0, [r6, #0]
 8009652:	4621      	mov	r1, r4
 8009654:	4628      	mov	r0, r5
 8009656:	f000 fba1 	bl	8009d9c <_sbrk_r>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	d103      	bne.n	8009666 <sbrk_aligned+0x26>
 800965e:	f04f 34ff 	mov.w	r4, #4294967295
 8009662:	4620      	mov	r0, r4
 8009664:	bd70      	pop	{r4, r5, r6, pc}
 8009666:	1cc4      	adds	r4, r0, #3
 8009668:	f024 0403 	bic.w	r4, r4, #3
 800966c:	42a0      	cmp	r0, r4
 800966e:	d0f8      	beq.n	8009662 <sbrk_aligned+0x22>
 8009670:	1a21      	subs	r1, r4, r0
 8009672:	4628      	mov	r0, r5
 8009674:	f000 fb92 	bl	8009d9c <_sbrk_r>
 8009678:	3001      	adds	r0, #1
 800967a:	d1f2      	bne.n	8009662 <sbrk_aligned+0x22>
 800967c:	e7ef      	b.n	800965e <sbrk_aligned+0x1e>
 800967e:	bf00      	nop
 8009680:	200018d4 	.word	0x200018d4

08009684 <_malloc_r>:
 8009684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009688:	1ccd      	adds	r5, r1, #3
 800968a:	f025 0503 	bic.w	r5, r5, #3
 800968e:	3508      	adds	r5, #8
 8009690:	2d0c      	cmp	r5, #12
 8009692:	bf38      	it	cc
 8009694:	250c      	movcc	r5, #12
 8009696:	2d00      	cmp	r5, #0
 8009698:	4606      	mov	r6, r0
 800969a:	db01      	blt.n	80096a0 <_malloc_r+0x1c>
 800969c:	42a9      	cmp	r1, r5
 800969e:	d904      	bls.n	80096aa <_malloc_r+0x26>
 80096a0:	230c      	movs	r3, #12
 80096a2:	6033      	str	r3, [r6, #0]
 80096a4:	2000      	movs	r0, #0
 80096a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009780 <_malloc_r+0xfc>
 80096ae:	f000 f869 	bl	8009784 <__malloc_lock>
 80096b2:	f8d8 3000 	ldr.w	r3, [r8]
 80096b6:	461c      	mov	r4, r3
 80096b8:	bb44      	cbnz	r4, 800970c <_malloc_r+0x88>
 80096ba:	4629      	mov	r1, r5
 80096bc:	4630      	mov	r0, r6
 80096be:	f7ff ffbf 	bl	8009640 <sbrk_aligned>
 80096c2:	1c43      	adds	r3, r0, #1
 80096c4:	4604      	mov	r4, r0
 80096c6:	d158      	bne.n	800977a <_malloc_r+0xf6>
 80096c8:	f8d8 4000 	ldr.w	r4, [r8]
 80096cc:	4627      	mov	r7, r4
 80096ce:	2f00      	cmp	r7, #0
 80096d0:	d143      	bne.n	800975a <_malloc_r+0xd6>
 80096d2:	2c00      	cmp	r4, #0
 80096d4:	d04b      	beq.n	800976e <_malloc_r+0xea>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	4639      	mov	r1, r7
 80096da:	4630      	mov	r0, r6
 80096dc:	eb04 0903 	add.w	r9, r4, r3
 80096e0:	f000 fb5c 	bl	8009d9c <_sbrk_r>
 80096e4:	4581      	cmp	r9, r0
 80096e6:	d142      	bne.n	800976e <_malloc_r+0xea>
 80096e8:	6821      	ldr	r1, [r4, #0]
 80096ea:	1a6d      	subs	r5, r5, r1
 80096ec:	4629      	mov	r1, r5
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff ffa6 	bl	8009640 <sbrk_aligned>
 80096f4:	3001      	adds	r0, #1
 80096f6:	d03a      	beq.n	800976e <_malloc_r+0xea>
 80096f8:	6823      	ldr	r3, [r4, #0]
 80096fa:	442b      	add	r3, r5
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	bb62      	cbnz	r2, 8009760 <_malloc_r+0xdc>
 8009706:	f8c8 7000 	str.w	r7, [r8]
 800970a:	e00f      	b.n	800972c <_malloc_r+0xa8>
 800970c:	6822      	ldr	r2, [r4, #0]
 800970e:	1b52      	subs	r2, r2, r5
 8009710:	d420      	bmi.n	8009754 <_malloc_r+0xd0>
 8009712:	2a0b      	cmp	r2, #11
 8009714:	d917      	bls.n	8009746 <_malloc_r+0xc2>
 8009716:	1961      	adds	r1, r4, r5
 8009718:	42a3      	cmp	r3, r4
 800971a:	6025      	str	r5, [r4, #0]
 800971c:	bf18      	it	ne
 800971e:	6059      	strne	r1, [r3, #4]
 8009720:	6863      	ldr	r3, [r4, #4]
 8009722:	bf08      	it	eq
 8009724:	f8c8 1000 	streq.w	r1, [r8]
 8009728:	5162      	str	r2, [r4, r5]
 800972a:	604b      	str	r3, [r1, #4]
 800972c:	4630      	mov	r0, r6
 800972e:	f000 f82f 	bl	8009790 <__malloc_unlock>
 8009732:	f104 000b 	add.w	r0, r4, #11
 8009736:	1d23      	adds	r3, r4, #4
 8009738:	f020 0007 	bic.w	r0, r0, #7
 800973c:	1ac2      	subs	r2, r0, r3
 800973e:	bf1c      	itt	ne
 8009740:	1a1b      	subne	r3, r3, r0
 8009742:	50a3      	strne	r3, [r4, r2]
 8009744:	e7af      	b.n	80096a6 <_malloc_r+0x22>
 8009746:	6862      	ldr	r2, [r4, #4]
 8009748:	42a3      	cmp	r3, r4
 800974a:	bf0c      	ite	eq
 800974c:	f8c8 2000 	streq.w	r2, [r8]
 8009750:	605a      	strne	r2, [r3, #4]
 8009752:	e7eb      	b.n	800972c <_malloc_r+0xa8>
 8009754:	4623      	mov	r3, r4
 8009756:	6864      	ldr	r4, [r4, #4]
 8009758:	e7ae      	b.n	80096b8 <_malloc_r+0x34>
 800975a:	463c      	mov	r4, r7
 800975c:	687f      	ldr	r7, [r7, #4]
 800975e:	e7b6      	b.n	80096ce <_malloc_r+0x4a>
 8009760:	461a      	mov	r2, r3
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	42a3      	cmp	r3, r4
 8009766:	d1fb      	bne.n	8009760 <_malloc_r+0xdc>
 8009768:	2300      	movs	r3, #0
 800976a:	6053      	str	r3, [r2, #4]
 800976c:	e7de      	b.n	800972c <_malloc_r+0xa8>
 800976e:	230c      	movs	r3, #12
 8009770:	6033      	str	r3, [r6, #0]
 8009772:	4630      	mov	r0, r6
 8009774:	f000 f80c 	bl	8009790 <__malloc_unlock>
 8009778:	e794      	b.n	80096a4 <_malloc_r+0x20>
 800977a:	6005      	str	r5, [r0, #0]
 800977c:	e7d6      	b.n	800972c <_malloc_r+0xa8>
 800977e:	bf00      	nop
 8009780:	200018d8 	.word	0x200018d8

08009784 <__malloc_lock>:
 8009784:	4801      	ldr	r0, [pc, #4]	@ (800978c <__malloc_lock+0x8>)
 8009786:	f7ff bf01 	b.w	800958c <__retarget_lock_acquire_recursive>
 800978a:	bf00      	nop
 800978c:	200018d0 	.word	0x200018d0

08009790 <__malloc_unlock>:
 8009790:	4801      	ldr	r0, [pc, #4]	@ (8009798 <__malloc_unlock+0x8>)
 8009792:	f7ff befc 	b.w	800958e <__retarget_lock_release_recursive>
 8009796:	bf00      	nop
 8009798:	200018d0 	.word	0x200018d0

0800979c <__ssputs_r>:
 800979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	688e      	ldr	r6, [r1, #8]
 80097a2:	461f      	mov	r7, r3
 80097a4:	42be      	cmp	r6, r7
 80097a6:	680b      	ldr	r3, [r1, #0]
 80097a8:	4682      	mov	sl, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	4690      	mov	r8, r2
 80097ae:	d82d      	bhi.n	800980c <__ssputs_r+0x70>
 80097b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097b8:	d026      	beq.n	8009808 <__ssputs_r+0x6c>
 80097ba:	6965      	ldr	r5, [r4, #20]
 80097bc:	6909      	ldr	r1, [r1, #16]
 80097be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097c2:	eba3 0901 	sub.w	r9, r3, r1
 80097c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097ca:	1c7b      	adds	r3, r7, #1
 80097cc:	444b      	add	r3, r9
 80097ce:	106d      	asrs	r5, r5, #1
 80097d0:	429d      	cmp	r5, r3
 80097d2:	bf38      	it	cc
 80097d4:	461d      	movcc	r5, r3
 80097d6:	0553      	lsls	r3, r2, #21
 80097d8:	d527      	bpl.n	800982a <__ssputs_r+0x8e>
 80097da:	4629      	mov	r1, r5
 80097dc:	f7ff ff52 	bl	8009684 <_malloc_r>
 80097e0:	4606      	mov	r6, r0
 80097e2:	b360      	cbz	r0, 800983e <__ssputs_r+0xa2>
 80097e4:	6921      	ldr	r1, [r4, #16]
 80097e6:	464a      	mov	r2, r9
 80097e8:	f7ff fed2 	bl	8009590 <memcpy>
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097f6:	81a3      	strh	r3, [r4, #12]
 80097f8:	6126      	str	r6, [r4, #16]
 80097fa:	6165      	str	r5, [r4, #20]
 80097fc:	444e      	add	r6, r9
 80097fe:	eba5 0509 	sub.w	r5, r5, r9
 8009802:	6026      	str	r6, [r4, #0]
 8009804:	60a5      	str	r5, [r4, #8]
 8009806:	463e      	mov	r6, r7
 8009808:	42be      	cmp	r6, r7
 800980a:	d900      	bls.n	800980e <__ssputs_r+0x72>
 800980c:	463e      	mov	r6, r7
 800980e:	6820      	ldr	r0, [r4, #0]
 8009810:	4632      	mov	r2, r6
 8009812:	4641      	mov	r1, r8
 8009814:	f000 faa8 	bl	8009d68 <memmove>
 8009818:	68a3      	ldr	r3, [r4, #8]
 800981a:	1b9b      	subs	r3, r3, r6
 800981c:	60a3      	str	r3, [r4, #8]
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	4433      	add	r3, r6
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	2000      	movs	r0, #0
 8009826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800982a:	462a      	mov	r2, r5
 800982c:	f000 fac6 	bl	8009dbc <_realloc_r>
 8009830:	4606      	mov	r6, r0
 8009832:	2800      	cmp	r0, #0
 8009834:	d1e0      	bne.n	80097f8 <__ssputs_r+0x5c>
 8009836:	6921      	ldr	r1, [r4, #16]
 8009838:	4650      	mov	r0, sl
 800983a:	f7ff feb7 	bl	80095ac <_free_r>
 800983e:	230c      	movs	r3, #12
 8009840:	f8ca 3000 	str.w	r3, [sl]
 8009844:	89a3      	ldrh	r3, [r4, #12]
 8009846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800984a:	81a3      	strh	r3, [r4, #12]
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	e7e9      	b.n	8009826 <__ssputs_r+0x8a>
	...

08009854 <_svfiprintf_r>:
 8009854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009858:	4698      	mov	r8, r3
 800985a:	898b      	ldrh	r3, [r1, #12]
 800985c:	061b      	lsls	r3, r3, #24
 800985e:	b09d      	sub	sp, #116	@ 0x74
 8009860:	4607      	mov	r7, r0
 8009862:	460d      	mov	r5, r1
 8009864:	4614      	mov	r4, r2
 8009866:	d510      	bpl.n	800988a <_svfiprintf_r+0x36>
 8009868:	690b      	ldr	r3, [r1, #16]
 800986a:	b973      	cbnz	r3, 800988a <_svfiprintf_r+0x36>
 800986c:	2140      	movs	r1, #64	@ 0x40
 800986e:	f7ff ff09 	bl	8009684 <_malloc_r>
 8009872:	6028      	str	r0, [r5, #0]
 8009874:	6128      	str	r0, [r5, #16]
 8009876:	b930      	cbnz	r0, 8009886 <_svfiprintf_r+0x32>
 8009878:	230c      	movs	r3, #12
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	f04f 30ff 	mov.w	r0, #4294967295
 8009880:	b01d      	add	sp, #116	@ 0x74
 8009882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009886:	2340      	movs	r3, #64	@ 0x40
 8009888:	616b      	str	r3, [r5, #20]
 800988a:	2300      	movs	r3, #0
 800988c:	9309      	str	r3, [sp, #36]	@ 0x24
 800988e:	2320      	movs	r3, #32
 8009890:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009894:	f8cd 800c 	str.w	r8, [sp, #12]
 8009898:	2330      	movs	r3, #48	@ 0x30
 800989a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a38 <_svfiprintf_r+0x1e4>
 800989e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098a2:	f04f 0901 	mov.w	r9, #1
 80098a6:	4623      	mov	r3, r4
 80098a8:	469a      	mov	sl, r3
 80098aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098ae:	b10a      	cbz	r2, 80098b4 <_svfiprintf_r+0x60>
 80098b0:	2a25      	cmp	r2, #37	@ 0x25
 80098b2:	d1f9      	bne.n	80098a8 <_svfiprintf_r+0x54>
 80098b4:	ebba 0b04 	subs.w	fp, sl, r4
 80098b8:	d00b      	beq.n	80098d2 <_svfiprintf_r+0x7e>
 80098ba:	465b      	mov	r3, fp
 80098bc:	4622      	mov	r2, r4
 80098be:	4629      	mov	r1, r5
 80098c0:	4638      	mov	r0, r7
 80098c2:	f7ff ff6b 	bl	800979c <__ssputs_r>
 80098c6:	3001      	adds	r0, #1
 80098c8:	f000 80a7 	beq.w	8009a1a <_svfiprintf_r+0x1c6>
 80098cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098ce:	445a      	add	r2, fp
 80098d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80098d2:	f89a 3000 	ldrb.w	r3, [sl]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 809f 	beq.w	8009a1a <_svfiprintf_r+0x1c6>
 80098dc:	2300      	movs	r3, #0
 80098de:	f04f 32ff 	mov.w	r2, #4294967295
 80098e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098e6:	f10a 0a01 	add.w	sl, sl, #1
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	9307      	str	r3, [sp, #28]
 80098ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80098f4:	4654      	mov	r4, sl
 80098f6:	2205      	movs	r2, #5
 80098f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098fc:	484e      	ldr	r0, [pc, #312]	@ (8009a38 <_svfiprintf_r+0x1e4>)
 80098fe:	f7f6 fc6f 	bl	80001e0 <memchr>
 8009902:	9a04      	ldr	r2, [sp, #16]
 8009904:	b9d8      	cbnz	r0, 800993e <_svfiprintf_r+0xea>
 8009906:	06d0      	lsls	r0, r2, #27
 8009908:	bf44      	itt	mi
 800990a:	2320      	movmi	r3, #32
 800990c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009910:	0711      	lsls	r1, r2, #28
 8009912:	bf44      	itt	mi
 8009914:	232b      	movmi	r3, #43	@ 0x2b
 8009916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800991a:	f89a 3000 	ldrb.w	r3, [sl]
 800991e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009920:	d015      	beq.n	800994e <_svfiprintf_r+0xfa>
 8009922:	9a07      	ldr	r2, [sp, #28]
 8009924:	4654      	mov	r4, sl
 8009926:	2000      	movs	r0, #0
 8009928:	f04f 0c0a 	mov.w	ip, #10
 800992c:	4621      	mov	r1, r4
 800992e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009932:	3b30      	subs	r3, #48	@ 0x30
 8009934:	2b09      	cmp	r3, #9
 8009936:	d94b      	bls.n	80099d0 <_svfiprintf_r+0x17c>
 8009938:	b1b0      	cbz	r0, 8009968 <_svfiprintf_r+0x114>
 800993a:	9207      	str	r2, [sp, #28]
 800993c:	e014      	b.n	8009968 <_svfiprintf_r+0x114>
 800993e:	eba0 0308 	sub.w	r3, r0, r8
 8009942:	fa09 f303 	lsl.w	r3, r9, r3
 8009946:	4313      	orrs	r3, r2
 8009948:	9304      	str	r3, [sp, #16]
 800994a:	46a2      	mov	sl, r4
 800994c:	e7d2      	b.n	80098f4 <_svfiprintf_r+0xa0>
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	1d19      	adds	r1, r3, #4
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	9103      	str	r1, [sp, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	bfbb      	ittet	lt
 800995a:	425b      	neglt	r3, r3
 800995c:	f042 0202 	orrlt.w	r2, r2, #2
 8009960:	9307      	strge	r3, [sp, #28]
 8009962:	9307      	strlt	r3, [sp, #28]
 8009964:	bfb8      	it	lt
 8009966:	9204      	strlt	r2, [sp, #16]
 8009968:	7823      	ldrb	r3, [r4, #0]
 800996a:	2b2e      	cmp	r3, #46	@ 0x2e
 800996c:	d10a      	bne.n	8009984 <_svfiprintf_r+0x130>
 800996e:	7863      	ldrb	r3, [r4, #1]
 8009970:	2b2a      	cmp	r3, #42	@ 0x2a
 8009972:	d132      	bne.n	80099da <_svfiprintf_r+0x186>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	1d1a      	adds	r2, r3, #4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	9203      	str	r2, [sp, #12]
 800997c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009980:	3402      	adds	r4, #2
 8009982:	9305      	str	r3, [sp, #20]
 8009984:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a48 <_svfiprintf_r+0x1f4>
 8009988:	7821      	ldrb	r1, [r4, #0]
 800998a:	2203      	movs	r2, #3
 800998c:	4650      	mov	r0, sl
 800998e:	f7f6 fc27 	bl	80001e0 <memchr>
 8009992:	b138      	cbz	r0, 80099a4 <_svfiprintf_r+0x150>
 8009994:	9b04      	ldr	r3, [sp, #16]
 8009996:	eba0 000a 	sub.w	r0, r0, sl
 800999a:	2240      	movs	r2, #64	@ 0x40
 800999c:	4082      	lsls	r2, r0
 800999e:	4313      	orrs	r3, r2
 80099a0:	3401      	adds	r4, #1
 80099a2:	9304      	str	r3, [sp, #16]
 80099a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099a8:	4824      	ldr	r0, [pc, #144]	@ (8009a3c <_svfiprintf_r+0x1e8>)
 80099aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099ae:	2206      	movs	r2, #6
 80099b0:	f7f6 fc16 	bl	80001e0 <memchr>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d036      	beq.n	8009a26 <_svfiprintf_r+0x1d2>
 80099b8:	4b21      	ldr	r3, [pc, #132]	@ (8009a40 <_svfiprintf_r+0x1ec>)
 80099ba:	bb1b      	cbnz	r3, 8009a04 <_svfiprintf_r+0x1b0>
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	3307      	adds	r3, #7
 80099c0:	f023 0307 	bic.w	r3, r3, #7
 80099c4:	3308      	adds	r3, #8
 80099c6:	9303      	str	r3, [sp, #12]
 80099c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ca:	4433      	add	r3, r6
 80099cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ce:	e76a      	b.n	80098a6 <_svfiprintf_r+0x52>
 80099d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099d4:	460c      	mov	r4, r1
 80099d6:	2001      	movs	r0, #1
 80099d8:	e7a8      	b.n	800992c <_svfiprintf_r+0xd8>
 80099da:	2300      	movs	r3, #0
 80099dc:	3401      	adds	r4, #1
 80099de:	9305      	str	r3, [sp, #20]
 80099e0:	4619      	mov	r1, r3
 80099e2:	f04f 0c0a 	mov.w	ip, #10
 80099e6:	4620      	mov	r0, r4
 80099e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099ec:	3a30      	subs	r2, #48	@ 0x30
 80099ee:	2a09      	cmp	r2, #9
 80099f0:	d903      	bls.n	80099fa <_svfiprintf_r+0x1a6>
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d0c6      	beq.n	8009984 <_svfiprintf_r+0x130>
 80099f6:	9105      	str	r1, [sp, #20]
 80099f8:	e7c4      	b.n	8009984 <_svfiprintf_r+0x130>
 80099fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80099fe:	4604      	mov	r4, r0
 8009a00:	2301      	movs	r3, #1
 8009a02:	e7f0      	b.n	80099e6 <_svfiprintf_r+0x192>
 8009a04:	ab03      	add	r3, sp, #12
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	462a      	mov	r2, r5
 8009a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009a44 <_svfiprintf_r+0x1f0>)
 8009a0c:	a904      	add	r1, sp, #16
 8009a0e:	4638      	mov	r0, r7
 8009a10:	f3af 8000 	nop.w
 8009a14:	1c42      	adds	r2, r0, #1
 8009a16:	4606      	mov	r6, r0
 8009a18:	d1d6      	bne.n	80099c8 <_svfiprintf_r+0x174>
 8009a1a:	89ab      	ldrh	r3, [r5, #12]
 8009a1c:	065b      	lsls	r3, r3, #25
 8009a1e:	f53f af2d 	bmi.w	800987c <_svfiprintf_r+0x28>
 8009a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a24:	e72c      	b.n	8009880 <_svfiprintf_r+0x2c>
 8009a26:	ab03      	add	r3, sp, #12
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	462a      	mov	r2, r5
 8009a2c:	4b05      	ldr	r3, [pc, #20]	@ (8009a44 <_svfiprintf_r+0x1f0>)
 8009a2e:	a904      	add	r1, sp, #16
 8009a30:	4638      	mov	r0, r7
 8009a32:	f000 f879 	bl	8009b28 <_printf_i>
 8009a36:	e7ed      	b.n	8009a14 <_svfiprintf_r+0x1c0>
 8009a38:	08009f8c 	.word	0x08009f8c
 8009a3c:	08009f96 	.word	0x08009f96
 8009a40:	00000000 	.word	0x00000000
 8009a44:	0800979d 	.word	0x0800979d
 8009a48:	08009f92 	.word	0x08009f92

08009a4c <_printf_common>:
 8009a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a50:	4616      	mov	r6, r2
 8009a52:	4698      	mov	r8, r3
 8009a54:	688a      	ldr	r2, [r1, #8]
 8009a56:	690b      	ldr	r3, [r1, #16]
 8009a58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	bfb8      	it	lt
 8009a60:	4613      	movlt	r3, r2
 8009a62:	6033      	str	r3, [r6, #0]
 8009a64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a68:	4607      	mov	r7, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	b10a      	cbz	r2, 8009a72 <_printf_common+0x26>
 8009a6e:	3301      	adds	r3, #1
 8009a70:	6033      	str	r3, [r6, #0]
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	0699      	lsls	r1, r3, #26
 8009a76:	bf42      	ittt	mi
 8009a78:	6833      	ldrmi	r3, [r6, #0]
 8009a7a:	3302      	addmi	r3, #2
 8009a7c:	6033      	strmi	r3, [r6, #0]
 8009a7e:	6825      	ldr	r5, [r4, #0]
 8009a80:	f015 0506 	ands.w	r5, r5, #6
 8009a84:	d106      	bne.n	8009a94 <_printf_common+0x48>
 8009a86:	f104 0a19 	add.w	sl, r4, #25
 8009a8a:	68e3      	ldr	r3, [r4, #12]
 8009a8c:	6832      	ldr	r2, [r6, #0]
 8009a8e:	1a9b      	subs	r3, r3, r2
 8009a90:	42ab      	cmp	r3, r5
 8009a92:	dc26      	bgt.n	8009ae2 <_printf_common+0x96>
 8009a94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a98:	6822      	ldr	r2, [r4, #0]
 8009a9a:	3b00      	subs	r3, #0
 8009a9c:	bf18      	it	ne
 8009a9e:	2301      	movne	r3, #1
 8009aa0:	0692      	lsls	r2, r2, #26
 8009aa2:	d42b      	bmi.n	8009afc <_printf_common+0xb0>
 8009aa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009aa8:	4641      	mov	r1, r8
 8009aaa:	4638      	mov	r0, r7
 8009aac:	47c8      	blx	r9
 8009aae:	3001      	adds	r0, #1
 8009ab0:	d01e      	beq.n	8009af0 <_printf_common+0xa4>
 8009ab2:	6823      	ldr	r3, [r4, #0]
 8009ab4:	6922      	ldr	r2, [r4, #16]
 8009ab6:	f003 0306 	and.w	r3, r3, #6
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	bf02      	ittt	eq
 8009abe:	68e5      	ldreq	r5, [r4, #12]
 8009ac0:	6833      	ldreq	r3, [r6, #0]
 8009ac2:	1aed      	subeq	r5, r5, r3
 8009ac4:	68a3      	ldr	r3, [r4, #8]
 8009ac6:	bf0c      	ite	eq
 8009ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009acc:	2500      	movne	r5, #0
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	bfc4      	itt	gt
 8009ad2:	1a9b      	subgt	r3, r3, r2
 8009ad4:	18ed      	addgt	r5, r5, r3
 8009ad6:	2600      	movs	r6, #0
 8009ad8:	341a      	adds	r4, #26
 8009ada:	42b5      	cmp	r5, r6
 8009adc:	d11a      	bne.n	8009b14 <_printf_common+0xc8>
 8009ade:	2000      	movs	r0, #0
 8009ae0:	e008      	b.n	8009af4 <_printf_common+0xa8>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	4652      	mov	r2, sl
 8009ae6:	4641      	mov	r1, r8
 8009ae8:	4638      	mov	r0, r7
 8009aea:	47c8      	blx	r9
 8009aec:	3001      	adds	r0, #1
 8009aee:	d103      	bne.n	8009af8 <_printf_common+0xac>
 8009af0:	f04f 30ff 	mov.w	r0, #4294967295
 8009af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af8:	3501      	adds	r5, #1
 8009afa:	e7c6      	b.n	8009a8a <_printf_common+0x3e>
 8009afc:	18e1      	adds	r1, r4, r3
 8009afe:	1c5a      	adds	r2, r3, #1
 8009b00:	2030      	movs	r0, #48	@ 0x30
 8009b02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b06:	4422      	add	r2, r4
 8009b08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b10:	3302      	adds	r3, #2
 8009b12:	e7c7      	b.n	8009aa4 <_printf_common+0x58>
 8009b14:	2301      	movs	r3, #1
 8009b16:	4622      	mov	r2, r4
 8009b18:	4641      	mov	r1, r8
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	47c8      	blx	r9
 8009b1e:	3001      	adds	r0, #1
 8009b20:	d0e6      	beq.n	8009af0 <_printf_common+0xa4>
 8009b22:	3601      	adds	r6, #1
 8009b24:	e7d9      	b.n	8009ada <_printf_common+0x8e>
	...

08009b28 <_printf_i>:
 8009b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b2c:	7e0f      	ldrb	r7, [r1, #24]
 8009b2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b30:	2f78      	cmp	r7, #120	@ 0x78
 8009b32:	4691      	mov	r9, r2
 8009b34:	4680      	mov	r8, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	469a      	mov	sl, r3
 8009b3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b3e:	d807      	bhi.n	8009b50 <_printf_i+0x28>
 8009b40:	2f62      	cmp	r7, #98	@ 0x62
 8009b42:	d80a      	bhi.n	8009b5a <_printf_i+0x32>
 8009b44:	2f00      	cmp	r7, #0
 8009b46:	f000 80d2 	beq.w	8009cee <_printf_i+0x1c6>
 8009b4a:	2f58      	cmp	r7, #88	@ 0x58
 8009b4c:	f000 80b9 	beq.w	8009cc2 <_printf_i+0x19a>
 8009b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b58:	e03a      	b.n	8009bd0 <_printf_i+0xa8>
 8009b5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b5e:	2b15      	cmp	r3, #21
 8009b60:	d8f6      	bhi.n	8009b50 <_printf_i+0x28>
 8009b62:	a101      	add	r1, pc, #4	@ (adr r1, 8009b68 <_printf_i+0x40>)
 8009b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b68:	08009bc1 	.word	0x08009bc1
 8009b6c:	08009bd5 	.word	0x08009bd5
 8009b70:	08009b51 	.word	0x08009b51
 8009b74:	08009b51 	.word	0x08009b51
 8009b78:	08009b51 	.word	0x08009b51
 8009b7c:	08009b51 	.word	0x08009b51
 8009b80:	08009bd5 	.word	0x08009bd5
 8009b84:	08009b51 	.word	0x08009b51
 8009b88:	08009b51 	.word	0x08009b51
 8009b8c:	08009b51 	.word	0x08009b51
 8009b90:	08009b51 	.word	0x08009b51
 8009b94:	08009cd5 	.word	0x08009cd5
 8009b98:	08009bff 	.word	0x08009bff
 8009b9c:	08009c8f 	.word	0x08009c8f
 8009ba0:	08009b51 	.word	0x08009b51
 8009ba4:	08009b51 	.word	0x08009b51
 8009ba8:	08009cf7 	.word	0x08009cf7
 8009bac:	08009b51 	.word	0x08009b51
 8009bb0:	08009bff 	.word	0x08009bff
 8009bb4:	08009b51 	.word	0x08009b51
 8009bb8:	08009b51 	.word	0x08009b51
 8009bbc:	08009c97 	.word	0x08009c97
 8009bc0:	6833      	ldr	r3, [r6, #0]
 8009bc2:	1d1a      	adds	r2, r3, #4
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6032      	str	r2, [r6, #0]
 8009bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e09d      	b.n	8009d10 <_printf_i+0x1e8>
 8009bd4:	6833      	ldr	r3, [r6, #0]
 8009bd6:	6820      	ldr	r0, [r4, #0]
 8009bd8:	1d19      	adds	r1, r3, #4
 8009bda:	6031      	str	r1, [r6, #0]
 8009bdc:	0606      	lsls	r6, r0, #24
 8009bde:	d501      	bpl.n	8009be4 <_printf_i+0xbc>
 8009be0:	681d      	ldr	r5, [r3, #0]
 8009be2:	e003      	b.n	8009bec <_printf_i+0xc4>
 8009be4:	0645      	lsls	r5, r0, #25
 8009be6:	d5fb      	bpl.n	8009be0 <_printf_i+0xb8>
 8009be8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	da03      	bge.n	8009bf8 <_printf_i+0xd0>
 8009bf0:	232d      	movs	r3, #45	@ 0x2d
 8009bf2:	426d      	negs	r5, r5
 8009bf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bf8:	4859      	ldr	r0, [pc, #356]	@ (8009d60 <_printf_i+0x238>)
 8009bfa:	230a      	movs	r3, #10
 8009bfc:	e011      	b.n	8009c22 <_printf_i+0xfa>
 8009bfe:	6821      	ldr	r1, [r4, #0]
 8009c00:	6833      	ldr	r3, [r6, #0]
 8009c02:	0608      	lsls	r0, r1, #24
 8009c04:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c08:	d402      	bmi.n	8009c10 <_printf_i+0xe8>
 8009c0a:	0649      	lsls	r1, r1, #25
 8009c0c:	bf48      	it	mi
 8009c0e:	b2ad      	uxthmi	r5, r5
 8009c10:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c12:	4853      	ldr	r0, [pc, #332]	@ (8009d60 <_printf_i+0x238>)
 8009c14:	6033      	str	r3, [r6, #0]
 8009c16:	bf14      	ite	ne
 8009c18:	230a      	movne	r3, #10
 8009c1a:	2308      	moveq	r3, #8
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c22:	6866      	ldr	r6, [r4, #4]
 8009c24:	60a6      	str	r6, [r4, #8]
 8009c26:	2e00      	cmp	r6, #0
 8009c28:	bfa2      	ittt	ge
 8009c2a:	6821      	ldrge	r1, [r4, #0]
 8009c2c:	f021 0104 	bicge.w	r1, r1, #4
 8009c30:	6021      	strge	r1, [r4, #0]
 8009c32:	b90d      	cbnz	r5, 8009c38 <_printf_i+0x110>
 8009c34:	2e00      	cmp	r6, #0
 8009c36:	d04b      	beq.n	8009cd0 <_printf_i+0x1a8>
 8009c38:	4616      	mov	r6, r2
 8009c3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c3e:	fb03 5711 	mls	r7, r3, r1, r5
 8009c42:	5dc7      	ldrb	r7, [r0, r7]
 8009c44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c48:	462f      	mov	r7, r5
 8009c4a:	42bb      	cmp	r3, r7
 8009c4c:	460d      	mov	r5, r1
 8009c4e:	d9f4      	bls.n	8009c3a <_printf_i+0x112>
 8009c50:	2b08      	cmp	r3, #8
 8009c52:	d10b      	bne.n	8009c6c <_printf_i+0x144>
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	07df      	lsls	r7, r3, #31
 8009c58:	d508      	bpl.n	8009c6c <_printf_i+0x144>
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	6861      	ldr	r1, [r4, #4]
 8009c5e:	4299      	cmp	r1, r3
 8009c60:	bfde      	ittt	le
 8009c62:	2330      	movle	r3, #48	@ 0x30
 8009c64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c6c:	1b92      	subs	r2, r2, r6
 8009c6e:	6122      	str	r2, [r4, #16]
 8009c70:	f8cd a000 	str.w	sl, [sp]
 8009c74:	464b      	mov	r3, r9
 8009c76:	aa03      	add	r2, sp, #12
 8009c78:	4621      	mov	r1, r4
 8009c7a:	4640      	mov	r0, r8
 8009c7c:	f7ff fee6 	bl	8009a4c <_printf_common>
 8009c80:	3001      	adds	r0, #1
 8009c82:	d14a      	bne.n	8009d1a <_printf_i+0x1f2>
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	b004      	add	sp, #16
 8009c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	f043 0320 	orr.w	r3, r3, #32
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	4833      	ldr	r0, [pc, #204]	@ (8009d64 <_printf_i+0x23c>)
 8009c98:	2778      	movs	r7, #120	@ 0x78
 8009c9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	6831      	ldr	r1, [r6, #0]
 8009ca2:	061f      	lsls	r7, r3, #24
 8009ca4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ca8:	d402      	bmi.n	8009cb0 <_printf_i+0x188>
 8009caa:	065f      	lsls	r7, r3, #25
 8009cac:	bf48      	it	mi
 8009cae:	b2ad      	uxthmi	r5, r5
 8009cb0:	6031      	str	r1, [r6, #0]
 8009cb2:	07d9      	lsls	r1, r3, #31
 8009cb4:	bf44      	itt	mi
 8009cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8009cba:	6023      	strmi	r3, [r4, #0]
 8009cbc:	b11d      	cbz	r5, 8009cc6 <_printf_i+0x19e>
 8009cbe:	2310      	movs	r3, #16
 8009cc0:	e7ac      	b.n	8009c1c <_printf_i+0xf4>
 8009cc2:	4827      	ldr	r0, [pc, #156]	@ (8009d60 <_printf_i+0x238>)
 8009cc4:	e7e9      	b.n	8009c9a <_printf_i+0x172>
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	f023 0320 	bic.w	r3, r3, #32
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	e7f6      	b.n	8009cbe <_printf_i+0x196>
 8009cd0:	4616      	mov	r6, r2
 8009cd2:	e7bd      	b.n	8009c50 <_printf_i+0x128>
 8009cd4:	6833      	ldr	r3, [r6, #0]
 8009cd6:	6825      	ldr	r5, [r4, #0]
 8009cd8:	6961      	ldr	r1, [r4, #20]
 8009cda:	1d18      	adds	r0, r3, #4
 8009cdc:	6030      	str	r0, [r6, #0]
 8009cde:	062e      	lsls	r6, r5, #24
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	d501      	bpl.n	8009ce8 <_printf_i+0x1c0>
 8009ce4:	6019      	str	r1, [r3, #0]
 8009ce6:	e002      	b.n	8009cee <_printf_i+0x1c6>
 8009ce8:	0668      	lsls	r0, r5, #25
 8009cea:	d5fb      	bpl.n	8009ce4 <_printf_i+0x1bc>
 8009cec:	8019      	strh	r1, [r3, #0]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	6123      	str	r3, [r4, #16]
 8009cf2:	4616      	mov	r6, r2
 8009cf4:	e7bc      	b.n	8009c70 <_printf_i+0x148>
 8009cf6:	6833      	ldr	r3, [r6, #0]
 8009cf8:	1d1a      	adds	r2, r3, #4
 8009cfa:	6032      	str	r2, [r6, #0]
 8009cfc:	681e      	ldr	r6, [r3, #0]
 8009cfe:	6862      	ldr	r2, [r4, #4]
 8009d00:	2100      	movs	r1, #0
 8009d02:	4630      	mov	r0, r6
 8009d04:	f7f6 fa6c 	bl	80001e0 <memchr>
 8009d08:	b108      	cbz	r0, 8009d0e <_printf_i+0x1e6>
 8009d0a:	1b80      	subs	r0, r0, r6
 8009d0c:	6060      	str	r0, [r4, #4]
 8009d0e:	6863      	ldr	r3, [r4, #4]
 8009d10:	6123      	str	r3, [r4, #16]
 8009d12:	2300      	movs	r3, #0
 8009d14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d18:	e7aa      	b.n	8009c70 <_printf_i+0x148>
 8009d1a:	6923      	ldr	r3, [r4, #16]
 8009d1c:	4632      	mov	r2, r6
 8009d1e:	4649      	mov	r1, r9
 8009d20:	4640      	mov	r0, r8
 8009d22:	47d0      	blx	sl
 8009d24:	3001      	adds	r0, #1
 8009d26:	d0ad      	beq.n	8009c84 <_printf_i+0x15c>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	079b      	lsls	r3, r3, #30
 8009d2c:	d413      	bmi.n	8009d56 <_printf_i+0x22e>
 8009d2e:	68e0      	ldr	r0, [r4, #12]
 8009d30:	9b03      	ldr	r3, [sp, #12]
 8009d32:	4298      	cmp	r0, r3
 8009d34:	bfb8      	it	lt
 8009d36:	4618      	movlt	r0, r3
 8009d38:	e7a6      	b.n	8009c88 <_printf_i+0x160>
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	4632      	mov	r2, r6
 8009d3e:	4649      	mov	r1, r9
 8009d40:	4640      	mov	r0, r8
 8009d42:	47d0      	blx	sl
 8009d44:	3001      	adds	r0, #1
 8009d46:	d09d      	beq.n	8009c84 <_printf_i+0x15c>
 8009d48:	3501      	adds	r5, #1
 8009d4a:	68e3      	ldr	r3, [r4, #12]
 8009d4c:	9903      	ldr	r1, [sp, #12]
 8009d4e:	1a5b      	subs	r3, r3, r1
 8009d50:	42ab      	cmp	r3, r5
 8009d52:	dcf2      	bgt.n	8009d3a <_printf_i+0x212>
 8009d54:	e7eb      	b.n	8009d2e <_printf_i+0x206>
 8009d56:	2500      	movs	r5, #0
 8009d58:	f104 0619 	add.w	r6, r4, #25
 8009d5c:	e7f5      	b.n	8009d4a <_printf_i+0x222>
 8009d5e:	bf00      	nop
 8009d60:	08009f9d 	.word	0x08009f9d
 8009d64:	08009fae 	.word	0x08009fae

08009d68 <memmove>:
 8009d68:	4288      	cmp	r0, r1
 8009d6a:	b510      	push	{r4, lr}
 8009d6c:	eb01 0402 	add.w	r4, r1, r2
 8009d70:	d902      	bls.n	8009d78 <memmove+0x10>
 8009d72:	4284      	cmp	r4, r0
 8009d74:	4623      	mov	r3, r4
 8009d76:	d807      	bhi.n	8009d88 <memmove+0x20>
 8009d78:	1e43      	subs	r3, r0, #1
 8009d7a:	42a1      	cmp	r1, r4
 8009d7c:	d008      	beq.n	8009d90 <memmove+0x28>
 8009d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d86:	e7f8      	b.n	8009d7a <memmove+0x12>
 8009d88:	4402      	add	r2, r0
 8009d8a:	4601      	mov	r1, r0
 8009d8c:	428a      	cmp	r2, r1
 8009d8e:	d100      	bne.n	8009d92 <memmove+0x2a>
 8009d90:	bd10      	pop	{r4, pc}
 8009d92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d9a:	e7f7      	b.n	8009d8c <memmove+0x24>

08009d9c <_sbrk_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d06      	ldr	r5, [pc, #24]	@ (8009db8 <_sbrk_r+0x1c>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	f7f8 f854 	bl	8001e54 <_sbrk>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_sbrk_r+0x1a>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_sbrk_r+0x1a>
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	200018cc 	.word	0x200018cc

08009dbc <_realloc_r>:
 8009dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc0:	4680      	mov	r8, r0
 8009dc2:	4615      	mov	r5, r2
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	b921      	cbnz	r1, 8009dd2 <_realloc_r+0x16>
 8009dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dcc:	4611      	mov	r1, r2
 8009dce:	f7ff bc59 	b.w	8009684 <_malloc_r>
 8009dd2:	b92a      	cbnz	r2, 8009de0 <_realloc_r+0x24>
 8009dd4:	f7ff fbea 	bl	80095ac <_free_r>
 8009dd8:	2400      	movs	r4, #0
 8009dda:	4620      	mov	r0, r4
 8009ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de0:	f000 f81a 	bl	8009e18 <_malloc_usable_size_r>
 8009de4:	4285      	cmp	r5, r0
 8009de6:	4606      	mov	r6, r0
 8009de8:	d802      	bhi.n	8009df0 <_realloc_r+0x34>
 8009dea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009dee:	d8f4      	bhi.n	8009dda <_realloc_r+0x1e>
 8009df0:	4629      	mov	r1, r5
 8009df2:	4640      	mov	r0, r8
 8009df4:	f7ff fc46 	bl	8009684 <_malloc_r>
 8009df8:	4607      	mov	r7, r0
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d0ec      	beq.n	8009dd8 <_realloc_r+0x1c>
 8009dfe:	42b5      	cmp	r5, r6
 8009e00:	462a      	mov	r2, r5
 8009e02:	4621      	mov	r1, r4
 8009e04:	bf28      	it	cs
 8009e06:	4632      	movcs	r2, r6
 8009e08:	f7ff fbc2 	bl	8009590 <memcpy>
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	4640      	mov	r0, r8
 8009e10:	f7ff fbcc 	bl	80095ac <_free_r>
 8009e14:	463c      	mov	r4, r7
 8009e16:	e7e0      	b.n	8009dda <_realloc_r+0x1e>

08009e18 <_malloc_usable_size_r>:
 8009e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e1c:	1f18      	subs	r0, r3, #4
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bfbc      	itt	lt
 8009e22:	580b      	ldrlt	r3, [r1, r0]
 8009e24:	18c0      	addlt	r0, r0, r3
 8009e26:	4770      	bx	lr

08009e28 <_init>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	bf00      	nop
 8009e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2e:	bc08      	pop	{r3}
 8009e30:	469e      	mov	lr, r3
 8009e32:	4770      	bx	lr

08009e34 <_fini>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	bf00      	nop
 8009e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3a:	bc08      	pop	{r3}
 8009e3c:	469e      	mov	lr, r3
 8009e3e:	4770      	bx	lr
